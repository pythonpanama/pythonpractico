{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sobre el curso Este es un curso introductorio a Python para una audiencia con noci\u00f3n o experiencia previa en programaci\u00f3n. Su enfoque es ense\u00f1ar Python a trav\u00e9s del problema general de manipulaci\u00f3n de datos, espec\u00edficamente del mercado de valores. La idea del curso es mantenerse enfocado en lo pr\u00e1ctico y pragm\u00e1tico. El curso fue originalmente publicado en ingl\u00e9s por David Beazley y, con algunas modificaciones, adaptado al espa\u00f1ol por Adriaan Beiertz . Se comparte gratuitamente bajo el marco de la licencia Reconocimiento-CompartirIgual 4.0 Internacional (CC BY-SA 4.0) . Para completar el curso, solo necesitas una instalaci\u00f3n de Python 3.6+, determinaci\u00f3n, y tiempo para leer y hacer los ejercicios. El curso toma alrededor de 25-35 horas de autoestudio, lo cual incluye completar alrededor de 130 ejercicios de programaci\u00f3n. Este no es un curso para el completo principiante, toda vez que asume alguna experiencia o noci\u00f3n de programaci\u00f3n en este o algun otro lenguaje. Tampoco es un curso de desarrollo web o para ingenieros de software sobre como escribir o mantener una aplicaci\u00f3n Python de un mill\u00f3n de l\u00edneas de c\u00f3digo.","title":"Sobre el curso"},{"location":"#sobre-el-curso","text":"Este es un curso introductorio a Python para una audiencia con noci\u00f3n o experiencia previa en programaci\u00f3n. Su enfoque es ense\u00f1ar Python a trav\u00e9s del problema general de manipulaci\u00f3n de datos, espec\u00edficamente del mercado de valores. La idea del curso es mantenerse enfocado en lo pr\u00e1ctico y pragm\u00e1tico. El curso fue originalmente publicado en ingl\u00e9s por David Beazley y, con algunas modificaciones, adaptado al espa\u00f1ol por Adriaan Beiertz . Se comparte gratuitamente bajo el marco de la licencia Reconocimiento-CompartirIgual 4.0 Internacional (CC BY-SA 4.0) . Para completar el curso, solo necesitas una instalaci\u00f3n de Python 3.6+, determinaci\u00f3n, y tiempo para leer y hacer los ejercicios. El curso toma alrededor de 25-35 horas de autoestudio, lo cual incluye completar alrededor de 130 ejercicios de programaci\u00f3n. Este no es un curso para el completo principiante, toda vez que asume alguna experiencia o noci\u00f3n de programaci\u00f3n en este o algun otro lenguaje. Tampoco es un curso de desarrollo web o para ingenieros de software sobre como escribir o mantener una aplicaci\u00f3n Python de un mill\u00f3n de l\u00edneas de c\u00f3digo.","title":"Sobre el curso"},{"location":"0/","text":"Empiece aqu\u00ed El curso fue originalmente dise\u00f1ado para que todo lo haga desde su ordenador. Sin embargo, hemos puesto a su disposici\u00f3n en la plataforma Repl.it un editor, consola Python, terminal Linux y los archivos correspondiente a cada secci\u00f3n, a fin de que pueda escribir y ejecutar c\u00f3digo en su navegador. Por tanto, sugerimos crear una cuenta en esta plataforma, a fin de que pueda guardar su trabajo y compartir el enlace cuando necesite ayuda. Contenido El enlace a esta plataforma interactiva con los archivos de la secci\u00f3n correspondiente siempre se encontrar\u00e1n al inicio del contenido de la secci\u00f3n y al inicio de los ejercicios de cada secci\u00f3n. Usted lee el contenido primero e ingresa las instrucciones Python en la Consola mientras va leyendo. Ejercicios Cuando termine con el contenido.md , deber\u00e1 continuar con el archivo ejercicios.md . Shell En muchas ocasiones, usted har\u00e1 uso de la Consola Python; no obstante, cuando tenga que escribir en un archivo, primero busque el archivo y escriba su c\u00f3digo ah\u00ed. Cuando tenga que ejecutarlo, tendr\u00e1 que acceder al Shell , como puede ver a continuaci\u00f3n. Por ejemplo, si tiene un archivo que se llama hipoteca.py tendr\u00e1 que ejecutar $ python hipoteca.py y pulsar Enter. Archivos nuevos Usted tambi\u00e9n puede crear archivos nuevos. Copiar el repositorio Para que usted tenga una copia propia de su trabajo, tiene que hacer un Fork . Compartir En algunas ocasiones tendr\u00e1 que compartirle el repositorio a alguien, especialmente cuando necesite ayuda. Por tanto, simplemente copie el enlace despu\u00e9s de haberle hecho un Fork . Comunidad Es importante aprender en p\u00fablico e interactuar con otras personas. En ese sentido, Python Panam\u00e1 ha puesto a disposici\u00f3n su servidor en Discord, donde el curso tiene su propia categor\u00eda organizado por canales, a fin de tener una conversaci\u00f3n ordenada. Aqu\u00ed podr\u00e1 encontrar a otros Pythonistas que estan tomando este curso o que puedan ayudarles con alguna pregunta. Puede acceder al servidor de Discord de Python Panama aqui .","title":"0 Empiece aqui"},{"location":"0/#empiece-aqui","text":"El curso fue originalmente dise\u00f1ado para que todo lo haga desde su ordenador. Sin embargo, hemos puesto a su disposici\u00f3n en la plataforma Repl.it un editor, consola Python, terminal Linux y los archivos correspondiente a cada secci\u00f3n, a fin de que pueda escribir y ejecutar c\u00f3digo en su navegador. Por tanto, sugerimos crear una cuenta en esta plataforma, a fin de que pueda guardar su trabajo y compartir el enlace cuando necesite ayuda.","title":"Empiece aqu\u00ed"},{"location":"0/#contenido","text":"El enlace a esta plataforma interactiva con los archivos de la secci\u00f3n correspondiente siempre se encontrar\u00e1n al inicio del contenido de la secci\u00f3n y al inicio de los ejercicios de cada secci\u00f3n. Usted lee el contenido primero e ingresa las instrucciones Python en la Consola mientras va leyendo.","title":"Contenido"},{"location":"0/#ejercicios","text":"Cuando termine con el contenido.md , deber\u00e1 continuar con el archivo ejercicios.md .","title":"Ejercicios"},{"location":"0/#shell","text":"En muchas ocasiones, usted har\u00e1 uso de la Consola Python; no obstante, cuando tenga que escribir en un archivo, primero busque el archivo y escriba su c\u00f3digo ah\u00ed. Cuando tenga que ejecutarlo, tendr\u00e1 que acceder al Shell , como puede ver a continuaci\u00f3n. Por ejemplo, si tiene un archivo que se llama hipoteca.py tendr\u00e1 que ejecutar $ python hipoteca.py y pulsar Enter.","title":"Shell"},{"location":"0/#archivos-nuevos","text":"Usted tambi\u00e9n puede crear archivos nuevos.","title":"Archivos nuevos"},{"location":"0/#copiar-el-repositorio","text":"Para que usted tenga una copia propia de su trabajo, tiene que hacer un Fork .","title":"Copiar el repositorio"},{"location":"0/#compartir","text":"En algunas ocasiones tendr\u00e1 que compartirle el repositorio a alguien, especialmente cuando necesite ayuda. Por tanto, simplemente copie el enlace despu\u00e9s de haberle hecho un Fork .","title":"Compartir"},{"location":"0/#comunidad","text":"Es importante aprender en p\u00fablico e interactuar con otras personas. En ese sentido, Python Panam\u00e1 ha puesto a disposici\u00f3n su servidor en Discord, donde el curso tiene su propia categor\u00eda organizado por canales, a fin de tener una conversaci\u00f3n ordenada. Aqu\u00ed podr\u00e1 encontrar a otros Pythonistas que estan tomando este curso o que puedan ayudarles con alguna pregunta. Puede acceder al servidor de Discord de Python Panama aqui .","title":"Comunidad"},{"location":"1/","text":"1. Intro a Python 1.1 Introduciendo Python El objetivo de este cap\u00edtulo es introducir las bases de Python. Iniciaremos desde cero y aprenderemos a editar, ejecutar, y depurar programas. Adem\u00e1s, escribiremos una secuencia de comandos que lee data en un archivo CSV y ejecuta un c\u00e1lculo. 1.1.1: Qu\u00e9 es Python? Python es un lenguaje interpretado de programaci\u00f3n de alto nivel. A menudo se le clasifica como un lenguaje de secuencias de comandos y tambi\u00e9n se le considera similar a lenguajes como Perl, Tcl o Ruby. La sintaxis de Python est\u00e1 vagamente inspirada en elementos de la programaci\u00f3n C. Python fue creado por Guido van Rossum alrededor de 1990, quien lo nombr\u00f3 en honor a la comedia de origen brit\u00e1nico Monty Python . 1.1.2: Donde consigo Python? Puedes obtener una versi\u00f3n de Python en Python.org . Para los prop\u00f3sitos de este curso, solo necesitas una instalaci\u00f3n b\u00e1sica. Recomiendo instalar Python 3.6 o una versi\u00f3n m\u00e1s reciente. Python 3.6 es el que se usa en las notas y en las soluciones, sin embargo puedes utilizar cualquier versi\u00f3n. 1.1.3: Porqu\u00e9 fue creado? En palabras del creador de Python: Mi motivaci\u00f3n original para crear Python fue la necesidad percibida de un lenguaje de alto nivel en el proyecto Amoeba [Sistemas Operativos]. Me di cuenta de que el desarrollo de las utilidades de administraci\u00f3n del sistema en C estaban tardando demasiado. Adem\u00e1s, hacer estas cosas en el shell Bourne no iba a funcionar por una variedad de razones. ... Entonces, era necesario un lenguaje que cerrara la brecha entre C y el shell. Guido van Rossum 1.1.4: D\u00f3nde est\u00e1 Python en mi Maquina? Aunque hay muchos entornos en los que puede ejecutar Python, Python normalmente se instala en su m\u00e1quina como un programa que se ejecuta desde la terminal o el shell de comandos. Desde la terminal, deber\u00eda poder escribir python as\u00ed: $ python Python 3.8.1 (default, Feb 20 2020, 09:29:22) [Clang 10.0.0 (clang-1000.10.44.4)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> print(\"hello world\") hello world >>> Aunque hay muchos entornos en donde puede programar en Python, ser\u00e1 un programador m\u00e1s fuerte si puede ejecutar, depurar e interactuar con Python en la terminal. Este es el entorno nativo de Python. Si puede usar Python aqu\u00ed, podr\u00e1 usarlo en cualquier otro lugar. 1.1.5: Ejercicios Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador Ejercicio 1.1: Utilizando Python como Calculadora En su m\u00e1quina, inicie Python y util\u00edcelo como calculador para resolver el siguiente problema. El suertudo de Juan compr\u00f3 75 acciones de Google a un precio de $235.14 USD por acci\u00f3n. Hoy, las acciones de Google tienen un precio de $711.25 USD. Usando el modo interactivo de Python como una calculadora, averig\u00fce cu\u00e1ntas ganancias obtendr\u00eda Juan si vendiera todas sus acciones. >>> (711.25 - 235.14) * 75 35708.25 >>> Consejo profesional: use la variable de subrayado (_) para usar el resultado del \u00faltimo c\u00e1lculo. Por ejemplo, \u00bfcu\u00e1ntas ganancias obtiene Juan despu\u00e9s de que su malvado corredor se lleva su parte del 20%? >>> _ * 0.80 28566.600000000002 >>> Ejercicio 1.2: Consiguiendo ayuda Utilice el comando help() para obtener ayuda sobre la funci\u00f3n abs (). Luego use help() para obtener ayuda sobre la funci\u00f3n round (). Escriba help() solo sin valor para ingresar al visor de ayuda interactiva. Una advertencia con help() es que no funciona para declaraciones b\u00e1sicas de Python como for, if, while, etc. (es decir, si escribe help (for) obtendr\u00e1 un error de sintaxis). En su lugar, puede intentar poner el tema de la ayuda entre comillas, como ayuda (\"para\"). Si eso no funciona, tendr\u00e1 que recurrir a una b\u00fasqueda en Internet. Seguimiento: vaya a http://docs.python.org y busque la documentaci\u00f3n de la funci\u00f3n abs() (pista: se encuentra en la referencia de la biblioteca relacionada con las funciones integradas). Ejercicio 1.3: Copiar y pegar Este curso est\u00e1 estructurado como una serie de p\u00e1ginas en las que se le anima a probar ejemplos interactivos de c\u00f3digo Python escribi\u00e9ndolos a mano. Si est\u00e1 aprendiendo Python por primera vez, se recomienda este \"enfoque lento\". Obtendr\u00e1 una mejor idea del idioma al reducir la velocidad, escribir cosas y pensar en lo que est\u00e1 haciendo. Si debe \"cortar y pegar\" ejemplos de c\u00f3digo, seleccione el c\u00f3digo comenzando despu\u00e9s del indicador >>> y subiendo hasta, pero no m\u00e1s all\u00e1 de la primera l\u00ednea en blanco o el siguiente mensaje >>> (lo que aparezca primero). Seleccione \"copiar\" en el navegador, vaya a la ventana de Python y seleccione \"pegar\" para copiarlo en el shell de Python. Para que el c\u00f3digo se ejecute, es posible que deba presionar \"Retorno\" una vez despu\u00e9s de haberlo pegado. Corte y pegue las siguientes declaraciones de Python: >>> 12 + 20 32 >>> (3 + 4 + 5 + 6) 18 >>> for i in range(5): print(i) 0 1 2 3 4 >>> Advertencia: No es posible pegar m\u00e1s de un comando de Python (declaraciones que aparecen despu\u00e9s de >>> ) en el shell b\u00e1sico de Python a la vez. Tienes que pegar cada comando de uno en uno. Ahora que ha hecho esto, recuerde que sacar\u00e1 m\u00e1s provecho de la clase escribiendo el c\u00f3digo lentamente y pensando en ello, no cortando y pegando. Ejercicio 1.4: Donde esta mi bus? Pruebe algo m\u00e1s avanzado y escriba estas declaraciones para averiguar cu\u00e1nto tiempo tendr\u00e1n que esperar las personas que esperan en la esquina de la calle Clark y Balmoral en Chicago al pr\u00f3ximo autob\u00fas CTA n. \u00b0 22 en direcci\u00f3n norte: >>> import urllib.request >>> u = urllib.request.urlopen('http://ctabustracker.com/bustime/map/getStopPredictions.jsp?stop=14791&route=22') >>> from xml.etree.ElementTree import parse >>> doc = parse(u) >>> for pt in doc.findall('.//pt'): print(pt.text) 6 MIN 18 MIN 28 MIN >>> S\u00ed, acaba de descargar una p\u00e1gina web, analizar un documento XML y extraer informaci\u00f3n \u00fatil en aproximadamente 6 l\u00edneas de c\u00f3digo. Los datos a los que accedi\u00f3 en realidad alimentan el sitio web http://ctabustracker.com/bustime/home.jsp. Int\u00e9ntelo nuevamente y observe c\u00f3mo cambian las predicciones. Si falla la primera declaraci\u00f3n de importaci\u00f3n import urllib.request , probablemente est\u00e9 usando Python 2. Para este curso, debe asegurarse de que est\u00e1 usando Python 3.6 o m\u00e1s reciente. Vaya a https://www.python.org para descargarlo si lo necesita. Si su entorno de trabajo requiere el uso de un servidor proxy HTTP, es posible que deba configurar la variable de entorno HTTP_PROXY para que esta parte del ejercicio funcione. Por ejemplo: >>> import os >>> os.environ['HTTP_PROXY'] = 'http://suproxy.server.com' >>> Si no puede hacer que esto funcione, no se preocupe. El resto de este curso no tiene nada que ver con analizar XML. 1.2 Un primer programa Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador 1.2.1: Ejecutando Python Los programas de Python siempre se ejecutan dentro de un int\u00e9rprete. El int\u00e9rprete es una aplicaci\u00f3n \"basada en consola\" que normalmente se ejecuta desde un shell de comandos. python3 Python 3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04) [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Los programadores expertos generalmente no tienen problemas para usar el int\u00e9rprete de esta manera, pero no es tan f\u00e1cil de usar para los principiantes. Es posible que est\u00e9 utilizando un entorno que proporciona una interfaz diferente a Python. Eso est\u00e1 bien, pero aprender a ejecutar la terminal de Python sigue siendo una habilidad \u00fatil. 1.2.2: Modo interactivo Cuando inicias Python, obtienes un modo interactivo donde puedes experimentar. Si comienza a escribir declaraciones, se ejecutar\u00e1n de inmediato. No hay ciclo de edici\u00f3n / compilaci\u00f3n / ejecuci\u00f3n / depuraci\u00f3n. >>> print('hello world') hello world >>> 37*42 1554 >>> for i in range(5): ... print(i) ... 0 1 2 3 4 >>> Este llamado ciclo de lectura-evaluaci\u00f3n-impresi\u00f3n (o REPL, por sus siglas en ingl\u00e9s) es muy \u00fatil para depurar y explorar. DETENTE : si no puedes descubrir c\u00f3mo interactuar con Python, detengase y descubra c\u00f3mo hacerlo. Si est\u00e1 utilizando un IDE, es posible que est\u00e9 oculto detr\u00e1s de una opci\u00f3n de men\u00fa u otra ventana. Muchas partes de este curso asumen que puede interactuar con el int\u00e9rprete. Let's take a closer look at the elements of the REPL: >>> es el indicador del int\u00e9rprete para iniciar una nueva declaraci\u00f3n. ... es la indicaci\u00f3n del int\u00e9rprete para continuar una declaraci\u00f3n. Ingrese una l\u00ednea en blanco para terminar de escribir y ejecutar lo que ingres\u00f3. El mensaje ... puede aparecer o no seg\u00fan el entorno. Para este curso, se muestra como espacios en blanco para que sea m\u00e1s f\u00e1cil cortar / pegar muestras de c\u00f3digo. El gui\u00f3n bajo _ contiene el \u00faltimo resultado. >>> 37 * 42 1554 >>> _ * 2 3108 >>> _ + 50 3158 >>> Esto solo es cierto en el modo interactivo. Nunca uses _ en un programa. 1.2.3: Creando programas Los programas se colocan en archivos .py. # hola.py print('hola mundo') Puede crear estos archivos con su editor de texto favorito. 1.2.4: Ejecutando programas Para ejecutar un programa, ejec\u00fatelo en la terminal con el comando python. Por ejemplo, en la l\u00ednea de comandos Unix: $ python hola.py hola mundo $ O desde el shell de Windows: C:\\AlgunDirectorio>hola.py hello world C:\\AlgunDirectorio>c:\\python36\\python hola.py hello world Nota: en Windows, es posible que deba especificar una ruta completa al int\u00e9rprete de Python, como c:\\python36\\python . Sin embargo, si Python se instala de la forma habitual, es posible que pueda simplemente escribir el nombre del programa, como hola.py. 1.2.5: Un ejemplo Resolvamos el siguiente problema: Una ma\u00f1ana, sales y colocas un billete de un d\u00f3lar en la acera de la torre Sears en Chicago. Cada d\u00eda a partir de entonces, sales y colocas el doble de billetes. \u00bfCu\u00e1nto tiempo tarda la pila de billetes en superar la altura de la torre? Una posible soluci\u00f3n: # sears.py billete_grosor = 0.11 * 0.001 # Metros (0.11 mm) sears_altura = 442 # Altura (metros) num_billetes = 1 dia = 1 while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 print('N\u00famero de d\u00edas', dia) print('N\u00famero de facturas', num_billetes) print('Altura final', num_billetes * billete_grosor) Cuando lo ejecuta, obtiene el siguiente resultado: $ python3 sears.py 1 1 0.00011 2 2 0.00022 3 4 0.00044 4 8 0.00088 5 16 0.00176 6 32 0.00352 7 64 0.00704 8 128 0.01408 9 256 0.02816 10 512 0.05632 11 1024 0.11264 12 2048 0.22528 13 4096 0.45056 14 8192 0.90112 15 16384 1.80224 16 32768 3.60448 17 65536 7.20896 18 131072 14.41792 19 262144 28.83584 20 524288 57.67168 21 1048576 115.34336 22 2097152 230.68672 N\u00famero de d\u00edas 23 N\u00famero de facturas 4194304 Altura final 461.37344 Usando este programa como gu\u00eda, puede aprender una serie de conceptos b\u00e1sicos importantes sobre Python. 1.2.6: Declaraciones Un programa de Python es una secuencia de declaraciones: a = 3 + 4 b = a * 2 print(b) Cada declaraci\u00f3n termina con una nueva l\u00ednea. Las sentencias se ejecutan una tras otra hasta que el control llega al final del archivo. 1.2.7: Comentarios Los comentarios son texto que no se ejecutar\u00e1. a = 3 + 4 # Esto es un comentario b = a * 2 print(b) Los comentarios se indican con # y se extienden hasta el final de la l\u00ednea. 1.2.8: Variables Una variable es el nombre de un valor. Puede utilizar letras (min\u00fasculas y may\u00fasculas) de la a a la z, adem\u00e1s del car\u00e1cter subrayado _ . Los n\u00fameros tambi\u00e9n pueden formar parte del nombre de una variable, excepto como primer car\u00e1cter. altura = 442 # v\u00e1lido _height = 442 # v\u00e1lido altura2 = 442 # v\u00e1lido 2height = 442 # inv\u00e1lido 1.2.9: Tipos Las variables no necesitan declararse con el tipo de valor. El tipo est\u00e1 asociado con el valor del lado derecho, no con el nombre de la variable. altura = 442 # Un n\u00famero entero altura = 442.0 # Punto flotante height = 'Muy alto' # Una cadena Python se escribe din\u00e1micamente. El \"tipo\" percibido de una variable puede cambiar a medida que se ejecuta un programa en funci\u00f3n del valor actual que se le asigna. 1.2.10: Casos Sensitivos Python distingue entre may\u00fasculas y min\u00fasculas. Las letras may\u00fasculas y min\u00fasculas se consideran letras diferentes. Todas estas son variables diferentes: nombre = 'Jake' Nombre = 'Elwood' NOMBRE = 'Guido' Las declaraciones de idioma son siempre en min\u00fasculas. while x < 0: # OK WHILE x < 0: # ERROR 1.2.11: Ciclar La instrucci\u00f3n while ejecuta un ciclo. while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 print('Numero de dias', dia) Las declaraciones con sangr\u00eda debajo del while se ejecutar\u00e1n siempre que la expresi\u00f3n posterior al while sea verdadera / cierta. 1.2.12: Sangr\u00edas (las de texto) La sangr\u00eda se usa para denotar grupos de declaraciones que van juntas. Considere el ejemplo anterior: while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 print('Numero de dias', dia) La sangr\u00eda agrupa las siguientes declaraciones juntas como las operaciones que se repiten: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 Debido a que la instrucci\u00f3n print() al final no tiene sangr\u00eda, no pertenece al ciclo. La l\u00ednea vac\u00eda es solo para facilitar la lectura. No afecta la ejecuci\u00f3n. Sangr\u00edas - Mejores pr\u00e1cticas Utilice espacios en lugar de tabulaciones. Utilice 4 espacios por nivel. Utilice un editor compatible con Python. El \u00fanico requisito de Python es que la sangr\u00eda dentro del mismo bloque sea consistente. Por ejemplo, esto es un error: while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 # error num_billetes = num_billetes * 2 1.2.13: Condicionales La instrucci\u00f3n if se usa para ejecutar un condicional: if a > b: print('Computadora dice no') else: print('Computadora dice si') Puede verificar m\u00faltiples condiciones agregando verificaciones adicionales usando elif. if a > b: print('Computadora dice no') elif a == b: print('Computadora dice si') else: print('Computadora dice quizas') 1.2.14: Imprimiendo La funci\u00f3n de impresi\u00f3n produce una sola l\u00ednea de texto con los valores pasados. print('\u00a1Hola mundo!') # Imprime el texto '\u00a1Hola mundo!' Puede utilizar variables. El texto impreso ser\u00e1 el valor de la variable, no el nombre. x = 100 print(x) # Imprime el texto '100' Si pasa m\u00e1s de un valor para imprimir, est\u00e1n separados por espacios. nombre = 'Jake' print('Mi nombre es', nombre) # Imprime el texto 'Mi nombre es Jake' print() siempre pone una nueva l\u00ednea al final. print('Hola') print('Mi nombre es', 'Jake') Esto imprime: shell Hola Mi nombre es Jake La nueva l\u00ednea adicional se puede suprimir: print('Hola', end = '') print('Mi nombre es', 'Jake') Este c\u00f3digo ahora se imprimir\u00e1: Hola mi nombre es Jake 1.2.15: Input (dato de entrada) de usuario Para leer una l\u00ednea de entrada de usuario escrita, use la funci\u00f3n input() : nombre = input('Ingrese su nombre:') print('Tu nombre es', nombre) input imprime un mensaje al usuario y devuelve su respuesta. Esto es \u00fatil para programas peque\u00f1os, ejercicios de aprendizaje o depuraci\u00f3n simple. No se usa mucho para programas reales. 1.2.16: La declaraci\u00f3n \"pass\" Sometimes you need to specify an empty code block. The keyword pass is used for it. if a > b: pass else: print('Computer says false') This is also called a \"no-op\" statement. It does nothing. It serves as a placeholder for statements, possibly to be added later. 1.2.17: Ejercicios Este es el primer conjunto de ejercicios en los que necesita crear archivos Python y ejecutarlos. A partir de este punto, se asume que est\u00e1 editando archivos en el directorio ./Work/ . Para ayudarle a localizar el lugar adecuado, se han creado varios archivos de inicio vac\u00edos con los nombres de archivo adecuados. Busque el archivo ./Work/rebote.py que se utiliz\u00f3 en el primer ejercicio. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador Ejercicio 1.5: El rebote Una pelota de goma se deja caer desde una altura de 100 metros y cada vez que golpea el suelo, rebota hasta 3/5 de la altura a la que cay\u00f3. Escriba un programa bounce.py que imprima una tabla que muestre la altura de los primeros 10 rebotes. Su programa deber\u00eda crear una tabla que se parezca a esto: 1 60,0 2 36,0 3 21.599999999999998 4 12.959999999999999 5 7.775999999999999 6 4.6655999999999995 7 2.7993599999999996 8 1,6796159999999998 9 1,0077695999999998 10 0.6046617599999998 Nota: Puede limpiar un poco la salida si usa la funci\u00f3n round() . Intente usarlo para redondear la salida a 4 d\u00edgitos. 1 60,0 2 36,0 3 21,6 4 12,96 5 7.776 6 4.6656 7 2.7994 8 1,6796 9 1.0078 10 0.6047 Ejercicio 1.6: Depuraci\u00f3n El siguiente fragmento de c\u00f3digo contiene c\u00f3digo del problema de la torre Sears. Tambi\u00e9n tiene un error. billete_grosor = 0.11 * 0.001 # Metros (0.11 mm) sears_altura = 442 # Altura (metros) num_billetes = 1 dia = 1 while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dias + 1 num_billetes = num_billetes * 2 print ('N\u00famero de d\u00edas', dia) print ('N\u00famero de facturas', num_billetes) print ('Altura final', num_billetes * billete_grosor) Copie y pegue el c\u00f3digo que aparece arriba en un nuevo programa llamado sears.py . Cuando ejecute el c\u00f3digo, obtendr\u00e1 un mensaje de error que hace que el programa se bloquee de esta manera: Traceback (most recent call last): File \"sears.py\", line 10, in <module> day = dias + 1 NameError: name 'dias' is not defined Leer los mensajes de error es una parte importante del c\u00f3digo Python. Si su programa falla, la \u00faltima l\u00ednea del mensaje de rastreo es la raz\u00f3n real por la cual el programa falla. Por encima de eso, deber\u00eda ver un fragmento de c\u00f3digo fuente y luego un nombre de archivo de identificaci\u00f3n y un n\u00famero de l\u00ednea. \u00bfQu\u00e9 l\u00ednea es el error? Cual es el error? Arreglar el error Ejecute el programa con \u00e9xito 1.3 N\u00fameros Esta secci\u00f3n discute sobre c\u00e1lculos matem\u00e1ticos. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador 1.3.1: Tipos de numeros Python tiene 4 tipos de n\u00fameros: Booleanos Enteros Punto flotante Complejo (n\u00fameros imaginarios) 1.3.2: Booleanos (bool) Los booleanos tienen dos valores: True , False . a = True b = False Num\u00e9ricamente, se eval\u00faan como n\u00fameros enteros con valor \"1\", \"0\". c = 4 + True # 5 d = False if d == 0: print('d is False') Pero no escriba c\u00f3digo como ese. Ser\u00eda extra\u00f1o. * 1.3.3: Enteros (int) Valores firmados de tama\u00f1o y base arbitraria: a = 37 b = -299392993727716627377128481812241231 c = 0x7fa8 # Hexadecimal d = 0o253 # Octal e = 0b10001111 # Binario Operaciones comunes: x + y Suma x - y Resta x * y Multiplicacion x / y Divisi\u00f3n (produce un flotante) x // y Divisi\u00f3n entera (produce un entero) x % y Modulo (devuelve el resto de la divisi\u00f3n) x ** y Potencia x << n Bit desplazamiento izquierda x >> n Bit desplazamiento derecha x & y Bit-wise AND x | y Bit-wise OR x ^ y Bit-wise XOR ~x Bit-wise NOT abs(x) Valor absoluto 1.3.4: Punto flotante (float) Utilice una notaci\u00f3n decimal o exponencial para especificar un valor de coma flotante: a = 37.45 b = 4e5 # 4 x 10**5 or 400,000 c = -1.345e-10 Los flotantes se representan con precisi\u00f3n doble utilizando la representaci\u00f3n de CPU nativa [IEEE 754] (https://en.wikipedia.org/wiki/IEEE_754). Es lo mismo que el tipo \"doble\" en el lenguaje de programaci\u00f3n C. 17 d\u00edgitos de precisi\u00f3n Exponente de -308 a 308 Tenga en cuenta que los n\u00fameros de punto flotante son inexactos cuando representan decimales. >>> a = 2.1 + 4.2 >>> a == 6.3 False >>> a 6.300000000000001 >>> Esto no es un problema de Python , sino el hardware de punto flotante subyacente en la CPU. Operaciones comunes: x + y Suma x - y Resta x * y Multiplicacion x / y Division x // y Division entera x % y Modulo x ** y Potencia abs(x) Valor absoluto Estos son los mismos operadores que los enteros, excepto los operadores bit a bit. Las funciones matem\u00e1ticas adicionales se encuentran en el m\u00f3dulo math . import math a = math.sqrt(x) b = math.sin(x) c = math.cos(x) d = math.tan(x) e = math.log(x) 1.3.5: Comparaciones Los siguientes operadores de comparaci\u00f3n / relacionales funcionan con n\u00fameros: x < y Menor x <= y Menor o igual x > y Mayor x >= y Mayor o igual x == y Igual x != y No es igual Puede formar expresiones booleanas m\u00e1s complejas usando and , or , not Aqu\u00ed est\u00e1n algunos ejemplos: if b >= a and b <= c: print('b est\u00e1 entre a y c') if not (b < a or b > c): print('b todav\u00eda est\u00e1 entre a y c') 1.3.6: Convirtiendo numeros El nombre del tipo se puede utilizar para convertir valores: a = int(x) # Convierte x a entero b = float(x) # Convierte x a coma flotante Try it out. >>> a = 3.14159 >>> int(a) 3 >>> b = '3.14159' # Tambi\u00e9n funciona con cadenas de numeros >>> float(b) 3.14159 >>> 1.3.7: Ejercicios Recordatorio: Estos ejercicios asumen que est\u00e1 trabajando en el directorio /Work . Busque el archivo hipoteca.py . Ejercicio 1.7: La hipoteca de Dave Dave ha decidido sacar una hipoteca de tasa fija a 30 a\u00f1os de $500,000 con el comercio de hipotecas, inversiones en acciones y Bitcoin de Guido corporaci\u00f3n. La tasa de inter\u00e9s es del 5% y el pago mensual es $2684,11 . Aqu\u00ed hay un programa que calcula la cantidad total que Dave tendr\u00e1 para pagar durante la vida de la hipoteca: # mortgage.py capital = 500000.0 tasa = 0.05 pago = 2684.11 total_pagado = 0.0 while capital > 0: capital = capital * (1 + tasa / 12) - pago total_pagado = total_pagado + pago print('Total pagado', total_pagado) Ingrese a este programa y ejec\u00fatelo. Deber\u00eda obtener una respuesta de \"966,279.6\". Ejercicio 1.8: Pagos adicionales Suponga que Dave paga $1000 adicionales al mes durante los primeros 12 meses de la hipoteca. Modifique el programa para incorporar este pago adicional y haga que imprima el monto total pagado junto con la cantidad de meses requeridos. Cuando ejecute el nuevo programa, deber\u00eda informar un pago total de 929,965.62 durante 342 meses. Ejercicio 1.9: Hacer una calculadora de pago adicional Modifique el programa para que la informaci\u00f3n de pago adicional pueda manejarse de manera m\u00e1s general. H\u00e1galo de modo que el usuario pueda configurar estas variables: extra_pago_inicio_mes = 61 extra_pago_fin_mes = 108 extra_pago = 1000 Haga que el programa mire estas variables y calcule el total pagado adecuadamente. \u00bfCu\u00e1nto pagar\u00e1 Dave si paga $1000 adicionales al mes durante 4 a\u00f1os a partir de la primera ya se han pagado cinco a\u00f1os? Ejercicio 1.10: Crear una tabla Modifique el programa para imprimir una tabla que muestre el mes, el total pagado hasta el momento y el capital restante. La salida deber\u00eda verse as\u00ed: 1 2684.11 499399.22 2 5368.22 498795.94 3 8052.33 498190.15 4 10736.44 497581.83 5 13420.55 496970.98 ... 308 874705.88 3478.83 309 877389,99 809,21 310 880074.1 -1871.53 Total pagado 880074,1 Meses 310 Ejercicio 1.11: Bono Mientras lo hace, corrija el programa para corregir el pago en exceso que se produjo en el \u00faltimo mes. Ejercicio 1.12: Un misterio int() y float() se pueden usar para convertir n\u00fameros. Por ejemplo: >>> int(\"123\") 123 >>> float(\"1.23\") 1.23 >>> Con eso en mente, \u00bfpuede explicar este comportamiento? >>> bool(\"False\") True >>> 1.4 Cadenas Esta secci\u00f3n presenta formas de trabajar con texto. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador 1.4.1: Representando texto literal Los literales de cadena se escriben en programas con comillas. # Comillas simples a = 'S\u00ed, pero no, pero s\u00ed, pero ...' # Comillas dobles b = \"la computadora dice que no\" # Comillas triples c = ''' M\u00edrame a los ojos, m\u00edrame a los ojos, los ojos, los ojos, los ojos, no alrededor de los ojos, no mires alrededor de los ojos, m\u00edrame a los ojos, est\u00e1s debajo. ''' Normalmente, las cadenas solo pueden abarcar una sola l\u00ednea. Las comillas triples capturan todo el texto incluido en varias l\u00edneas incluido todo el formato. No hay diferencia entre usar simple (') versus doble (\") citas. Sin embargo, se debe utilizar el mismo tipo de cita que se utiliza para iniciar una cadena como para terminarla . 1.4.2: C\u00f3digo de escape de cadenas Los c\u00f3digos de escape se utilizan para representar caracteres de control y caracteres que no se pueden escribir f\u00e1cilmente directamente en el teclado. A continuaci\u00f3n, se muestran algunos c\u00f3digos de escape comunes: '\\n' salto de l\u00ednea '\\r' Retorno de carro '\\t' Pesta\u00f1a '\\'' Literal comilla simple '\\' Literal comillas dobles '\\\\' Barra invertida literal 1.4.3: Representaci\u00f3n de cadenas Cada car\u00e1cter de una cadena se almacena internamente como un denominado \"punto de c\u00f3digo\" Unicode, que es un entero. Puede especificar un valor de punto de c\u00f3digo exacto mediante las siguientes secuencias de escape: a = '\\xf1' # a = '\u00f1' b = '\\u2200' # b = '\u2200' c = '\\U0001D122' # c = '\ud834\udd22' d = '\\N{FOR ALL}' # d = '\u2200' La [Base de datos de caracteres Unicode] (https://unicode.org/charts) es una referencia para todos los c\u00f3digos de caracteres disponibles. 1.4.4: Indexaci\u00f3n de cadenas Las cadenas funcionan como una matriz para acceder a caracteres individuales. Utiliza un \u00edndice entero, comenzando en 0. Los \u00edndices negativos especifican una posici\u00f3n relativa al final de la cadena. a = 'Hello world' b = a[0] # 'H' c = a[4] # 'o' d = a[-1] # 'd' (final de la cadena) Tambi\u00e9n puede dividir o seleccionar subcadenas especificando un rango de \u00edndices con : . d = a[:5] # 'Hello' e = a[6:] # 'world' f = a[3:8] # 'lo wo' g = a[-5:] # 'world' El car\u00e1cter del \u00edndice final no est\u00e1 incluido. Los \u00edndices que faltan asumen el principio o el final de la cadena. 1.4.5: Operaciones de cadena Concatenaci\u00f3n, tama\u00f1o, pertenencia y replicaci\u00f3n. # concatenaci\u00f3n (+) a = 'Hello' + 'World' # 'HelloWorld' b = 'Say ' + a # 'Say HelloWorld' # tama\u00f1o (len) s = 'Hello' len(s) # 5 # prueba de pertenencia (`in`, `not in`) t = 'e' in s # True f = 'x' in s # False g = 'hi' not in s # True # replicaci\u00f3n (s * n) rep = s * 5 # 'HelloHelloHelloHelloHello' 1.4.6: Metodos de cadena Las cadenas tienen m\u00e9todos que realizan varias operaciones con los datos de la cadena. Ejemplo: eliminar cualquier espacio en blanco inicial / final. s = ' Hello ' t = s.strip() # 'Hello' Ejemplo: conversi\u00f3n de casos. s = 'Hello' l = s.lower() # 'hello' u = s.upper() # 'HELLO' Ejemplo: Reemplazo de texto. s = 'Hello world' t = s.replace('Hello' , 'Hallo') # 'Hallo world' Otros metodos de cadena Las cadenas tienen una amplia variedad de otros m\u00e9todos para probar y manipular los datos de texto. Esta es una peque\u00f1a muestra de m\u00e9todos: s.endswith(sufijo) # Compruebe si la cadena termina con sufijo s.find(t) # Primera aparici\u00f3n de t en s s.index(t) # Primera aparici\u00f3n de t en s s.isalpha() # Comprueba si los caracteres son alfab\u00e9ticos s.isdigit() # Comprueba si los caracteres son num\u00e9ricos s.islower() # Comprueba si los caracteres son min\u00fasculas s.isupper() # Comprueba si los caracteres est\u00e1n en may\u00fasculas s.join(slist) # \u00danase a una lista de cadenas usando s como delimitador s.lower() # Convertir a min\u00fasculas s.replace(antiguo, nuevo) # Reemplazar texto s.rfind(t) # Busca t desde el final de la cadena s.rindex(t) # Busca t desde el final de la cadena s.split([delim]) # Dividir cadena en lista de subcadenas s.startswith(prefix) # Compruebe si la cadena comienza con prefijo s.strip() # Franja el espacio inicial / final s.upper() # Convertir a may\u00fasculas 1.4.7: Mutabilidad de cadenas Las cadenas son \"inmutables\" o de solo lectura. Una vez creado, el valor no se puede cambiar. >>> s = 'Hello World' >>> s[1] = 'a' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'str' object does not support item assignment >>> Todas las operaciones y m\u00e9todos que manipulan datos de cadenas, siempre crean cadenas nuevas. 1.4.8: Conversiones de cadena Utilice str () para convertir cualquier valor en una cadena. El resultado es una cadena que sostiene el mismo texto que habr\u00eda sido producido por la declaraci\u00f3n print () . >>> x = 42 >>> str(x) '42' >>> 1.4.9: Cadenas byte Una cadena de bytes de 8 bits, que se encuentra com\u00fanmente con I/O de bajo nivel, se escribe de la siguiente manera: data = b'Hola Mundo\\r\\n' Al poner una b peque\u00f1a antes de la primera cita, especificas que es una cadena de bytes en lugar de una cadena de texto. La mayor\u00eda de las operaciones habituales con cadenas funcionan. len(data) # 13 data[0:5] # b'Hola' data.replace(b'Hello', b'Cruel') # b'Cruel Mundo\\r\\n' La indexaci\u00f3n es un poco diferente porque devuelve valores de bytes como n\u00fameros enteros. data[0] # 72 (ASCII code for 'H') Conversion to/from text strings. text = data.decode('utf-8') # bytes -> texto data = text.encode('utf-8') # texto -> bytes El argumento 'utf-8' especifica una codificaci\u00f3n de caracteres. Otros comunes los valores incluyen 'ascii' y ' latin1' . 1.4.10: Cadenas crudas Las cadenas sin formato son literales de cadena con una barra invertida no interpretada. Se especifican anteponiendo la cita inicial con una \"r\" min\u00fascula. >>> rs = r'c:\\newdata\\test' # Sin formato (barra invertida no interpretada) >>> rs 'c:\\\\newdata\\\\test' La cadena es el texto literal incluido adentro, exactamente como se escribe. Esto es \u00fatil en situaciones en las que la barra invertida tiene significado. Ejemplo: nombre de archivo, expresiones regulares, etc. 1.4.11: Cadenas f Una cadena con sustituci\u00f3n de expresi\u00f3n formateada. >>> nombre = 'IBM' >>> acciones = 100 >>> precio = 91.1 >>> a = f'{nombre:>10s} {acciones:10d} {precio:10.2f}' >>> a ' IBM 100 91.10' >>> b = f'Costo = ${acciones * precio:0.2f}' >>> b 'Costo = $9110.00' >>> Nota: Esto requiere Python 3.6 o m\u00e1s reciente. El significado de los c\u00f3digos de formato se explica m\u00e1s adelante. 1.4.12: Ejercicios En estos ejercicios, experimentar\u00e1 con operaciones en Python tipo de cadena. Debe hacer esto en el indicador interactivo de Python donde puede ver f\u00e1cilmente los resultados. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador Nota IMPORTANTE: En los ejercicios en los que se supone que debe interactuar con el int\u00e9rprete, >>> es el indicador del int\u00e9rprete que obtienes cuando Python quiere que escriba una nueva declaraci\u00f3n. Algunas declaraciones en el per\u00edodo de ejercicios varias l\u00edneas: para que se ejecuten estas declaraciones, es posible que deba presionar 'volver' unas cuantas veces. Solo un recordatorio de que * NO * escribe el >>> al trabajar con estos ejemplos. Empiece por definir una cadena que contenga una serie de s\u00edmbolos de cotizaci\u00f3n burs\u00e1til como este: >>> symbols = 'AAPL,IBM,MSFT,YHOO,SCO' >>> Ejercicio 1.13: Extracci\u00f3n de caracteres individuales y subcadenas Las cadenas son matrices de caracteres. Intente extraer algunos caracteres: >>> symbols[0] ? >>> symbols[1] ? >>> symbols[2] ? >>> symbols[-1] # Ultimo caracter ? >>> symbols[-2] # Indices negativos son desde el final ? >>> En Python, las cadenas son de solo lectura. Verifique esto intentando cambiar el primer car\u00e1cter de symbols a una min\u00fascula 'a'. >>> symbols[0] = 'a' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'str' object does not support item assignment >>> Ejercicio 1.14: Concatenaci\u00f3n de caracteres Although string data is read-only, you can always reassign a variable to a newly created string. Try the following statement which concatenates a new symbol \"GOOG\" to the end of symbols : >>> symbols = symbols + 'GOOG' >>> symbols 'AAPL,IBM,MSFT,YHOO,SCOGOOG' >>> \u00a1Ups! Eso no es lo que quer\u00edas. Corr\u00edjelo para que la variable symbols contenga el valor 'AAPL, IBM, MSFT, YHOO, SCO, GOOG' . >>> symbols = ? >>> symbols 'AAPL,IBM,MSFT,YHOO,SCO,GOOG' >>> Agregue 'HPQ' al frente de la cuerda >>> symbols = ? >>> symbols 'HPQ,AAPL,IBM,MSFT,YHOO,SCO,GOOG' >>> En estos ejemplos, puede parecer que la cadena original est\u00e1 siendo modificado, en una aparente violaci\u00f3n de que las cadenas sean de solo lectura. No entonces. Las operaciones en cadenas crean una cadena completamente nueva cada una hora. Cuando se reasigna el nombre de la variable s\u00edmbolos , apunta al cadena reci\u00e9n creada. Posteriormente, la cuerda vieja se destruye ya que ya no se usa. Ejercicio 1.15: Pruebas de membres\u00eda Experimente con el operador \"in\" para buscar subcadenas. En el mensaje interactivo, pruebe estas operaciones: >>> 'IBM' in symbols ? >>> 'AA' in symbols True >>> 'CAT' in symbols ? >>> \u00bfPor qu\u00e9 la comprobaci\u00f3n de 'AA' devolvi\u00f3 True ? Ejercicio 1.16: M\u00e9todos de cadenas En el indicador interactivo de Python, intente experimentar con algunos de los m\u00e9todos de cadena. >>> symbols.lower() ? >>> symbols ? >>> Recuerde, las cadenas siempre son de solo lectura. Si desea guardar el resultado de una operaci\u00f3n, debe colocarlo en una variable: >>> lowersyms = symbols.lower() >>> Pruebe algunas operaciones m\u00e1s: >>> symbols.find('MSFT') ? >>> symbols[13:17] ? >>> symbols = symbols.replace('SCO','DOA') >>> symbols ? >>> name = ' IBM \\n' >>> name = name.strip() # Remove surrounding whitespace >>> name ? >>> Ejercicio 1.17: f-strings A veces desea crear una cadena e incrustar los valores de variables en \u00e9l. Para hacer eso, use una f-string. Por ejemplo: >>> nombre = 'IBM' >>> acciones = 100 >>> precio = 91.1 >>> f'{acciones} acciones de {nombre} a ${precio:0.2f}' '100 acciones de IBM a $91.10' >>> Modifique el programa de hipoteca Dave mortgage.py del Ejercicio 1.10 para crear su salida usando f-strings. Intente hacer que la salida est\u00e9 bien alineada. Ejercicio 1.18: Expresiones regulares Una limitaci\u00f3n de las operaciones b\u00e1sicas con cadenas es que no admite cualquier tipo de coincidencia de patrones avanzada. Por eso tu Necesito recurrir al m\u00f3dulo re y las expresiones regulares de Python. El manejo de expresiones regulares es un gran tema, pero aqu\u00ed hay un breve ejemplo: >>> text = 'Today is 3/27/2018. Tomorrow is 3/28/2018.' >>> # Find all occurrences of a date >>> import re >>> re.findall(r'\\d+/\\d+/\\d+', text) ['3/27/2018', '3/28/2018'] >>> # Replace all occurrences of a date with replacement text >>> re.sub(r'(\\d+)/(\\d+)/(\\d+)', r'\\3-\\1-\\2', text) 'Today is 2018-3-27. Tomorrow is 2018-3-28.' >>> Para obtener m\u00e1s informaci\u00f3n sobre el m\u00f3dulo re , consulte la documentaci\u00f3n oficial en https://docs.python.org/library/re.html . Algunos comentarios A medida que comienza a experimentar con el int\u00e9rprete, a menudo desea conocer m\u00e1s sobre las operaciones soportadas por diferentes objetos. Por ejemplo, \u00bfc\u00f3mo averigua qu\u00e9 operaciones est\u00e1n disponibles en un cadena? Dependiendo de su entorno de Python, es posible que pueda ver una lista de los m\u00e9todos disponibles mediante el completado con tabulaci\u00f3n. Por ejemplo, intente escribir esta: >>> s = 'hello world' >>> s.<tab key> >>> Si presionar tab no hace nada, puede volver al funci\u00f3n incorporada dir() . Por ejemplo: >>> s = 'hello' >>> dir(s) ['__add__', '__class__', '__contains__', ..., 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'] >>> dir() produce una lista de todas las operaciones que pueden aparecer despu\u00e9s de (.) . Utilice el comando help() para obtener m\u00e1s informaci\u00f3n sobre una operaci\u00f3n espec\u00edfica: >>> help(s.upper) Help on built-in function upper: upper(...) S.upper() -> string Return a copy of the string S converted to uppercase. >>> 1.5 Listas Esta secci\u00f3n presenta listas, el tipo principal de Python para contener una colecci\u00f3n ordenada de valores. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador 1.5.1: Creando una lista Utilice corchetes para definir un literal de lista: nombres = [ 'Elwood', 'Jake', 'Curtis' ] numeros = [39, 38, 42, 65, 111] En ocasiones las listas son creadas por otros metodos. Por ejemplo, una cadena puede ser dividida haciendo uso del m\u00e9todo split() . >>> linea = 'GOOG,100,490.10' >>> fila = line.split(',') >>> fila ['GOOG', '100', '490.10'] >>> 1.5.2: Operaciones de lista Las listas pueden contener elementos de cualquier tipo. Agregue un nuevo elemento usando append() : nombres.append('Murphy') # Agrega al final nombres.insert(2, 'Aretha') # Inserta en el medio Use + para concatenar listas: s = [1, 2, 3] t = ['a', 'b'] s + t # [1, 2, 3, 'a', 'b'] Las listas est\u00e1n indexadas por n\u00fameros enteros. A partir de 0. nombres = [ 'Elwood', 'Jake', 'Curtis' ] nombres[0] # 'Elwood' nombres[1] # 'Jake' nombres[2] # 'Curtis' Los \u00edndices negativos cuentan desde el final. nombres[-1] # 'Curtis' Puede cambiar cualquier elemento de una lista. nombres[1] = 'Joliet Jake' nombres # [ 'Elwood', 'Joliet Jake', 'Curtis' ] Length of the list. nombres = ['Elwood','Jake','Curtis'] len(nombres) # 3 Prueba de pertenencia ( in , not in ) 'Elwood' in nombres # True 'Britney' not in nombres # True Replicaci\u00f3n ( s * n ). s = [1, 2, 3] s * 3 # [1, 2, 3, 1, 2, 3, 1, 2, 3] 1.5.3: Iteracion de lista y b\u00fasqueda Utilice for para iterar sobre el contenido de la lista. for nombre in nombres: # use nombre # e.g. print(nombre) ... Esto es similar a una declaraci\u00f3n foreach de otros lenguajes de programaci\u00f3n. Para encontrar la posici\u00f3n de algo r\u00e1pidamente, use index() . nombres = ['Elwood','Jake','Curtis'] nombres.index('Curtis') # 2 Si el elemento est\u00e1 presente m\u00e1s de una vez, index() devolver\u00e1 el \u00edndice de la primera aparici\u00f3n. Si el elemento no se encuentra, generar\u00e1 una excepci\u00f3n \"ValueError\". 1.5.4: Remoci\u00f3n en lista Puede eliminar elementos por valor de elemento o por \u00edndice: # Using the value nombres.remove('Curtis') # Using the index del nombres[1] Eliminar un art\u00edculo no crea un agujero. Otros elementos se mover\u00e1n hacia abajo para llenar el espacio desocupado. Si hay m\u00e1s de una aparici\u00f3n del elemento, remove() eliminar\u00e1 solo la primera aparici\u00f3n. 1.5.5: Ordenar una lista Las listas se pueden ordenar \"in situ\". s = [10, 1, 7, 3] s.sort() # [1, 3, 7, 10] # Reverse order s = [10, 1, 7, 3] s.sort(reverse=True) # [10, 7, 3, 1] # It works with any ordered data s = ['foo', 'bar', 'spam'] s.sort() # ['bar', 'foo', 'spam'] Utilice sorted() si desea crear una nueva lista en su lugar: t = sorted(s) # s sin cambios, t tiene los valores ordenados 1.5.6: Listas y matem\u00e1ticas Caution: Lists were not designed for math operations. >>> nombres = [1, 2, 3, 4, 5] >>> nombres * 2 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5] >>> nombres + [10, 11, 12, 13, 14] [1, 2, 3, 4, 5, 10, 11, 12, 13, 14] Espec\u00edficamente, las listas no representan vectores/matrices como en MATLAB, Octave, R, etc. Sin embargo, existen algunos m\u00f3dulos/paquetes/librer\u00edas que le ayudan con eso (e.g. numpy ) 1.5.7: Ejercicios En este ejercicio, experimentaremos con listas. En la ultima secci\u00f3n trabajamos con cadenas conteniendo s\u00edmbolos de acciones de bolsa valores. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador >>> symbols = 'HPQ,AAPL,IBM,MSFT,YHOO,DOA,GOOG' Divida la cadena en una lista de nombres haciendo uso de la operacion split() de cadenas: >>> symlist = symbols.split(',') Ejercicio 1.19: Extracci\u00f3n y reasignaci\u00f3n de elementos Pruebe algunas busquedas: >>> symlist[0] 'HPQ' >>> symlist[1] 'AAPL' >>> symlist[-1] 'GOOG' >>> symlist[-2] 'DOA' >>> Intente reasignar un valor: >>> symlist[2] = 'AIG' >>> symlist ['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'DOA', 'GOOG'] >>> Agarre unos pedazos: >>> symlist[0:3] ['HPQ', 'AAPL', 'AIG'] >>> symlist[-2:] ['DOA', 'GOOG'] Crea una lista vac\u00eda y agregue un elemento. >>> mysyms = [] >>> mysyms.append('GOOG') >>> mysyms ['GOOG'] Puede reasignar una porci\u00f3n de la lista a otra lista. Por ejemplo: >>> symlist[-2:] = mysyms >>> symlist ['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG'] >>> Cuando hace esto, la lista en el lado izquierdo ( symlist ) ser\u00e1 reajustada apropiadamente para que el lado derecho ( mysyms ) ocupe un puesto en ella. Ejercicio 1.20: Ciclando sobre una lista El ciclo/bucle for funciona ciclando sobre data en una secuencia la lista. Pruebe lo siguiente: >>> for s in symlist: ... print('s =', s) Ejercicio 1.21: Pruebas de pertenencia Utilice el operador in o not in para comprobar si 'AIG' , 'AA' y 'CAT' est\u00e1n en la lista de s\u00edmbolos. >>> # Est\u00e1 'AIG' en `symlist`? True >>> # Est\u00e1 'AA' en `symlist`? False >>> # 'CAT' no esta en `symlist`? True >>> Ejercicio 1.22: A\u00f1adiendo, insertando y borrando elementos Utilice el m\u00e9todo append() para agregar el s\u00edmbolo 'RHT' al final de symlist . >>> # agregue 'RHT' >>> symlist ['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG', 'RHT'] >>> Utilice el m\u00e9todo insert() para insertar el s\u00edmbolo 'AA' como el segundo elemento de la lista. >>> # Agregue 'AA' como segundo item en la lista >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG', 'RHT'] >>> Utilice el m\u00e9todo remove() para eliminar 'MSFT' de la lista. >>> # Remueva 'MSFT' >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'YHOO', 'GOOG', 'RHT'] >>> A\u00f1ada una entrada duplicada para ` YHOO' al final de la lista. Nota: est\u00e1 perfectamente bien si una lista tenga valores duplicados. >>> # Append 'YHOO' >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'YHOO', 'GOOG', 'RHT', 'YHOO'] >>> Utilice el m\u00e9todo index() para encontrar la primera posici\u00f3n de 'YHOO' en la lista. >>> # Encuentre el primer \u00edndice de 'YHOO' 4 >>> symlist[4] 'YHOO' >>> Cuente cu\u00e1ntas veces 'YHOO' est\u00e1 en la lista: >>> symlist.count('YHOO') 2 >>> Remueva la primera ocurrencia de 'YHOO' . >>> # Remueva primera ocurrencia de 'YHOO' >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'GOOG', 'RHT', 'YHOO'] >>> Para su informaci\u00f3n, no existe ning\u00fan m\u00e9todo para buscar o eliminar todas las apariciones de un elemento Sin embargo, veremos una forma elegante de hacer esto en la secci\u00f3n 2. Ejercicio 1.23: Ordernando \u00bfQuieres ordenar una lista? Utilice el m\u00e9todo sort() . Pru\u00e9balo: >>> symlist.sort() >>> symlist ['AA', 'AAPL', 'AIG', 'GOOG', 'HPQ', 'RHT', 'YHOO'] >>> \u00bfQuiere ordenar al rev\u00e9s? Prueba esto: >>> symlist.sort(reverse=True) >>> symlist ['YHOO', 'RHT', 'HPQ', 'GOOG', 'AIG', 'AAPL', 'AA'] >>> Nota: ordenar una lista modifica su contenido \"en el lugar\". Es decir, los elementos de la lista se mezclan, pero no se crea una nueva lista como resultado. Ejercicio 1.24: Ajuntando todo nuevamente \u00bfQuiere tomar una lista de cadenas y unirlas en una sola cadena? Utilice el m\u00e9todo join () de cadenas como esta (nota: esto se ve gracioso al principio). >>> a = ','.join(symlist) >>> a 'YHOO,RHT,HPQ,GOOG,AIG,AAPL,AA' >>> b = ':'.join(symlist) >>> b 'YHOO:RHT:HPQ:GOOG:AIG:AAPL:AA' >>> c = ''.join(symlist) >>> c 'YHOORHTHPQGOOGAIGAAPLAA' >>> Ejercicio 1.25: Listas de cualquier cosa Las listas pueden contener cualquier tipo de objeto, incluidas otras listas (por ejemplo, listas anidadas). Probar esto: >>> nums = [101, 102, 103] >>> items = ['spam', symlist, nums] >>> items ['spam', ['YHOO', 'RHT', 'HPQ', 'GOOG', 'AIG', 'AAPL', 'AA'], [101, 102, 103]] Preste mucha atenci\u00f3n a la salida anterior. items es una lista con tres elementos. El primer elemento es una cadena, pero los otros dos elementos son listas. Puede acceder a los elementos de las listas anidadas mediante varias operaciones de indexaci\u00f3n. >>> items[0] 'spam' >>> items[0][0] 's' >>> items[1] ['YHOO', 'RHT', 'HPQ', 'GOOG', 'AIG', 'AAPL', 'AA'] >>> items[1][1] 'RHT' >>> items[1][1][2] 'T' >>> items[2] [101, 102, 103] >>> items[2][1] 102 >>> Aunque t\u00e9cnicamente es posible hacer estructuras muy complicadas compuestas por listas, como regla general, es preferible mantener las cosas simples. Por lo general, las listas contienen elementos que tienen el mismo tipo de valor. Por ejemplo, una lista que consta completamente de n\u00fameros o una lista de texto de cadena. Mezclar diferentes tipos de datos en la misma lista es a menudo un buen dolor de cabeza, por lo que es mejor evitarlo. 1.6 Archivos La mayor\u00eda de los programas necesitan leer la entrada de alg\u00fan lugar. Esta secci\u00f3n discute sobre el acceso a archivos. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador 1.6.1: Entrada y Salida de un Archivo Abre un archivo. f = open('foo.txt', 'rt') # Open for reading (text) g = open('bar.txt', 'wt') # Open for writing (text) Lee toda la data. data = f.read() data = f.read([maxbytes]) # Read only up to 'maxbytes' bytes Escribe algo de texto. g.write('some text') Cierra cuando terminas. f.close() g.close() Files should be properly closed and it's an easy step to forget. Thus, the preferred approach is to use the with statement like this. with open(filename, 'rt') as file: # Haz uso del archivo \"file\" ... # No hay necesidad de cerrar expl\u00edcitamente ...statements Esto cierra autom\u00e1ticamente el archivo cuando el control abandona el bloque de c\u00f3digo con sangr\u00eda. 1.6.2: Patrones comunes de lectura de archivos Leer un archivo completo de una vez como una cadena. with open('foo.txt', 'rt') as file: data = file.read() # `data` is a string with all the text in `foo.txt` Leer un archivo l\u00ednea por l\u00ednea iterando. with open(filename, 'rt') as file: for line in file: # Process the line 1.6.3: Patrones comunes de escritura de archivos Escribe data en cadena. with open('outfile', 'wt') as out: out.write('Hello World\\n') ... Redireccionando la funci\u00f3n de impresi\u00f3n. with open('outfile', 'wt') as out: print('Hola Mundo', file=out) ... 1.6.4: Ejercicios Estos ejercicios dependen de un archivo Data/portfolio.csv . El archivo contiene una lista de l\u00edneas con informaci\u00f3n sobre una cartera de acciones. Se supone que est\u00e1 trabajando en el archivo ./Work/ directorio. Si no est\u00e1 seguro, puede averiguar d\u00f3nde Python se est\u00e1 ejecutando haciendo esto: Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador >>> import os >>> os.getcwd() '/Users/beazley/Desktop/practical-python/Work' # Su salida ser\u00e1 diferente >>> 1.26: Prerequisitos Primero, intente leer todo el archivo a la vez en una cadena grande: >>> with open('Data/portfolio.csv', 'rt') as f: data = f.read() >>> data 'name,shares,price\\n\"AA\",100,32.20\\n\"IBM\",50,91.10\\n\"CAT\",150,83.44\\n\"MSFT\",200,51.23\\n\"GE\",95,40.37\\n\"MSFT\",50,65.10\\n\"IBM\",100,70.44\\n' >>> print(data) name,shares,price \"AA\",100,32.20 \"IBM\",50,91.10 \"CAT\",150,83.44 \"MSFT\",200,51.23 \"GE\",95,40.37 \"MSFT\",50,65.10 \"IBM\",100,70.44 >>> En el ejemplo anterior, cabe se\u00f1alar que Python tiene dos modos de salida. En el primer modo, donde aparece \">>> data\" en el indicador, Python muestra la representaci\u00f3n de la cadena sin procesar, incluidas las comillas y c\u00f3digos de escape. Cuando escribe print(data) , obtiene el formato real de salida de la cadena. Para leer un archivo l\u00ednea por l\u00ednea, use un bucle for como \u00e9ste: >>> with open('Data/portfolio.csv', 'rt') as f: for line in f: print(line, end='') name,shares,price \"AA\",100,32.20 \"IBM\",50,91.10 ... >>> En determinadas ocasiones, es posible que desee leer u omitir manualmente una \u00fanica l\u00ednea de texto (por ejemplo, tal vez desee omitir la primera l\u00ednea de los encabezados de columna). >>> f = open('Data/portfolio.csv', 'rt') >>> headers = next(f) >>> headers 'name,shares,price\\n' >>> for line in f: print(line, end='') \"AA\",100,32.20 \"IBM\",50,91.10 ... >>> f.close() >>> next() devuelve la siguiente l\u00ednea de texto en el archivo. Si lo llamara repetidamente, obtendr\u00eda l\u00edneas sucesivas. Sin embargo, para que lo sepa, el ciclo for hace uso de next() para obtener sus datos. Por lo tanto, normalmente no lo llamar\u00eda directamente a menos que est\u00e9 tratando de omitir o leer expl\u00edcitamente una sola l\u00ednea como se muestra. Una vez que est\u00e9 leyendo las l\u00edneas de un archivo, puede comenzar a realizar m\u00e1s procesamiento, como dividir. Por ejemplo, intente esto: >>> f = open('Data/portfolio.csv', 'rt') >>> headers = next(f).split(',') >>> headers ['name', 'shares', 'price\\n'] >>> for line in f: row = line.split(',') print(row) ['\"AA\"', '100', '32.20\\n'] ['\"IBM\"', '50', '91.10\\n'] ... >>> f.close() Nota: En estos ejemplos, f.close() se llama expl\u00edcitamente porque no se utiliza la instrucci\u00f3n with . Ejercicio 1.27: Leyendo de un archivo Ahora que sabe c\u00f3mo leer un archivo, escribamos un programa para realizar un c\u00e1lculo. Las columnas de portfolio.csv corresponden al nombre de la acci\u00f3n, n\u00famero de acciones, y precio de compra de una sola participaci\u00f3n accionaria. Escribe un programa llamado pcost.py que abre este archivo, lee todas las l\u00edneas y calcula cu\u00e1nto cost\u00f3 comprar todas las acciones en la cartera (portfolio). Sugerencia: para convertir una cadena en un entero, use int(s) . Para convertir una cadena en punto flotante, use float(s) . Su programa deber\u00eda imprimir un resultado como el siguiente: Costo total 44671.15 Ejercicio 1.28: Otro tipo de \"archivos\" \u00bfY si quisiera leer un archivo que no es de texto, como un archivo comprimido gzip? La funci\u00f3n integrada open() no le ayudar\u00e1 aqu\u00ed, pero Python tiene un m\u00f3dulo gzip que puede leer archivos comprimidos gzip. >>> import gzip >>> with gzip.open('Data/portfolio.csv.gz', 'rt') as f: for line in f: print(line, end='') ... mira la salida ... >>> Nota: Incluir el modo de archivo de 'rt' es fundamental aqu\u00ed. Si olvidas eso obtendr\u00e1 cadenas de bytes en lugar de cadenas de texto normales. Algunos comentarios Los cient\u00edficos de datos se apresuran a se\u00f1alar que librerias como Pandas ya tienen una funci\u00f3n para leer archivos CSV. Esto es cierto y funciona bastante bien. Sin embargo, este no es un curso sobre c\u00f3mo aprender pandas. Leer archivos es un problema m\u00e1s general que las espec\u00edficaciones de archivos CSV. La raz\u00f3n principal por la que trabajamos con un archivo CSV es porque es un formato conocido para la mayor\u00eda de los programadores y es relativamente f\u00e1cil trabajarlo directamente - ilustrando muchas caracter\u00edsticas de Python en el proceso. Entonces, por supuesto, use Pandas cuando regrese al trabajo. Para el resto de este curso, sin embargo, vamos a seguir con la funcionalidad est\u00e1ndar de Python. 1.7 Funciones A medida que sus programas comiencen a crecer, va a querer organizarse. Esta secci\u00f3n presenta brevemente las funciones y los m\u00f3dulos de la biblioteca est\u00e1ndar. Tambi\u00e9n se introduce el manejo de errores con excepciones. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador 1.7.1: Funciones personalizadas Utilice funciones para el c\u00f3digo que desea reutilizar. Aqu\u00ed hay una definici\u00f3n de funci\u00f3n: def sumcount(n): ''' Retorna la suma de los primeros n enteros ''' total = 0 while n > 0: total += n n -= 1 return total Para llamar una funci\u00f3n. a = sumcount(100) Una funci\u00f3n es una serie de declaraciones que realizan alguna tarea y devuelven un resultado. La palabra clave return es necesaria para especificar expl\u00edcitamente el valor de retorno de la funci\u00f3n. 1.7.2: Funciones de biblioteca Python viene con una gran biblioteca est\u00e1ndar. Se accede a los m\u00f3dulos de la biblioteca usando import . Por ejemplo: import math x = math.sqrt(10) import urllib.request u = urllib.request.urlopen('http://www.python.org/') data = u.read() Cubriremos bibliotecas y m\u00f3dulos con m\u00e1s detalle m\u00e1s adelante. 1.7.3: Errores y excepciones Las funciones informan sobre errores como las excepciones. Una excepci\u00f3n provoca la interrupci\u00f3n de una funci\u00f3n y puede hacer que todo el programa se detenga si no se maneja. Prueba esto en tu REPL (read/lee, evaluate/evalua, print/imprime, cicla/loop) de Python. >>> int('N/A') Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ValueError: invalid literal for int() with base 10: 'N/A' >>> Para fines de depuraci\u00f3n, el mensaje describe lo que sucedi\u00f3, d\u00f3nde ocurri\u00f3 el error, y un rastreo que muestra las otras llamadas a funciones que provocaron la falla. 1.7.4: Atrapando y gestionando excepciones Las excepciones de pueden atrapar y gestionar. Para atrapar, use la declaraci\u00f3n try - except . for linea in f: campos = linea.split() try: acciones = int(campos[1]) except ValueError: print(\"No se pudo analizar\", linea) ... El nombre \"ValueError\" debe coincidir con el tipo de error que est\u00e1 intentando detectar. A menudo es dif\u00edcil saber exactamente qu\u00e9 tipo de errores pueden ocurrir de antemano dependiendo de la operaci\u00f3n que se est\u00e9 realizando. Para mejor o para peor, el manejo de excepciones a menudo se agrega despu\u00e9s de que un programa fall\u00f3 inesperadamente (es decir, \"oh, nos olvidamos de detectar ese error, deber\u00eda gestionar eso! \"). 1.7.5: Generando excepciones Para generar una excepci\u00f3n, use la instrucci\u00f3n raise . raise RuntimeError('Que desorden') Esto har\u00e1 que el programa se anule con un rastreo de excepci\u00f3n. A menos que sea atrapado por un bloque \"try-except\". $ python3 foo.py Traceback (most recent call last): File \"foo.py\", line 21, in <module> raise RuntimeError(\"Que desorden\") RuntimeError: What a kerfuffle 1.7.6: Ejercicios Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador Ejercicio 1.29: Definiendo una funci\u00f3n Intente definir una funci\u00f3n simple: >>> def saludo(nombre): 'Genera un saludo' print('Hola', nombre) >>> greeting('Guido') Hola Guido >>> greeting('Paula') Hola Paula >>> Si la primera declaraci\u00f3n de una funci\u00f3n es una cadena, sirve como documentaci\u00f3n. Intente escribir un comando como help(saludo) para que se muestre. Ejercicio 1.30: Convirtiendo una secuencia de comandos en una funci\u00f3n Tome el c\u00f3digo que escribi\u00f3 para el programa pcost.py en [Ejercicio 1.27] (06_Files.md) y convi\u00e9rtalo en una funci\u00f3n cartera_costo(nombre_de_archivo) . La funci\u00f3n toma un nombre de archivo como entrada, lee los datos de la cartera en ese archivo y devuelve el costo total de la cartera como flotante. Para usar su funci\u00f3n, cambie su programa para que se vea algo as\u00ed: def cartera_costo(nombre_de_archivo): ... # Su c\u00f3digo aqu\u00ed ... costo = cartera_costo('Data/portfolio.csv') print('Total cost:', costo) Cuando ejecute su programa, deber\u00eda ver el mismo resultado que antes. Despu\u00e9s de ejecutar su programa, tambi\u00e9n puede llamar a su funci\u00f3n interactivamente escribiendo esto: $ python3 -i pcost.py Esto le permitir\u00e1 llamar a su funci\u00f3n desde el modo interactivo. >>> cartera_costo('Data/portfolio.csv') 44671.15 >>> Being able to experiment with your code interactively is useful for testing and debugging. Ejercicio 1.31: Administraci\u00f3n de errores \u00bfQu\u00e9 sucede si prueba su funci\u00f3n en un archivo al que le faltan algunos campos? >>> cartera_costo('Data/missing.csv') Traceback (most recent call last): File \"<stdin>\", line 1, in <module> File \"pcost.py\", line 11, in cartera_costo nshares = int(fields[1]) ValueError: invalid literal for int() with base 10: '' >>> En este momento, tiene que tomar una decisi\u00f3n. Para que el programa funcione puede depurar el archivo de entrada eliminando las l\u00edneas o puede modificar su c\u00f3digo para manejar las l\u00edneas defectuosas de alguna forma. Modifique el programa pcost.py para detectar la excepci\u00f3n, imprima una advertencia mensaje y contin\u00fae procesando el resto del archivo. Ejercicio 1.32: Usando una funci\u00f3n de biblioteca local Python viene con una biblioteca est\u00e1ndar de funciones \u00fatiles. Una biblioteca que podr\u00eda ser \u00fatil aqu\u00ed es el m\u00f3dulo csv . Debe usarlo siempre que tenga que trabajar con archivos de datos CSV. A continuaci\u00f3n, se muestra un ejemplo de c\u00f3mo funciona: >>> import csv >>> f = open('Data/portfolio.csv') >>> rows = csv.reader(f) >>> headers = next(rows) >>> headers ['name', 'shares', 'price'] >>> for row in rows: print(row) ['AA', '100', '32.20'] ['IBM', '50', '91.10'] ['CAT', '150', '83.44'] ['MSFT', '200', '51.23'] ['GE', '95', '40.37'] ['MSFT', '50', '65.10'] ['IBM', '100', '70.44'] >>> f.close() >>> Una cosa buena sobre el m\u00f3dulo csv es que se ocupa de una variedad de detalles de bajo nivel como las comillas y la divisi\u00f3n adecuada por comas. En la salida anterior, notar\u00e1 que ha eliminado las comillas dobles lejos de los nombres en la primera columna. Modifique su programa pcost.py para que use el m\u00f3dulo csv para analizar e intentar ejecutar ejemplos anteriores. Ejercicio 1.33: Leyendo desde la l\u00ednea de comando En el programa pcost.py , el nombre del archivo de entrada se ha integrado en el c\u00f3digo: # pcost.py def cartera_costo(filename): ... # Su c\u00f3digo aqu\u00ed ... costo = cartera_costo('Data/portfolio.csv') print('Total costo:', costo) Est\u00e1 bien para aprender y probar, pero en un programa real probablemente no har\u00eda eso. En su lugar, pudiera pasar el nombre del archivo como argumento a un archivo con una secuencia de comandos. Intente cambiar la parte inferior del programa de la siguiente manera: # pcost.py import sys def cartera_costo(filename): ... # Su c\u00f3digo aqu\u00ed ... if len(sys.argv) == 2: filename = sys.argv[1] else: filename = 'Data/portfolio.csv' costo = cartera_costo(filename) print('Total costo:', costo) sys.argv es una lista que contiene argumentos pasados en la l\u00ednea de comando (si los hay). Para ejecutar su programa, deber\u00e1 ejecutar Python desde la terminal. Por ejemplo, desde bash en Unix: bash % python3 pcost.py Data/portfolio.csv Total cost: 44671.15 bash %","title":"1 Intro a Python"},{"location":"1/#1-intro-a-python","text":"","title":"1. Intro a Python"},{"location":"1/#11-introduciendo-python","text":"El objetivo de este cap\u00edtulo es introducir las bases de Python. Iniciaremos desde cero y aprenderemos a editar, ejecutar, y depurar programas. Adem\u00e1s, escribiremos una secuencia de comandos que lee data en un archivo CSV y ejecuta un c\u00e1lculo.","title":"1.1 Introduciendo Python"},{"location":"1/#111-que-es-python","text":"Python es un lenguaje interpretado de programaci\u00f3n de alto nivel. A menudo se le clasifica como un lenguaje de secuencias de comandos y tambi\u00e9n se le considera similar a lenguajes como Perl, Tcl o Ruby. La sintaxis de Python est\u00e1 vagamente inspirada en elementos de la programaci\u00f3n C. Python fue creado por Guido van Rossum alrededor de 1990, quien lo nombr\u00f3 en honor a la comedia de origen brit\u00e1nico Monty Python .","title":"1.1.1: Qu\u00e9 es Python?"},{"location":"1/#112-donde-consigo-python","text":"Puedes obtener una versi\u00f3n de Python en Python.org . Para los prop\u00f3sitos de este curso, solo necesitas una instalaci\u00f3n b\u00e1sica. Recomiendo instalar Python 3.6 o una versi\u00f3n m\u00e1s reciente. Python 3.6 es el que se usa en las notas y en las soluciones, sin embargo puedes utilizar cualquier versi\u00f3n.","title":"1.1.2: Donde consigo Python?"},{"location":"1/#113-porque-fue-creado","text":"En palabras del creador de Python: Mi motivaci\u00f3n original para crear Python fue la necesidad percibida de un lenguaje de alto nivel en el proyecto Amoeba [Sistemas Operativos]. Me di cuenta de que el desarrollo de las utilidades de administraci\u00f3n del sistema en C estaban tardando demasiado. Adem\u00e1s, hacer estas cosas en el shell Bourne no iba a funcionar por una variedad de razones. ... Entonces, era necesario un lenguaje que cerrara la brecha entre C y el shell. Guido van Rossum","title":"1.1.3: Porqu\u00e9 fue creado?"},{"location":"1/#114-donde-esta-python-en-mi-maquina","text":"Aunque hay muchos entornos en los que puede ejecutar Python, Python normalmente se instala en su m\u00e1quina como un programa que se ejecuta desde la terminal o el shell de comandos. Desde la terminal, deber\u00eda poder escribir python as\u00ed: $ python Python 3.8.1 (default, Feb 20 2020, 09:29:22) [Clang 10.0.0 (clang-1000.10.44.4)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> print(\"hello world\") hello world >>> Aunque hay muchos entornos en donde puede programar en Python, ser\u00e1 un programador m\u00e1s fuerte si puede ejecutar, depurar e interactuar con Python en la terminal. Este es el entorno nativo de Python. Si puede usar Python aqu\u00ed, podr\u00e1 usarlo en cualquier otro lugar.","title":"1.1.4: D\u00f3nde est\u00e1 Python en mi Maquina?"},{"location":"1/#115-ejercicios","text":"Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador","title":"1.1.5: Ejercicios"},{"location":"1/#ejercicio-11-utilizando-python-como-calculadora","text":"En su m\u00e1quina, inicie Python y util\u00edcelo como calculador para resolver el siguiente problema. El suertudo de Juan compr\u00f3 75 acciones de Google a un precio de $235.14 USD por acci\u00f3n. Hoy, las acciones de Google tienen un precio de $711.25 USD. Usando el modo interactivo de Python como una calculadora, averig\u00fce cu\u00e1ntas ganancias obtendr\u00eda Juan si vendiera todas sus acciones. >>> (711.25 - 235.14) * 75 35708.25 >>> Consejo profesional: use la variable de subrayado (_) para usar el resultado del \u00faltimo c\u00e1lculo. Por ejemplo, \u00bfcu\u00e1ntas ganancias obtiene Juan despu\u00e9s de que su malvado corredor se lleva su parte del 20%? >>> _ * 0.80 28566.600000000002 >>>","title":"Ejercicio 1.1: Utilizando Python como Calculadora"},{"location":"1/#ejercicio-12-consiguiendo-ayuda","text":"Utilice el comando help() para obtener ayuda sobre la funci\u00f3n abs (). Luego use help() para obtener ayuda sobre la funci\u00f3n round (). Escriba help() solo sin valor para ingresar al visor de ayuda interactiva. Una advertencia con help() es que no funciona para declaraciones b\u00e1sicas de Python como for, if, while, etc. (es decir, si escribe help (for) obtendr\u00e1 un error de sintaxis). En su lugar, puede intentar poner el tema de la ayuda entre comillas, como ayuda (\"para\"). Si eso no funciona, tendr\u00e1 que recurrir a una b\u00fasqueda en Internet. Seguimiento: vaya a http://docs.python.org y busque la documentaci\u00f3n de la funci\u00f3n abs() (pista: se encuentra en la referencia de la biblioteca relacionada con las funciones integradas).","title":"Ejercicio 1.2: Consiguiendo ayuda"},{"location":"1/#ejercicio-13-copiar-y-pegar","text":"Este curso est\u00e1 estructurado como una serie de p\u00e1ginas en las que se le anima a probar ejemplos interactivos de c\u00f3digo Python escribi\u00e9ndolos a mano. Si est\u00e1 aprendiendo Python por primera vez, se recomienda este \"enfoque lento\". Obtendr\u00e1 una mejor idea del idioma al reducir la velocidad, escribir cosas y pensar en lo que est\u00e1 haciendo. Si debe \"cortar y pegar\" ejemplos de c\u00f3digo, seleccione el c\u00f3digo comenzando despu\u00e9s del indicador >>> y subiendo hasta, pero no m\u00e1s all\u00e1 de la primera l\u00ednea en blanco o el siguiente mensaje >>> (lo que aparezca primero). Seleccione \"copiar\" en el navegador, vaya a la ventana de Python y seleccione \"pegar\" para copiarlo en el shell de Python. Para que el c\u00f3digo se ejecute, es posible que deba presionar \"Retorno\" una vez despu\u00e9s de haberlo pegado. Corte y pegue las siguientes declaraciones de Python: >>> 12 + 20 32 >>> (3 + 4 + 5 + 6) 18 >>> for i in range(5): print(i) 0 1 2 3 4 >>> Advertencia: No es posible pegar m\u00e1s de un comando de Python (declaraciones que aparecen despu\u00e9s de >>> ) en el shell b\u00e1sico de Python a la vez. Tienes que pegar cada comando de uno en uno. Ahora que ha hecho esto, recuerde que sacar\u00e1 m\u00e1s provecho de la clase escribiendo el c\u00f3digo lentamente y pensando en ello, no cortando y pegando.","title":"Ejercicio 1.3: Copiar y pegar"},{"location":"1/#ejercicio-14-donde-esta-mi-bus","text":"Pruebe algo m\u00e1s avanzado y escriba estas declaraciones para averiguar cu\u00e1nto tiempo tendr\u00e1n que esperar las personas que esperan en la esquina de la calle Clark y Balmoral en Chicago al pr\u00f3ximo autob\u00fas CTA n. \u00b0 22 en direcci\u00f3n norte: >>> import urllib.request >>> u = urllib.request.urlopen('http://ctabustracker.com/bustime/map/getStopPredictions.jsp?stop=14791&route=22') >>> from xml.etree.ElementTree import parse >>> doc = parse(u) >>> for pt in doc.findall('.//pt'): print(pt.text) 6 MIN 18 MIN 28 MIN >>> S\u00ed, acaba de descargar una p\u00e1gina web, analizar un documento XML y extraer informaci\u00f3n \u00fatil en aproximadamente 6 l\u00edneas de c\u00f3digo. Los datos a los que accedi\u00f3 en realidad alimentan el sitio web http://ctabustracker.com/bustime/home.jsp. Int\u00e9ntelo nuevamente y observe c\u00f3mo cambian las predicciones. Si falla la primera declaraci\u00f3n de importaci\u00f3n import urllib.request , probablemente est\u00e9 usando Python 2. Para este curso, debe asegurarse de que est\u00e1 usando Python 3.6 o m\u00e1s reciente. Vaya a https://www.python.org para descargarlo si lo necesita. Si su entorno de trabajo requiere el uso de un servidor proxy HTTP, es posible que deba configurar la variable de entorno HTTP_PROXY para que esta parte del ejercicio funcione. Por ejemplo: >>> import os >>> os.environ['HTTP_PROXY'] = 'http://suproxy.server.com' >>> Si no puede hacer que esto funcione, no se preocupe. El resto de este curso no tiene nada que ver con analizar XML.","title":"Ejercicio 1.4: Donde esta mi bus?"},{"location":"1/#12-un-primer-programa","text":"Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador","title":"1.2 Un primer programa"},{"location":"1/#121-ejecutando-python","text":"Los programas de Python siempre se ejecutan dentro de un int\u00e9rprete. El int\u00e9rprete es una aplicaci\u00f3n \"basada en consola\" que normalmente se ejecuta desde un shell de comandos. python3 Python 3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04) [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Los programadores expertos generalmente no tienen problemas para usar el int\u00e9rprete de esta manera, pero no es tan f\u00e1cil de usar para los principiantes. Es posible que est\u00e9 utilizando un entorno que proporciona una interfaz diferente a Python. Eso est\u00e1 bien, pero aprender a ejecutar la terminal de Python sigue siendo una habilidad \u00fatil.","title":"1.2.1: Ejecutando Python"},{"location":"1/#122-modo-interactivo","text":"Cuando inicias Python, obtienes un modo interactivo donde puedes experimentar. Si comienza a escribir declaraciones, se ejecutar\u00e1n de inmediato. No hay ciclo de edici\u00f3n / compilaci\u00f3n / ejecuci\u00f3n / depuraci\u00f3n. >>> print('hello world') hello world >>> 37*42 1554 >>> for i in range(5): ... print(i) ... 0 1 2 3 4 >>> Este llamado ciclo de lectura-evaluaci\u00f3n-impresi\u00f3n (o REPL, por sus siglas en ingl\u00e9s) es muy \u00fatil para depurar y explorar. DETENTE : si no puedes descubrir c\u00f3mo interactuar con Python, detengase y descubra c\u00f3mo hacerlo. Si est\u00e1 utilizando un IDE, es posible que est\u00e9 oculto detr\u00e1s de una opci\u00f3n de men\u00fa u otra ventana. Muchas partes de este curso asumen que puede interactuar con el int\u00e9rprete. Let's take a closer look at the elements of the REPL: >>> es el indicador del int\u00e9rprete para iniciar una nueva declaraci\u00f3n. ... es la indicaci\u00f3n del int\u00e9rprete para continuar una declaraci\u00f3n. Ingrese una l\u00ednea en blanco para terminar de escribir y ejecutar lo que ingres\u00f3. El mensaje ... puede aparecer o no seg\u00fan el entorno. Para este curso, se muestra como espacios en blanco para que sea m\u00e1s f\u00e1cil cortar / pegar muestras de c\u00f3digo. El gui\u00f3n bajo _ contiene el \u00faltimo resultado. >>> 37 * 42 1554 >>> _ * 2 3108 >>> _ + 50 3158 >>> Esto solo es cierto en el modo interactivo. Nunca uses _ en un programa.","title":"1.2.2: Modo interactivo"},{"location":"1/#123-creando-programas","text":"Los programas se colocan en archivos .py. # hola.py print('hola mundo') Puede crear estos archivos con su editor de texto favorito.","title":"1.2.3: Creando programas"},{"location":"1/#124-ejecutando-programas","text":"Para ejecutar un programa, ejec\u00fatelo en la terminal con el comando python. Por ejemplo, en la l\u00ednea de comandos Unix: $ python hola.py hola mundo $ O desde el shell de Windows: C:\\AlgunDirectorio>hola.py hello world C:\\AlgunDirectorio>c:\\python36\\python hola.py hello world Nota: en Windows, es posible que deba especificar una ruta completa al int\u00e9rprete de Python, como c:\\python36\\python . Sin embargo, si Python se instala de la forma habitual, es posible que pueda simplemente escribir el nombre del programa, como hola.py.","title":"1.2.4: Ejecutando programas"},{"location":"1/#125-un-ejemplo","text":"Resolvamos el siguiente problema: Una ma\u00f1ana, sales y colocas un billete de un d\u00f3lar en la acera de la torre Sears en Chicago. Cada d\u00eda a partir de entonces, sales y colocas el doble de billetes. \u00bfCu\u00e1nto tiempo tarda la pila de billetes en superar la altura de la torre? Una posible soluci\u00f3n: # sears.py billete_grosor = 0.11 * 0.001 # Metros (0.11 mm) sears_altura = 442 # Altura (metros) num_billetes = 1 dia = 1 while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 print('N\u00famero de d\u00edas', dia) print('N\u00famero de facturas', num_billetes) print('Altura final', num_billetes * billete_grosor) Cuando lo ejecuta, obtiene el siguiente resultado: $ python3 sears.py 1 1 0.00011 2 2 0.00022 3 4 0.00044 4 8 0.00088 5 16 0.00176 6 32 0.00352 7 64 0.00704 8 128 0.01408 9 256 0.02816 10 512 0.05632 11 1024 0.11264 12 2048 0.22528 13 4096 0.45056 14 8192 0.90112 15 16384 1.80224 16 32768 3.60448 17 65536 7.20896 18 131072 14.41792 19 262144 28.83584 20 524288 57.67168 21 1048576 115.34336 22 2097152 230.68672 N\u00famero de d\u00edas 23 N\u00famero de facturas 4194304 Altura final 461.37344 Usando este programa como gu\u00eda, puede aprender una serie de conceptos b\u00e1sicos importantes sobre Python.","title":"1.2.5: Un ejemplo"},{"location":"1/#126-declaraciones","text":"Un programa de Python es una secuencia de declaraciones: a = 3 + 4 b = a * 2 print(b) Cada declaraci\u00f3n termina con una nueva l\u00ednea. Las sentencias se ejecutan una tras otra hasta que el control llega al final del archivo.","title":"1.2.6: Declaraciones"},{"location":"1/#127-comentarios","text":"Los comentarios son texto que no se ejecutar\u00e1. a = 3 + 4 # Esto es un comentario b = a * 2 print(b) Los comentarios se indican con # y se extienden hasta el final de la l\u00ednea.","title":"1.2.7: Comentarios"},{"location":"1/#128-variables","text":"Una variable es el nombre de un valor. Puede utilizar letras (min\u00fasculas y may\u00fasculas) de la a a la z, adem\u00e1s del car\u00e1cter subrayado _ . Los n\u00fameros tambi\u00e9n pueden formar parte del nombre de una variable, excepto como primer car\u00e1cter. altura = 442 # v\u00e1lido _height = 442 # v\u00e1lido altura2 = 442 # v\u00e1lido 2height = 442 # inv\u00e1lido","title":"1.2.8: Variables"},{"location":"1/#129-tipos","text":"Las variables no necesitan declararse con el tipo de valor. El tipo est\u00e1 asociado con el valor del lado derecho, no con el nombre de la variable. altura = 442 # Un n\u00famero entero altura = 442.0 # Punto flotante height = 'Muy alto' # Una cadena Python se escribe din\u00e1micamente. El \"tipo\" percibido de una variable puede cambiar a medida que se ejecuta un programa en funci\u00f3n del valor actual que se le asigna.","title":"1.2.9: Tipos"},{"location":"1/#1210-casos-sensitivos","text":"Python distingue entre may\u00fasculas y min\u00fasculas. Las letras may\u00fasculas y min\u00fasculas se consideran letras diferentes. Todas estas son variables diferentes: nombre = 'Jake' Nombre = 'Elwood' NOMBRE = 'Guido' Las declaraciones de idioma son siempre en min\u00fasculas. while x < 0: # OK WHILE x < 0: # ERROR","title":"1.2.10: Casos Sensitivos"},{"location":"1/#1211-ciclar","text":"La instrucci\u00f3n while ejecuta un ciclo. while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 print('Numero de dias', dia) Las declaraciones con sangr\u00eda debajo del while se ejecutar\u00e1n siempre que la expresi\u00f3n posterior al while sea verdadera / cierta.","title":"1.2.11: Ciclar"},{"location":"1/#1212-sangrias-las-de-texto","text":"La sangr\u00eda se usa para denotar grupos de declaraciones que van juntas. Considere el ejemplo anterior: while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 print('Numero de dias', dia) La sangr\u00eda agrupa las siguientes declaraciones juntas como las operaciones que se repiten: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 Debido a que la instrucci\u00f3n print() al final no tiene sangr\u00eda, no pertenece al ciclo. La l\u00ednea vac\u00eda es solo para facilitar la lectura. No afecta la ejecuci\u00f3n.","title":"1.2.12: Sangr\u00edas (las de texto)"},{"location":"1/#sangrias-mejores-practicas","text":"Utilice espacios en lugar de tabulaciones. Utilice 4 espacios por nivel. Utilice un editor compatible con Python. El \u00fanico requisito de Python es que la sangr\u00eda dentro del mismo bloque sea consistente. Por ejemplo, esto es un error: while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 # error num_billetes = num_billetes * 2","title":"Sangr\u00edas - Mejores pr\u00e1cticas"},{"location":"1/#1213-condicionales","text":"La instrucci\u00f3n if se usa para ejecutar un condicional: if a > b: print('Computadora dice no') else: print('Computadora dice si') Puede verificar m\u00faltiples condiciones agregando verificaciones adicionales usando elif. if a > b: print('Computadora dice no') elif a == b: print('Computadora dice si') else: print('Computadora dice quizas')","title":"1.2.13: Condicionales"},{"location":"1/#1214-imprimiendo","text":"La funci\u00f3n de impresi\u00f3n produce una sola l\u00ednea de texto con los valores pasados. print('\u00a1Hola mundo!') # Imprime el texto '\u00a1Hola mundo!' Puede utilizar variables. El texto impreso ser\u00e1 el valor de la variable, no el nombre. x = 100 print(x) # Imprime el texto '100' Si pasa m\u00e1s de un valor para imprimir, est\u00e1n separados por espacios. nombre = 'Jake' print('Mi nombre es', nombre) # Imprime el texto 'Mi nombre es Jake' print() siempre pone una nueva l\u00ednea al final. print('Hola') print('Mi nombre es', 'Jake') Esto imprime: shell Hola Mi nombre es Jake La nueva l\u00ednea adicional se puede suprimir: print('Hola', end = '') print('Mi nombre es', 'Jake') Este c\u00f3digo ahora se imprimir\u00e1: Hola mi nombre es Jake","title":"1.2.14: Imprimiendo"},{"location":"1/#1215-input-dato-de-entrada-de-usuario","text":"Para leer una l\u00ednea de entrada de usuario escrita, use la funci\u00f3n input() : nombre = input('Ingrese su nombre:') print('Tu nombre es', nombre) input imprime un mensaje al usuario y devuelve su respuesta. Esto es \u00fatil para programas peque\u00f1os, ejercicios de aprendizaje o depuraci\u00f3n simple. No se usa mucho para programas reales.","title":"1.2.15: Input (dato de entrada) de usuario"},{"location":"1/#1216-la-declaracion-pass","text":"Sometimes you need to specify an empty code block. The keyword pass is used for it. if a > b: pass else: print('Computer says false') This is also called a \"no-op\" statement. It does nothing. It serves as a placeholder for statements, possibly to be added later.","title":"1.2.16: La declaraci\u00f3n \"pass\""},{"location":"1/#1217-ejercicios","text":"Este es el primer conjunto de ejercicios en los que necesita crear archivos Python y ejecutarlos. A partir de este punto, se asume que est\u00e1 editando archivos en el directorio ./Work/ . Para ayudarle a localizar el lugar adecuado, se han creado varios archivos de inicio vac\u00edos con los nombres de archivo adecuados. Busque el archivo ./Work/rebote.py que se utiliz\u00f3 en el primer ejercicio. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador","title":"1.2.17: Ejercicios"},{"location":"1/#ejercicio-15-el-rebote","text":"Una pelota de goma se deja caer desde una altura de 100 metros y cada vez que golpea el suelo, rebota hasta 3/5 de la altura a la que cay\u00f3. Escriba un programa bounce.py que imprima una tabla que muestre la altura de los primeros 10 rebotes. Su programa deber\u00eda crear una tabla que se parezca a esto: 1 60,0 2 36,0 3 21.599999999999998 4 12.959999999999999 5 7.775999999999999 6 4.6655999999999995 7 2.7993599999999996 8 1,6796159999999998 9 1,0077695999999998 10 0.6046617599999998 Nota: Puede limpiar un poco la salida si usa la funci\u00f3n round() . Intente usarlo para redondear la salida a 4 d\u00edgitos. 1 60,0 2 36,0 3 21,6 4 12,96 5 7.776 6 4.6656 7 2.7994 8 1,6796 9 1.0078 10 0.6047","title":"Ejercicio 1.5: El rebote"},{"location":"1/#ejercicio-16-depuracion","text":"El siguiente fragmento de c\u00f3digo contiene c\u00f3digo del problema de la torre Sears. Tambi\u00e9n tiene un error. billete_grosor = 0.11 * 0.001 # Metros (0.11 mm) sears_altura = 442 # Altura (metros) num_billetes = 1 dia = 1 while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dias + 1 num_billetes = num_billetes * 2 print ('N\u00famero de d\u00edas', dia) print ('N\u00famero de facturas', num_billetes) print ('Altura final', num_billetes * billete_grosor) Copie y pegue el c\u00f3digo que aparece arriba en un nuevo programa llamado sears.py . Cuando ejecute el c\u00f3digo, obtendr\u00e1 un mensaje de error que hace que el programa se bloquee de esta manera: Traceback (most recent call last): File \"sears.py\", line 10, in <module> day = dias + 1 NameError: name 'dias' is not defined Leer los mensajes de error es una parte importante del c\u00f3digo Python. Si su programa falla, la \u00faltima l\u00ednea del mensaje de rastreo es la raz\u00f3n real por la cual el programa falla. Por encima de eso, deber\u00eda ver un fragmento de c\u00f3digo fuente y luego un nombre de archivo de identificaci\u00f3n y un n\u00famero de l\u00ednea. \u00bfQu\u00e9 l\u00ednea es el error? Cual es el error? Arreglar el error Ejecute el programa con \u00e9xito","title":"Ejercicio 1.6: Depuraci\u00f3n"},{"location":"1/#13-numeros","text":"Esta secci\u00f3n discute sobre c\u00e1lculos matem\u00e1ticos. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador","title":"1.3 N\u00fameros"},{"location":"1/#131-tipos-de-numeros","text":"Python tiene 4 tipos de n\u00fameros: Booleanos Enteros Punto flotante Complejo (n\u00fameros imaginarios)","title":"1.3.1: Tipos de numeros"},{"location":"1/#132-booleanos-bool","text":"Los booleanos tienen dos valores: True , False . a = True b = False Num\u00e9ricamente, se eval\u00faan como n\u00fameros enteros con valor \"1\", \"0\". c = 4 + True # 5 d = False if d == 0: print('d is False') Pero no escriba c\u00f3digo como ese. Ser\u00eda extra\u00f1o. *","title":"1.3.2: Booleanos (bool)"},{"location":"1/#133-enteros-int","text":"Valores firmados de tama\u00f1o y base arbitraria: a = 37 b = -299392993727716627377128481812241231 c = 0x7fa8 # Hexadecimal d = 0o253 # Octal e = 0b10001111 # Binario Operaciones comunes: x + y Suma x - y Resta x * y Multiplicacion x / y Divisi\u00f3n (produce un flotante) x // y Divisi\u00f3n entera (produce un entero) x % y Modulo (devuelve el resto de la divisi\u00f3n) x ** y Potencia x << n Bit desplazamiento izquierda x >> n Bit desplazamiento derecha x & y Bit-wise AND x | y Bit-wise OR x ^ y Bit-wise XOR ~x Bit-wise NOT abs(x) Valor absoluto","title":"1.3.3: Enteros (int)"},{"location":"1/#134-punto-flotante-float","text":"Utilice una notaci\u00f3n decimal o exponencial para especificar un valor de coma flotante: a = 37.45 b = 4e5 # 4 x 10**5 or 400,000 c = -1.345e-10 Los flotantes se representan con precisi\u00f3n doble utilizando la representaci\u00f3n de CPU nativa [IEEE 754] (https://en.wikipedia.org/wiki/IEEE_754). Es lo mismo que el tipo \"doble\" en el lenguaje de programaci\u00f3n C. 17 d\u00edgitos de precisi\u00f3n Exponente de -308 a 308 Tenga en cuenta que los n\u00fameros de punto flotante son inexactos cuando representan decimales. >>> a = 2.1 + 4.2 >>> a == 6.3 False >>> a 6.300000000000001 >>> Esto no es un problema de Python , sino el hardware de punto flotante subyacente en la CPU. Operaciones comunes: x + y Suma x - y Resta x * y Multiplicacion x / y Division x // y Division entera x % y Modulo x ** y Potencia abs(x) Valor absoluto Estos son los mismos operadores que los enteros, excepto los operadores bit a bit. Las funciones matem\u00e1ticas adicionales se encuentran en el m\u00f3dulo math . import math a = math.sqrt(x) b = math.sin(x) c = math.cos(x) d = math.tan(x) e = math.log(x)","title":"1.3.4: Punto flotante (float)"},{"location":"1/#135-comparaciones","text":"Los siguientes operadores de comparaci\u00f3n / relacionales funcionan con n\u00fameros: x < y Menor x <= y Menor o igual x > y Mayor x >= y Mayor o igual x == y Igual x != y No es igual Puede formar expresiones booleanas m\u00e1s complejas usando and , or , not Aqu\u00ed est\u00e1n algunos ejemplos: if b >= a and b <= c: print('b est\u00e1 entre a y c') if not (b < a or b > c): print('b todav\u00eda est\u00e1 entre a y c')","title":"1.3.5: Comparaciones"},{"location":"1/#136-convirtiendo-numeros","text":"El nombre del tipo se puede utilizar para convertir valores: a = int(x) # Convierte x a entero b = float(x) # Convierte x a coma flotante Try it out. >>> a = 3.14159 >>> int(a) 3 >>> b = '3.14159' # Tambi\u00e9n funciona con cadenas de numeros >>> float(b) 3.14159 >>>","title":"1.3.6: Convirtiendo numeros"},{"location":"1/#137-ejercicios","text":"Recordatorio: Estos ejercicios asumen que est\u00e1 trabajando en el directorio /Work . Busque el archivo hipoteca.py .","title":"1.3.7: Ejercicios"},{"location":"1/#ejercicio-17-la-hipoteca-de-dave","text":"Dave ha decidido sacar una hipoteca de tasa fija a 30 a\u00f1os de $500,000 con el comercio de hipotecas, inversiones en acciones y Bitcoin de Guido corporaci\u00f3n. La tasa de inter\u00e9s es del 5% y el pago mensual es $2684,11 . Aqu\u00ed hay un programa que calcula la cantidad total que Dave tendr\u00e1 para pagar durante la vida de la hipoteca: # mortgage.py capital = 500000.0 tasa = 0.05 pago = 2684.11 total_pagado = 0.0 while capital > 0: capital = capital * (1 + tasa / 12) - pago total_pagado = total_pagado + pago print('Total pagado', total_pagado) Ingrese a este programa y ejec\u00fatelo. Deber\u00eda obtener una respuesta de \"966,279.6\".","title":"Ejercicio 1.7: La hipoteca de Dave"},{"location":"1/#ejercicio-18-pagos-adicionales","text":"Suponga que Dave paga $1000 adicionales al mes durante los primeros 12 meses de la hipoteca. Modifique el programa para incorporar este pago adicional y haga que imprima el monto total pagado junto con la cantidad de meses requeridos. Cuando ejecute el nuevo programa, deber\u00eda informar un pago total de 929,965.62 durante 342 meses.","title":"Ejercicio 1.8: Pagos adicionales"},{"location":"1/#ejercicio-19-hacer-una-calculadora-de-pago-adicional","text":"Modifique el programa para que la informaci\u00f3n de pago adicional pueda manejarse de manera m\u00e1s general. H\u00e1galo de modo que el usuario pueda configurar estas variables: extra_pago_inicio_mes = 61 extra_pago_fin_mes = 108 extra_pago = 1000 Haga que el programa mire estas variables y calcule el total pagado adecuadamente. \u00bfCu\u00e1nto pagar\u00e1 Dave si paga $1000 adicionales al mes durante 4 a\u00f1os a partir de la primera ya se han pagado cinco a\u00f1os?","title":"Ejercicio 1.9: Hacer una calculadora de pago adicional"},{"location":"1/#ejercicio-110-crear-una-tabla","text":"Modifique el programa para imprimir una tabla que muestre el mes, el total pagado hasta el momento y el capital restante. La salida deber\u00eda verse as\u00ed: 1 2684.11 499399.22 2 5368.22 498795.94 3 8052.33 498190.15 4 10736.44 497581.83 5 13420.55 496970.98 ... 308 874705.88 3478.83 309 877389,99 809,21 310 880074.1 -1871.53 Total pagado 880074,1 Meses 310","title":"Ejercicio 1.10: Crear una tabla"},{"location":"1/#ejercicio-111-bono","text":"Mientras lo hace, corrija el programa para corregir el pago en exceso que se produjo en el \u00faltimo mes.","title":"Ejercicio 1.11: Bono"},{"location":"1/#ejercicio-112-un-misterio","text":"int() y float() se pueden usar para convertir n\u00fameros. Por ejemplo: >>> int(\"123\") 123 >>> float(\"1.23\") 1.23 >>> Con eso en mente, \u00bfpuede explicar este comportamiento? >>> bool(\"False\") True >>>","title":"Ejercicio 1.12: Un misterio"},{"location":"1/#14-cadenas","text":"Esta secci\u00f3n presenta formas de trabajar con texto. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador","title":"1.4 Cadenas"},{"location":"1/#141-representando-texto-literal","text":"Los literales de cadena se escriben en programas con comillas. # Comillas simples a = 'S\u00ed, pero no, pero s\u00ed, pero ...' # Comillas dobles b = \"la computadora dice que no\" # Comillas triples c = ''' M\u00edrame a los ojos, m\u00edrame a los ojos, los ojos, los ojos, los ojos, no alrededor de los ojos, no mires alrededor de los ojos, m\u00edrame a los ojos, est\u00e1s debajo. ''' Normalmente, las cadenas solo pueden abarcar una sola l\u00ednea. Las comillas triples capturan todo el texto incluido en varias l\u00edneas incluido todo el formato. No hay diferencia entre usar simple (') versus doble (\") citas. Sin embargo, se debe utilizar el mismo tipo de cita que se utiliza para iniciar una cadena como para terminarla .","title":"1.4.1: Representando texto literal"},{"location":"1/#142-codigo-de-escape-de-cadenas","text":"Los c\u00f3digos de escape se utilizan para representar caracteres de control y caracteres que no se pueden escribir f\u00e1cilmente directamente en el teclado. A continuaci\u00f3n, se muestran algunos c\u00f3digos de escape comunes: '\\n' salto de l\u00ednea '\\r' Retorno de carro '\\t' Pesta\u00f1a '\\'' Literal comilla simple '\\' Literal comillas dobles '\\\\' Barra invertida literal","title":"1.4.2: C\u00f3digo de escape de cadenas"},{"location":"1/#143-representacion-de-cadenas","text":"Cada car\u00e1cter de una cadena se almacena internamente como un denominado \"punto de c\u00f3digo\" Unicode, que es un entero. Puede especificar un valor de punto de c\u00f3digo exacto mediante las siguientes secuencias de escape: a = '\\xf1' # a = '\u00f1' b = '\\u2200' # b = '\u2200' c = '\\U0001D122' # c = '\ud834\udd22' d = '\\N{FOR ALL}' # d = '\u2200' La [Base de datos de caracteres Unicode] (https://unicode.org/charts) es una referencia para todos los c\u00f3digos de caracteres disponibles.","title":"1.4.3: Representaci\u00f3n de cadenas"},{"location":"1/#144-indexacion-de-cadenas","text":"Las cadenas funcionan como una matriz para acceder a caracteres individuales. Utiliza un \u00edndice entero, comenzando en 0. Los \u00edndices negativos especifican una posici\u00f3n relativa al final de la cadena. a = 'Hello world' b = a[0] # 'H' c = a[4] # 'o' d = a[-1] # 'd' (final de la cadena) Tambi\u00e9n puede dividir o seleccionar subcadenas especificando un rango de \u00edndices con : . d = a[:5] # 'Hello' e = a[6:] # 'world' f = a[3:8] # 'lo wo' g = a[-5:] # 'world' El car\u00e1cter del \u00edndice final no est\u00e1 incluido. Los \u00edndices que faltan asumen el principio o el final de la cadena.","title":"1.4.4: Indexaci\u00f3n de cadenas"},{"location":"1/#145-operaciones-de-cadena","text":"Concatenaci\u00f3n, tama\u00f1o, pertenencia y replicaci\u00f3n. # concatenaci\u00f3n (+) a = 'Hello' + 'World' # 'HelloWorld' b = 'Say ' + a # 'Say HelloWorld' # tama\u00f1o (len) s = 'Hello' len(s) # 5 # prueba de pertenencia (`in`, `not in`) t = 'e' in s # True f = 'x' in s # False g = 'hi' not in s # True # replicaci\u00f3n (s * n) rep = s * 5 # 'HelloHelloHelloHelloHello'","title":"1.4.5: Operaciones de cadena"},{"location":"1/#146-metodos-de-cadena","text":"Las cadenas tienen m\u00e9todos que realizan varias operaciones con los datos de la cadena. Ejemplo: eliminar cualquier espacio en blanco inicial / final. s = ' Hello ' t = s.strip() # 'Hello' Ejemplo: conversi\u00f3n de casos. s = 'Hello' l = s.lower() # 'hello' u = s.upper() # 'HELLO' Ejemplo: Reemplazo de texto. s = 'Hello world' t = s.replace('Hello' , 'Hallo') # 'Hallo world'","title":"1.4.6: Metodos de cadena"},{"location":"1/#otros-metodos-de-cadena","text":"Las cadenas tienen una amplia variedad de otros m\u00e9todos para probar y manipular los datos de texto. Esta es una peque\u00f1a muestra de m\u00e9todos: s.endswith(sufijo) # Compruebe si la cadena termina con sufijo s.find(t) # Primera aparici\u00f3n de t en s s.index(t) # Primera aparici\u00f3n de t en s s.isalpha() # Comprueba si los caracteres son alfab\u00e9ticos s.isdigit() # Comprueba si los caracteres son num\u00e9ricos s.islower() # Comprueba si los caracteres son min\u00fasculas s.isupper() # Comprueba si los caracteres est\u00e1n en may\u00fasculas s.join(slist) # \u00danase a una lista de cadenas usando s como delimitador s.lower() # Convertir a min\u00fasculas s.replace(antiguo, nuevo) # Reemplazar texto s.rfind(t) # Busca t desde el final de la cadena s.rindex(t) # Busca t desde el final de la cadena s.split([delim]) # Dividir cadena en lista de subcadenas s.startswith(prefix) # Compruebe si la cadena comienza con prefijo s.strip() # Franja el espacio inicial / final s.upper() # Convertir a may\u00fasculas","title":"Otros metodos de cadena"},{"location":"1/#147-mutabilidad-de-cadenas","text":"Las cadenas son \"inmutables\" o de solo lectura. Una vez creado, el valor no se puede cambiar. >>> s = 'Hello World' >>> s[1] = 'a' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'str' object does not support item assignment >>> Todas las operaciones y m\u00e9todos que manipulan datos de cadenas, siempre crean cadenas nuevas.","title":"1.4.7: Mutabilidad de cadenas"},{"location":"1/#148-conversiones-de-cadena","text":"Utilice str () para convertir cualquier valor en una cadena. El resultado es una cadena que sostiene el mismo texto que habr\u00eda sido producido por la declaraci\u00f3n print () . >>> x = 42 >>> str(x) '42' >>>","title":"1.4.8: Conversiones de cadena"},{"location":"1/#149-cadenas-byte","text":"Una cadena de bytes de 8 bits, que se encuentra com\u00fanmente con I/O de bajo nivel, se escribe de la siguiente manera: data = b'Hola Mundo\\r\\n' Al poner una b peque\u00f1a antes de la primera cita, especificas que es una cadena de bytes en lugar de una cadena de texto. La mayor\u00eda de las operaciones habituales con cadenas funcionan. len(data) # 13 data[0:5] # b'Hola' data.replace(b'Hello', b'Cruel') # b'Cruel Mundo\\r\\n' La indexaci\u00f3n es un poco diferente porque devuelve valores de bytes como n\u00fameros enteros. data[0] # 72 (ASCII code for 'H') Conversion to/from text strings. text = data.decode('utf-8') # bytes -> texto data = text.encode('utf-8') # texto -> bytes El argumento 'utf-8' especifica una codificaci\u00f3n de caracteres. Otros comunes los valores incluyen 'ascii' y ' latin1' .","title":"1.4.9: Cadenas byte"},{"location":"1/#1410-cadenas-crudas","text":"Las cadenas sin formato son literales de cadena con una barra invertida no interpretada. Se especifican anteponiendo la cita inicial con una \"r\" min\u00fascula. >>> rs = r'c:\\newdata\\test' # Sin formato (barra invertida no interpretada) >>> rs 'c:\\\\newdata\\\\test' La cadena es el texto literal incluido adentro, exactamente como se escribe. Esto es \u00fatil en situaciones en las que la barra invertida tiene significado. Ejemplo: nombre de archivo, expresiones regulares, etc.","title":"1.4.10: Cadenas crudas"},{"location":"1/#1411-cadenas-f","text":"Una cadena con sustituci\u00f3n de expresi\u00f3n formateada. >>> nombre = 'IBM' >>> acciones = 100 >>> precio = 91.1 >>> a = f'{nombre:>10s} {acciones:10d} {precio:10.2f}' >>> a ' IBM 100 91.10' >>> b = f'Costo = ${acciones * precio:0.2f}' >>> b 'Costo = $9110.00' >>> Nota: Esto requiere Python 3.6 o m\u00e1s reciente. El significado de los c\u00f3digos de formato se explica m\u00e1s adelante.","title":"1.4.11: Cadenas f"},{"location":"1/#1412-ejercicios","text":"En estos ejercicios, experimentar\u00e1 con operaciones en Python tipo de cadena. Debe hacer esto en el indicador interactivo de Python donde puede ver f\u00e1cilmente los resultados. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador Nota IMPORTANTE: En los ejercicios en los que se supone que debe interactuar con el int\u00e9rprete, >>> es el indicador del int\u00e9rprete que obtienes cuando Python quiere que escriba una nueva declaraci\u00f3n. Algunas declaraciones en el per\u00edodo de ejercicios varias l\u00edneas: para que se ejecuten estas declaraciones, es posible que deba presionar 'volver' unas cuantas veces. Solo un recordatorio de que * NO * escribe el >>> al trabajar con estos ejemplos. Empiece por definir una cadena que contenga una serie de s\u00edmbolos de cotizaci\u00f3n burs\u00e1til como este: >>> symbols = 'AAPL,IBM,MSFT,YHOO,SCO' >>>","title":"1.4.12: Ejercicios"},{"location":"1/#ejercicio-113-extraccion-de-caracteres-individuales-y-subcadenas","text":"Las cadenas son matrices de caracteres. Intente extraer algunos caracteres: >>> symbols[0] ? >>> symbols[1] ? >>> symbols[2] ? >>> symbols[-1] # Ultimo caracter ? >>> symbols[-2] # Indices negativos son desde el final ? >>> En Python, las cadenas son de solo lectura. Verifique esto intentando cambiar el primer car\u00e1cter de symbols a una min\u00fascula 'a'. >>> symbols[0] = 'a' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'str' object does not support item assignment >>>","title":"Ejercicio 1.13: Extracci\u00f3n de caracteres individuales y subcadenas"},{"location":"1/#ejercicio-114-concatenacion-de-caracteres","text":"Although string data is read-only, you can always reassign a variable to a newly created string. Try the following statement which concatenates a new symbol \"GOOG\" to the end of symbols : >>> symbols = symbols + 'GOOG' >>> symbols 'AAPL,IBM,MSFT,YHOO,SCOGOOG' >>> \u00a1Ups! Eso no es lo que quer\u00edas. Corr\u00edjelo para que la variable symbols contenga el valor 'AAPL, IBM, MSFT, YHOO, SCO, GOOG' . >>> symbols = ? >>> symbols 'AAPL,IBM,MSFT,YHOO,SCO,GOOG' >>> Agregue 'HPQ' al frente de la cuerda >>> symbols = ? >>> symbols 'HPQ,AAPL,IBM,MSFT,YHOO,SCO,GOOG' >>> En estos ejemplos, puede parecer que la cadena original est\u00e1 siendo modificado, en una aparente violaci\u00f3n de que las cadenas sean de solo lectura. No entonces. Las operaciones en cadenas crean una cadena completamente nueva cada una hora. Cuando se reasigna el nombre de la variable s\u00edmbolos , apunta al cadena reci\u00e9n creada. Posteriormente, la cuerda vieja se destruye ya que ya no se usa.","title":"Ejercicio 1.14: Concatenaci\u00f3n de caracteres"},{"location":"1/#ejercicio-115-pruebas-de-membresia","text":"Experimente con el operador \"in\" para buscar subcadenas. En el mensaje interactivo, pruebe estas operaciones: >>> 'IBM' in symbols ? >>> 'AA' in symbols True >>> 'CAT' in symbols ? >>> \u00bfPor qu\u00e9 la comprobaci\u00f3n de 'AA' devolvi\u00f3 True ?","title":"Ejercicio 1.15: Pruebas de membres\u00eda"},{"location":"1/#ejercicio-116-metodos-de-cadenas","text":"En el indicador interactivo de Python, intente experimentar con algunos de los m\u00e9todos de cadena. >>> symbols.lower() ? >>> symbols ? >>> Recuerde, las cadenas siempre son de solo lectura. Si desea guardar el resultado de una operaci\u00f3n, debe colocarlo en una variable: >>> lowersyms = symbols.lower() >>> Pruebe algunas operaciones m\u00e1s: >>> symbols.find('MSFT') ? >>> symbols[13:17] ? >>> symbols = symbols.replace('SCO','DOA') >>> symbols ? >>> name = ' IBM \\n' >>> name = name.strip() # Remove surrounding whitespace >>> name ? >>>","title":"Ejercicio 1.16: M\u00e9todos de cadenas"},{"location":"1/#ejercicio-117-f-strings","text":"A veces desea crear una cadena e incrustar los valores de variables en \u00e9l. Para hacer eso, use una f-string. Por ejemplo: >>> nombre = 'IBM' >>> acciones = 100 >>> precio = 91.1 >>> f'{acciones} acciones de {nombre} a ${precio:0.2f}' '100 acciones de IBM a $91.10' >>> Modifique el programa de hipoteca Dave mortgage.py del Ejercicio 1.10 para crear su salida usando f-strings. Intente hacer que la salida est\u00e9 bien alineada.","title":"Ejercicio 1.17: f-strings"},{"location":"1/#ejercicio-118-expresiones-regulares","text":"Una limitaci\u00f3n de las operaciones b\u00e1sicas con cadenas es que no admite cualquier tipo de coincidencia de patrones avanzada. Por eso tu Necesito recurrir al m\u00f3dulo re y las expresiones regulares de Python. El manejo de expresiones regulares es un gran tema, pero aqu\u00ed hay un breve ejemplo: >>> text = 'Today is 3/27/2018. Tomorrow is 3/28/2018.' >>> # Find all occurrences of a date >>> import re >>> re.findall(r'\\d+/\\d+/\\d+', text) ['3/27/2018', '3/28/2018'] >>> # Replace all occurrences of a date with replacement text >>> re.sub(r'(\\d+)/(\\d+)/(\\d+)', r'\\3-\\1-\\2', text) 'Today is 2018-3-27. Tomorrow is 2018-3-28.' >>> Para obtener m\u00e1s informaci\u00f3n sobre el m\u00f3dulo re , consulte la documentaci\u00f3n oficial en https://docs.python.org/library/re.html .","title":"Ejercicio 1.18: Expresiones regulares"},{"location":"1/#algunos-comentarios","text":"A medida que comienza a experimentar con el int\u00e9rprete, a menudo desea conocer m\u00e1s sobre las operaciones soportadas por diferentes objetos. Por ejemplo, \u00bfc\u00f3mo averigua qu\u00e9 operaciones est\u00e1n disponibles en un cadena? Dependiendo de su entorno de Python, es posible que pueda ver una lista de los m\u00e9todos disponibles mediante el completado con tabulaci\u00f3n. Por ejemplo, intente escribir esta: >>> s = 'hello world' >>> s.<tab key> >>> Si presionar tab no hace nada, puede volver al funci\u00f3n incorporada dir() . Por ejemplo: >>> s = 'hello' >>> dir(s) ['__add__', '__class__', '__contains__', ..., 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'] >>> dir() produce una lista de todas las operaciones que pueden aparecer despu\u00e9s de (.) . Utilice el comando help() para obtener m\u00e1s informaci\u00f3n sobre una operaci\u00f3n espec\u00edfica: >>> help(s.upper) Help on built-in function upper: upper(...) S.upper() -> string Return a copy of the string S converted to uppercase. >>>","title":"Algunos comentarios"},{"location":"1/#15-listas","text":"Esta secci\u00f3n presenta listas, el tipo principal de Python para contener una colecci\u00f3n ordenada de valores. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador","title":"1.5 Listas"},{"location":"1/#151-creando-una-lista","text":"Utilice corchetes para definir un literal de lista: nombres = [ 'Elwood', 'Jake', 'Curtis' ] numeros = [39, 38, 42, 65, 111] En ocasiones las listas son creadas por otros metodos. Por ejemplo, una cadena puede ser dividida haciendo uso del m\u00e9todo split() . >>> linea = 'GOOG,100,490.10' >>> fila = line.split(',') >>> fila ['GOOG', '100', '490.10'] >>>","title":"1.5.1: Creando una lista"},{"location":"1/#152-operaciones-de-lista","text":"Las listas pueden contener elementos de cualquier tipo. Agregue un nuevo elemento usando append() : nombres.append('Murphy') # Agrega al final nombres.insert(2, 'Aretha') # Inserta en el medio Use + para concatenar listas: s = [1, 2, 3] t = ['a', 'b'] s + t # [1, 2, 3, 'a', 'b'] Las listas est\u00e1n indexadas por n\u00fameros enteros. A partir de 0. nombres = [ 'Elwood', 'Jake', 'Curtis' ] nombres[0] # 'Elwood' nombres[1] # 'Jake' nombres[2] # 'Curtis' Los \u00edndices negativos cuentan desde el final. nombres[-1] # 'Curtis' Puede cambiar cualquier elemento de una lista. nombres[1] = 'Joliet Jake' nombres # [ 'Elwood', 'Joliet Jake', 'Curtis' ] Length of the list. nombres = ['Elwood','Jake','Curtis'] len(nombres) # 3 Prueba de pertenencia ( in , not in ) 'Elwood' in nombres # True 'Britney' not in nombres # True Replicaci\u00f3n ( s * n ). s = [1, 2, 3] s * 3 # [1, 2, 3, 1, 2, 3, 1, 2, 3]","title":"1.5.2: Operaciones de lista"},{"location":"1/#153-iteracion-de-lista-y-busqueda","text":"Utilice for para iterar sobre el contenido de la lista. for nombre in nombres: # use nombre # e.g. print(nombre) ... Esto es similar a una declaraci\u00f3n foreach de otros lenguajes de programaci\u00f3n. Para encontrar la posici\u00f3n de algo r\u00e1pidamente, use index() . nombres = ['Elwood','Jake','Curtis'] nombres.index('Curtis') # 2 Si el elemento est\u00e1 presente m\u00e1s de una vez, index() devolver\u00e1 el \u00edndice de la primera aparici\u00f3n. Si el elemento no se encuentra, generar\u00e1 una excepci\u00f3n \"ValueError\".","title":"1.5.3: Iteracion de lista y b\u00fasqueda"},{"location":"1/#154-remocion-en-lista","text":"Puede eliminar elementos por valor de elemento o por \u00edndice: # Using the value nombres.remove('Curtis') # Using the index del nombres[1] Eliminar un art\u00edculo no crea un agujero. Otros elementos se mover\u00e1n hacia abajo para llenar el espacio desocupado. Si hay m\u00e1s de una aparici\u00f3n del elemento, remove() eliminar\u00e1 solo la primera aparici\u00f3n.","title":"1.5.4: Remoci\u00f3n en lista"},{"location":"1/#155-ordenar-una-lista","text":"Las listas se pueden ordenar \"in situ\". s = [10, 1, 7, 3] s.sort() # [1, 3, 7, 10] # Reverse order s = [10, 1, 7, 3] s.sort(reverse=True) # [10, 7, 3, 1] # It works with any ordered data s = ['foo', 'bar', 'spam'] s.sort() # ['bar', 'foo', 'spam'] Utilice sorted() si desea crear una nueva lista en su lugar: t = sorted(s) # s sin cambios, t tiene los valores ordenados","title":"1.5.5: Ordenar una lista"},{"location":"1/#156-listas-y-matematicas","text":"Caution: Lists were not designed for math operations. >>> nombres = [1, 2, 3, 4, 5] >>> nombres * 2 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5] >>> nombres + [10, 11, 12, 13, 14] [1, 2, 3, 4, 5, 10, 11, 12, 13, 14] Espec\u00edficamente, las listas no representan vectores/matrices como en MATLAB, Octave, R, etc. Sin embargo, existen algunos m\u00f3dulos/paquetes/librer\u00edas que le ayudan con eso (e.g. numpy )","title":"1.5.6: Listas y matem\u00e1ticas"},{"location":"1/#157-ejercicios","text":"En este ejercicio, experimentaremos con listas. En la ultima secci\u00f3n trabajamos con cadenas conteniendo s\u00edmbolos de acciones de bolsa valores. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador >>> symbols = 'HPQ,AAPL,IBM,MSFT,YHOO,DOA,GOOG' Divida la cadena en una lista de nombres haciendo uso de la operacion split() de cadenas: >>> symlist = symbols.split(',')","title":"1.5.7: Ejercicios"},{"location":"1/#ejercicio-119-extraccion-y-reasignacion-de-elementos","text":"Pruebe algunas busquedas: >>> symlist[0] 'HPQ' >>> symlist[1] 'AAPL' >>> symlist[-1] 'GOOG' >>> symlist[-2] 'DOA' >>> Intente reasignar un valor: >>> symlist[2] = 'AIG' >>> symlist ['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'DOA', 'GOOG'] >>> Agarre unos pedazos: >>> symlist[0:3] ['HPQ', 'AAPL', 'AIG'] >>> symlist[-2:] ['DOA', 'GOOG'] Crea una lista vac\u00eda y agregue un elemento. >>> mysyms = [] >>> mysyms.append('GOOG') >>> mysyms ['GOOG'] Puede reasignar una porci\u00f3n de la lista a otra lista. Por ejemplo: >>> symlist[-2:] = mysyms >>> symlist ['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG'] >>> Cuando hace esto, la lista en el lado izquierdo ( symlist ) ser\u00e1 reajustada apropiadamente para que el lado derecho ( mysyms ) ocupe un puesto en ella.","title":"Ejercicio 1.19: Extracci\u00f3n y reasignaci\u00f3n de elementos"},{"location":"1/#ejercicio-120-ciclando-sobre-una-lista","text":"El ciclo/bucle for funciona ciclando sobre data en una secuencia la lista. Pruebe lo siguiente: >>> for s in symlist: ... print('s =', s)","title":"Ejercicio 1.20: Ciclando sobre una lista"},{"location":"1/#ejercicio-121-pruebas-de-pertenencia","text":"Utilice el operador in o not in para comprobar si 'AIG' , 'AA' y 'CAT' est\u00e1n en la lista de s\u00edmbolos. >>> # Est\u00e1 'AIG' en `symlist`? True >>> # Est\u00e1 'AA' en `symlist`? False >>> # 'CAT' no esta en `symlist`? True >>>","title":"Ejercicio 1.21: Pruebas de pertenencia"},{"location":"1/#ejercicio-122-anadiendo-insertando-y-borrando-elementos","text":"Utilice el m\u00e9todo append() para agregar el s\u00edmbolo 'RHT' al final de symlist . >>> # agregue 'RHT' >>> symlist ['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG', 'RHT'] >>> Utilice el m\u00e9todo insert() para insertar el s\u00edmbolo 'AA' como el segundo elemento de la lista. >>> # Agregue 'AA' como segundo item en la lista >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG', 'RHT'] >>> Utilice el m\u00e9todo remove() para eliminar 'MSFT' de la lista. >>> # Remueva 'MSFT' >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'YHOO', 'GOOG', 'RHT'] >>> A\u00f1ada una entrada duplicada para ` YHOO' al final de la lista. Nota: est\u00e1 perfectamente bien si una lista tenga valores duplicados. >>> # Append 'YHOO' >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'YHOO', 'GOOG', 'RHT', 'YHOO'] >>> Utilice el m\u00e9todo index() para encontrar la primera posici\u00f3n de 'YHOO' en la lista. >>> # Encuentre el primer \u00edndice de 'YHOO' 4 >>> symlist[4] 'YHOO' >>> Cuente cu\u00e1ntas veces 'YHOO' est\u00e1 en la lista: >>> symlist.count('YHOO') 2 >>> Remueva la primera ocurrencia de 'YHOO' . >>> # Remueva primera ocurrencia de 'YHOO' >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'GOOG', 'RHT', 'YHOO'] >>> Para su informaci\u00f3n, no existe ning\u00fan m\u00e9todo para buscar o eliminar todas las apariciones de un elemento Sin embargo, veremos una forma elegante de hacer esto en la secci\u00f3n 2.","title":"Ejercicio 1.22: A\u00f1adiendo, insertando y borrando elementos"},{"location":"1/#ejercicio-123-ordernando","text":"\u00bfQuieres ordenar una lista? Utilice el m\u00e9todo sort() . Pru\u00e9balo: >>> symlist.sort() >>> symlist ['AA', 'AAPL', 'AIG', 'GOOG', 'HPQ', 'RHT', 'YHOO'] >>> \u00bfQuiere ordenar al rev\u00e9s? Prueba esto: >>> symlist.sort(reverse=True) >>> symlist ['YHOO', 'RHT', 'HPQ', 'GOOG', 'AIG', 'AAPL', 'AA'] >>> Nota: ordenar una lista modifica su contenido \"en el lugar\". Es decir, los elementos de la lista se mezclan, pero no se crea una nueva lista como resultado.","title":"Ejercicio 1.23: Ordernando"},{"location":"1/#ejercicio-124-ajuntando-todo-nuevamente","text":"\u00bfQuiere tomar una lista de cadenas y unirlas en una sola cadena? Utilice el m\u00e9todo join () de cadenas como esta (nota: esto se ve gracioso al principio). >>> a = ','.join(symlist) >>> a 'YHOO,RHT,HPQ,GOOG,AIG,AAPL,AA' >>> b = ':'.join(symlist) >>> b 'YHOO:RHT:HPQ:GOOG:AIG:AAPL:AA' >>> c = ''.join(symlist) >>> c 'YHOORHTHPQGOOGAIGAAPLAA' >>>","title":"Ejercicio 1.24: Ajuntando todo nuevamente"},{"location":"1/#ejercicio-125-listas-de-cualquier-cosa","text":"Las listas pueden contener cualquier tipo de objeto, incluidas otras listas (por ejemplo, listas anidadas). Probar esto: >>> nums = [101, 102, 103] >>> items = ['spam', symlist, nums] >>> items ['spam', ['YHOO', 'RHT', 'HPQ', 'GOOG', 'AIG', 'AAPL', 'AA'], [101, 102, 103]] Preste mucha atenci\u00f3n a la salida anterior. items es una lista con tres elementos. El primer elemento es una cadena, pero los otros dos elementos son listas. Puede acceder a los elementos de las listas anidadas mediante varias operaciones de indexaci\u00f3n. >>> items[0] 'spam' >>> items[0][0] 's' >>> items[1] ['YHOO', 'RHT', 'HPQ', 'GOOG', 'AIG', 'AAPL', 'AA'] >>> items[1][1] 'RHT' >>> items[1][1][2] 'T' >>> items[2] [101, 102, 103] >>> items[2][1] 102 >>> Aunque t\u00e9cnicamente es posible hacer estructuras muy complicadas compuestas por listas, como regla general, es preferible mantener las cosas simples. Por lo general, las listas contienen elementos que tienen el mismo tipo de valor. Por ejemplo, una lista que consta completamente de n\u00fameros o una lista de texto de cadena. Mezclar diferentes tipos de datos en la misma lista es a menudo un buen dolor de cabeza, por lo que es mejor evitarlo.","title":"Ejercicio 1.25: Listas de cualquier cosa"},{"location":"1/#16-archivos","text":"La mayor\u00eda de los programas necesitan leer la entrada de alg\u00fan lugar. Esta secci\u00f3n discute sobre el acceso a archivos. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador","title":"1.6 Archivos"},{"location":"1/#161-entrada-y-salida-de-un-archivo","text":"Abre un archivo. f = open('foo.txt', 'rt') # Open for reading (text) g = open('bar.txt', 'wt') # Open for writing (text) Lee toda la data. data = f.read() data = f.read([maxbytes]) # Read only up to 'maxbytes' bytes Escribe algo de texto. g.write('some text') Cierra cuando terminas. f.close() g.close() Files should be properly closed and it's an easy step to forget. Thus, the preferred approach is to use the with statement like this. with open(filename, 'rt') as file: # Haz uso del archivo \"file\" ... # No hay necesidad de cerrar expl\u00edcitamente ...statements Esto cierra autom\u00e1ticamente el archivo cuando el control abandona el bloque de c\u00f3digo con sangr\u00eda.","title":"1.6.1: Entrada y Salida de un Archivo"},{"location":"1/#162-patrones-comunes-de-lectura-de-archivos","text":"Leer un archivo completo de una vez como una cadena. with open('foo.txt', 'rt') as file: data = file.read() # `data` is a string with all the text in `foo.txt` Leer un archivo l\u00ednea por l\u00ednea iterando. with open(filename, 'rt') as file: for line in file: # Process the line","title":"1.6.2: Patrones comunes de lectura de archivos"},{"location":"1/#163-patrones-comunes-de-escritura-de-archivos","text":"Escribe data en cadena. with open('outfile', 'wt') as out: out.write('Hello World\\n') ... Redireccionando la funci\u00f3n de impresi\u00f3n. with open('outfile', 'wt') as out: print('Hola Mundo', file=out) ...","title":"1.6.3: Patrones comunes de escritura de archivos"},{"location":"1/#164-ejercicios","text":"Estos ejercicios dependen de un archivo Data/portfolio.csv . El archivo contiene una lista de l\u00edneas con informaci\u00f3n sobre una cartera de acciones. Se supone que est\u00e1 trabajando en el archivo ./Work/ directorio. Si no est\u00e1 seguro, puede averiguar d\u00f3nde Python se est\u00e1 ejecutando haciendo esto: Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador >>> import os >>> os.getcwd() '/Users/beazley/Desktop/practical-python/Work' # Su salida ser\u00e1 diferente >>>","title":"1.6.4: Ejercicios"},{"location":"1/#126-prerequisitos","text":"Primero, intente leer todo el archivo a la vez en una cadena grande: >>> with open('Data/portfolio.csv', 'rt') as f: data = f.read() >>> data 'name,shares,price\\n\"AA\",100,32.20\\n\"IBM\",50,91.10\\n\"CAT\",150,83.44\\n\"MSFT\",200,51.23\\n\"GE\",95,40.37\\n\"MSFT\",50,65.10\\n\"IBM\",100,70.44\\n' >>> print(data) name,shares,price \"AA\",100,32.20 \"IBM\",50,91.10 \"CAT\",150,83.44 \"MSFT\",200,51.23 \"GE\",95,40.37 \"MSFT\",50,65.10 \"IBM\",100,70.44 >>> En el ejemplo anterior, cabe se\u00f1alar que Python tiene dos modos de salida. En el primer modo, donde aparece \">>> data\" en el indicador, Python muestra la representaci\u00f3n de la cadena sin procesar, incluidas las comillas y c\u00f3digos de escape. Cuando escribe print(data) , obtiene el formato real de salida de la cadena. Para leer un archivo l\u00ednea por l\u00ednea, use un bucle for como \u00e9ste: >>> with open('Data/portfolio.csv', 'rt') as f: for line in f: print(line, end='') name,shares,price \"AA\",100,32.20 \"IBM\",50,91.10 ... >>> En determinadas ocasiones, es posible que desee leer u omitir manualmente una \u00fanica l\u00ednea de texto (por ejemplo, tal vez desee omitir la primera l\u00ednea de los encabezados de columna). >>> f = open('Data/portfolio.csv', 'rt') >>> headers = next(f) >>> headers 'name,shares,price\\n' >>> for line in f: print(line, end='') \"AA\",100,32.20 \"IBM\",50,91.10 ... >>> f.close() >>> next() devuelve la siguiente l\u00ednea de texto en el archivo. Si lo llamara repetidamente, obtendr\u00eda l\u00edneas sucesivas. Sin embargo, para que lo sepa, el ciclo for hace uso de next() para obtener sus datos. Por lo tanto, normalmente no lo llamar\u00eda directamente a menos que est\u00e9 tratando de omitir o leer expl\u00edcitamente una sola l\u00ednea como se muestra. Una vez que est\u00e9 leyendo las l\u00edneas de un archivo, puede comenzar a realizar m\u00e1s procesamiento, como dividir. Por ejemplo, intente esto: >>> f = open('Data/portfolio.csv', 'rt') >>> headers = next(f).split(',') >>> headers ['name', 'shares', 'price\\n'] >>> for line in f: row = line.split(',') print(row) ['\"AA\"', '100', '32.20\\n'] ['\"IBM\"', '50', '91.10\\n'] ... >>> f.close() Nota: En estos ejemplos, f.close() se llama expl\u00edcitamente porque no se utiliza la instrucci\u00f3n with .","title":"1.26: Prerequisitos"},{"location":"1/#ejercicio-127-leyendo-de-un-archivo","text":"Ahora que sabe c\u00f3mo leer un archivo, escribamos un programa para realizar un c\u00e1lculo. Las columnas de portfolio.csv corresponden al nombre de la acci\u00f3n, n\u00famero de acciones, y precio de compra de una sola participaci\u00f3n accionaria. Escribe un programa llamado pcost.py que abre este archivo, lee todas las l\u00edneas y calcula cu\u00e1nto cost\u00f3 comprar todas las acciones en la cartera (portfolio). Sugerencia: para convertir una cadena en un entero, use int(s) . Para convertir una cadena en punto flotante, use float(s) . Su programa deber\u00eda imprimir un resultado como el siguiente: Costo total 44671.15","title":"Ejercicio 1.27: Leyendo de un archivo"},{"location":"1/#ejercicio-128-otro-tipo-de-archivos","text":"\u00bfY si quisiera leer un archivo que no es de texto, como un archivo comprimido gzip? La funci\u00f3n integrada open() no le ayudar\u00e1 aqu\u00ed, pero Python tiene un m\u00f3dulo gzip que puede leer archivos comprimidos gzip. >>> import gzip >>> with gzip.open('Data/portfolio.csv.gz', 'rt') as f: for line in f: print(line, end='') ... mira la salida ... >>> Nota: Incluir el modo de archivo de 'rt' es fundamental aqu\u00ed. Si olvidas eso obtendr\u00e1 cadenas de bytes en lugar de cadenas de texto normales.","title":"Ejercicio 1.28: Otro tipo de \"archivos\""},{"location":"1/#algunos-comentarios_1","text":"Los cient\u00edficos de datos se apresuran a se\u00f1alar que librerias como Pandas ya tienen una funci\u00f3n para leer archivos CSV. Esto es cierto y funciona bastante bien. Sin embargo, este no es un curso sobre c\u00f3mo aprender pandas. Leer archivos es un problema m\u00e1s general que las espec\u00edficaciones de archivos CSV. La raz\u00f3n principal por la que trabajamos con un archivo CSV es porque es un formato conocido para la mayor\u00eda de los programadores y es relativamente f\u00e1cil trabajarlo directamente - ilustrando muchas caracter\u00edsticas de Python en el proceso. Entonces, por supuesto, use Pandas cuando regrese al trabajo. Para el resto de este curso, sin embargo, vamos a seguir con la funcionalidad est\u00e1ndar de Python.","title":"Algunos comentarios"},{"location":"1/#17-funciones","text":"A medida que sus programas comiencen a crecer, va a querer organizarse. Esta secci\u00f3n presenta brevemente las funciones y los m\u00f3dulos de la biblioteca est\u00e1ndar. Tambi\u00e9n se introduce el manejo de errores con excepciones. Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador","title":"1.7 Funciones"},{"location":"1/#171-funciones-personalizadas","text":"Utilice funciones para el c\u00f3digo que desea reutilizar. Aqu\u00ed hay una definici\u00f3n de funci\u00f3n: def sumcount(n): ''' Retorna la suma de los primeros n enteros ''' total = 0 while n > 0: total += n n -= 1 return total Para llamar una funci\u00f3n. a = sumcount(100) Una funci\u00f3n es una serie de declaraciones que realizan alguna tarea y devuelven un resultado. La palabra clave return es necesaria para especificar expl\u00edcitamente el valor de retorno de la funci\u00f3n.","title":"1.7.1: Funciones personalizadas"},{"location":"1/#172-funciones-de-biblioteca","text":"Python viene con una gran biblioteca est\u00e1ndar. Se accede a los m\u00f3dulos de la biblioteca usando import . Por ejemplo: import math x = math.sqrt(10) import urllib.request u = urllib.request.urlopen('http://www.python.org/') data = u.read() Cubriremos bibliotecas y m\u00f3dulos con m\u00e1s detalle m\u00e1s adelante.","title":"1.7.2: Funciones de biblioteca"},{"location":"1/#173-errores-y-excepciones","text":"Las funciones informan sobre errores como las excepciones. Una excepci\u00f3n provoca la interrupci\u00f3n de una funci\u00f3n y puede hacer que todo el programa se detenga si no se maneja. Prueba esto en tu REPL (read/lee, evaluate/evalua, print/imprime, cicla/loop) de Python. >>> int('N/A') Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ValueError: invalid literal for int() with base 10: 'N/A' >>> Para fines de depuraci\u00f3n, el mensaje describe lo que sucedi\u00f3, d\u00f3nde ocurri\u00f3 el error, y un rastreo que muestra las otras llamadas a funciones que provocaron la falla.","title":"1.7.3: Errores y excepciones"},{"location":"1/#174-atrapando-y-gestionando-excepciones","text":"Las excepciones de pueden atrapar y gestionar. Para atrapar, use la declaraci\u00f3n try - except . for linea in f: campos = linea.split() try: acciones = int(campos[1]) except ValueError: print(\"No se pudo analizar\", linea) ... El nombre \"ValueError\" debe coincidir con el tipo de error que est\u00e1 intentando detectar. A menudo es dif\u00edcil saber exactamente qu\u00e9 tipo de errores pueden ocurrir de antemano dependiendo de la operaci\u00f3n que se est\u00e9 realizando. Para mejor o para peor, el manejo de excepciones a menudo se agrega despu\u00e9s de que un programa fall\u00f3 inesperadamente (es decir, \"oh, nos olvidamos de detectar ese error, deber\u00eda gestionar eso! \").","title":"1.7.4: Atrapando y gestionando excepciones"},{"location":"1/#175-generando-excepciones","text":"Para generar una excepci\u00f3n, use la instrucci\u00f3n raise . raise RuntimeError('Que desorden') Esto har\u00e1 que el programa se anule con un rastreo de excepci\u00f3n. A menos que sea atrapado por un bloque \"try-except\". $ python3 foo.py Traceback (most recent call last): File \"foo.py\", line 21, in <module> raise RuntimeError(\"Que desorden\") RuntimeError: What a kerfuffle","title":"1.7.5: Generando excepciones"},{"location":"1/#176-ejercicios","text":"Nota: si desea hacer esta secci\u00f3n online, hemos puesto a disposici\u00f3n un editor, consola Python y terminal Linux en repl.it . De lo contrario, tendr\u00e1 que ejecutar instrucciones en su ordenador","title":"1.7.6: Ejercicios"},{"location":"1/#ejercicio-129-definiendo-una-funcion","text":"Intente definir una funci\u00f3n simple: >>> def saludo(nombre): 'Genera un saludo' print('Hola', nombre) >>> greeting('Guido') Hola Guido >>> greeting('Paula') Hola Paula >>> Si la primera declaraci\u00f3n de una funci\u00f3n es una cadena, sirve como documentaci\u00f3n. Intente escribir un comando como help(saludo) para que se muestre.","title":"Ejercicio 1.29: Definiendo una funci\u00f3n"},{"location":"1/#ejercicio-130-convirtiendo-una-secuencia-de-comandos-en-una-funcion","text":"Tome el c\u00f3digo que escribi\u00f3 para el programa pcost.py en [Ejercicio 1.27] (06_Files.md) y convi\u00e9rtalo en una funci\u00f3n cartera_costo(nombre_de_archivo) . La funci\u00f3n toma un nombre de archivo como entrada, lee los datos de la cartera en ese archivo y devuelve el costo total de la cartera como flotante. Para usar su funci\u00f3n, cambie su programa para que se vea algo as\u00ed: def cartera_costo(nombre_de_archivo): ... # Su c\u00f3digo aqu\u00ed ... costo = cartera_costo('Data/portfolio.csv') print('Total cost:', costo) Cuando ejecute su programa, deber\u00eda ver el mismo resultado que antes. Despu\u00e9s de ejecutar su programa, tambi\u00e9n puede llamar a su funci\u00f3n interactivamente escribiendo esto: $ python3 -i pcost.py Esto le permitir\u00e1 llamar a su funci\u00f3n desde el modo interactivo. >>> cartera_costo('Data/portfolio.csv') 44671.15 >>> Being able to experiment with your code interactively is useful for testing and debugging.","title":"Ejercicio 1.30: Convirtiendo una secuencia de comandos en una funci\u00f3n"},{"location":"1/#ejercicio-131-administracion-de-errores","text":"\u00bfQu\u00e9 sucede si prueba su funci\u00f3n en un archivo al que le faltan algunos campos? >>> cartera_costo('Data/missing.csv') Traceback (most recent call last): File \"<stdin>\", line 1, in <module> File \"pcost.py\", line 11, in cartera_costo nshares = int(fields[1]) ValueError: invalid literal for int() with base 10: '' >>> En este momento, tiene que tomar una decisi\u00f3n. Para que el programa funcione puede depurar el archivo de entrada eliminando las l\u00edneas o puede modificar su c\u00f3digo para manejar las l\u00edneas defectuosas de alguna forma. Modifique el programa pcost.py para detectar la excepci\u00f3n, imprima una advertencia mensaje y contin\u00fae procesando el resto del archivo.","title":"Ejercicio 1.31: Administraci\u00f3n de errores"},{"location":"1/#ejercicio-132-usando-una-funcion-de-biblioteca-local","text":"Python viene con una biblioteca est\u00e1ndar de funciones \u00fatiles. Una biblioteca que podr\u00eda ser \u00fatil aqu\u00ed es el m\u00f3dulo csv . Debe usarlo siempre que tenga que trabajar con archivos de datos CSV. A continuaci\u00f3n, se muestra un ejemplo de c\u00f3mo funciona: >>> import csv >>> f = open('Data/portfolio.csv') >>> rows = csv.reader(f) >>> headers = next(rows) >>> headers ['name', 'shares', 'price'] >>> for row in rows: print(row) ['AA', '100', '32.20'] ['IBM', '50', '91.10'] ['CAT', '150', '83.44'] ['MSFT', '200', '51.23'] ['GE', '95', '40.37'] ['MSFT', '50', '65.10'] ['IBM', '100', '70.44'] >>> f.close() >>> Una cosa buena sobre el m\u00f3dulo csv es que se ocupa de una variedad de detalles de bajo nivel como las comillas y la divisi\u00f3n adecuada por comas. En la salida anterior, notar\u00e1 que ha eliminado las comillas dobles lejos de los nombres en la primera columna. Modifique su programa pcost.py para que use el m\u00f3dulo csv para analizar e intentar ejecutar ejemplos anteriores.","title":"Ejercicio 1.32: Usando una funci\u00f3n de biblioteca local"},{"location":"1/#ejercicio-133-leyendo-desde-la-linea-de-comando","text":"En el programa pcost.py , el nombre del archivo de entrada se ha integrado en el c\u00f3digo: # pcost.py def cartera_costo(filename): ... # Su c\u00f3digo aqu\u00ed ... costo = cartera_costo('Data/portfolio.csv') print('Total costo:', costo) Est\u00e1 bien para aprender y probar, pero en un programa real probablemente no har\u00eda eso. En su lugar, pudiera pasar el nombre del archivo como argumento a un archivo con una secuencia de comandos. Intente cambiar la parte inferior del programa de la siguiente manera: # pcost.py import sys def cartera_costo(filename): ... # Su c\u00f3digo aqu\u00ed ... if len(sys.argv) == 2: filename = sys.argv[1] else: filename = 'Data/portfolio.csv' costo = cartera_costo(filename) print('Total costo:', costo) sys.argv es una lista que contiene argumentos pasados en la l\u00ednea de comando (si los hay). Para ejecutar su programa, deber\u00e1 ejecutar Python desde la terminal. Por ejemplo, desde bash en Unix: bash % python3 pcost.py Data/portfolio.csv Total cost: 44671.15 bash %","title":"Ejercicio 1.33: Leyendo desde la l\u00ednea de comando"},{"location":"2/","text":"2. Trabajando con data Conoceremos las estructuras de datos de fundamental importancia en Python: tuples, lists, sets y dictionaries. Presentaremos algunos patrones comunes para el manejo de datos y discutiremos el modelo de objetos en Python. 2.1 Tipos y estructuras de data Esta secci\u00f3n presenta estructuras de datos en forma de tuplas y diccionarios. 2.1.1 Tipos primitivos Python tiene algunos tipos primitivos de datos: Enteros N\u00fameros de punto flotante Cadenas (texto) Aprendimos sobre esto en la introducci\u00f3n. 2.1.2 Tipo None email_address = None None se utiliza a menudo como marcador de posici\u00f3n para un valor opcional o faltante. Eso se eval\u00faa como \"Falso\" en condicionales. if email_address: send_email(email_address, msg) 2.1.3: Estructuras de data Los programas reales tienen datos m\u00e1s complejos. Por ejemplo, informaci\u00f3n sobre una participaci\u00f3n en acciones: 100 acciones de GOOG a $490.10 Este es un \"objeto\" con tres partes: Nombre o s\u00edmbolo de la acci\u00f3n (\"GOOG\", una cadena) N\u00famero de acciones (100, un n\u00famero entero) Precio (490,10 un punto flotante) 2.1.4: Tuplas Una tupla es una colecci\u00f3n de valores agrupados. Ejemplo: s = ('GOOG', 100, 490.1) A veces el () es omitido. s = 'GOOG', 100, 490.1' Casos especiales (0-tupla, 1-tupla). t = () # Una tupla vac\u00eda w = ('GOOG', ) # Una tupla de 1-item Las tuplas se utilizan a menudo para representar registros o estructuras simples . Normalmente, es un \u00fanico objeto de varias partes. Una buena analog\u00eda: Una tupla es como una sola fila en una tabla de base de datos. El contenido de la tupla est\u00e1 ordenado (como una matriz). s = ('GOOG', 100, 490.1) name = s[0] # 'GOOG' shares = s[1] # 100 price = s[2] # 490.1 Sin embargo, el contenido no se puede modificar. >>> s[1] = 75 TypeError: object does not support item assignment Sin embargo, puede crear una nueva tupla basada en una tupla actual. s = (s[0], 75, s[2]) Las tuplas tienen m\u00e1s que ver con empaquetar elementos relacionados en una sola entidad , que con cualquier otra cosa. s = ('GOOG', 100, 490.1) Por tanto, la tupla es f\u00e1cil de pasar a otras partes de un programa como un solo objeto. 2.1.5: Desempaque de Tuplas Para usar la tupla en otro lugar, puede desempaquetar sus partes en variables. name, shares, price = s print('Cost', shares * price) The number of variables on the left must match the tuple structure. name, shares = s # ERROR Traceback (most recent call last): ... ValueError: too many values to unpack 2.1.6 Tuplas vs Listas Tuples look like read-only lists. However, tuples are most often used for a single item consisting of multiple parts. Lists are usually a collection of distinct items, usually all of the same type. record = ('GOOG', 100, 490.1) # Una tupla que representa un registro en una cartera symbols = [ 'GOOG', 'AAPL', 'IBM' ] # Una lista que representa tres s\u00edmbolos de acciones 2.1.7 Diccionarios Un diccionario es la asignaci\u00f3n de claves a valores. A veces tambi\u00e9n se le llama una tabla hash o matriz asociativa. Las claves sirven como \u00edndices para acceder a los valores. s = { 'name': 'GOOG', 'shares': 100, 'price': 490.1 } 2.1.8 Operaciones comunes To get values from a dictionary use the key names. >>> print(s['name'], s['shares']) GOOG 100 >>> s['price'] 490.10 >>> Para agregar o modificar valores, asigne usando los nombres de las claves. >>> s['shares'] = 75 >>> s['date'] = '6/6/2007' >>> Para eliminar un valor, use la instrucci\u00f3n del . >>> del s['date'] >>> 2.1.9 \u00bfPorqu\u00e9 diccionarios? Los diccionarios son \u00fatiles cuando hay * muchos * valores diferentes y esos valores puede ser modificado o manipulado. Los diccionarios hacen que su c\u00f3digo sea m\u00e1s legible. s['price'] # vs s[2] 2.1.10 Ejercicios En los \u00faltimos ejercicios, escribi\u00f3 un programa que lee un archivo de datos Data/portfolio.csv . Usando el m\u00f3dulo csv , es f\u00e1cil leer el archivo fila por fila. >>> import csv >>> f = open('Data/portfolio.csv') >>> rows = csv.reader(f) >>> next(rows) ['name', 'shares', 'price'] >>> row = next(rows) >>> row ['AA', '100', '32.20'] >>> Aunque leer el archivo es f\u00e1cil, a menudo querr\u00e1 hacer m\u00e1s con el datos que leerlos. Por ejemplo, tal vez desee almacenarlo y comience a realizar algunos c\u00e1lculos sobre \u00e9l. Desafortunadamente, una \"fila\" sin procesar de datos no le da suficiente para trabajar. Por ejemplo, incluso un el c\u00e1lculo matem\u00e1tico simple no funciona: >>> row = ['AA', '100', '32.20'] >>> cost = row[1] * row[2] Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: can't multiply sequence by non-int of type 'str' >>> Para hacer m\u00e1s, normalmente desea interpretar los datos sin procesar de alguna manera y convertirlo en un tipo de objeto m\u00e1s \u00fatil para que pueda trabajar con \u00e9l m\u00e1s tarde. Dos opciones simples son tuplas o diccionarios. Ejercicio 2.1: Tuplas En el indicador interactivo, cree la siguiente tupla que represente la fila anterior, pero con las columnas num\u00e9ricas convertidas a los n\u00fameros adecuados: >>> t = (row[0], int(row[1]), float(row[2])) >>> t ('AA', 100, 32.2) >>> Con esto, ahora puede calcular el costo total multiplicando las acciones y el precio: >>> cost = t[1] * t[2] >>> cost 3220.0000000000005 >>> \u00bfLas matem\u00e1ticas est\u00e1n rotas en Python? \u00bfCu\u00e1l es el problema con la respuesta de 3220.0000000000005? Este es un artefacto del hardware de punto flotante en su computadora que solo puede representar decimales con precisi\u00f3n en Base-2, no en Base-10. Incluso para c\u00e1lculos simples que involucran decimales en base 10, se introducen peque\u00f1os errores. Esto es normal, aunque quiz\u00e1s un poco sorprendente si no lo ha visto antes. Esto sucede en todos los lenguajes de programaci\u00f3n que utilizan decimales de punto flotante, pero a menudo se oculta al imprimir. Por ejemplo: >>> print(f'{cost:0.2f}') 3220.00 >>> Las tuplas son de solo lectura. Verifique esto intentando cambiar el n\u00famero de acciones a 75. >>> t[1] = 75 Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'tuple' object does not support item assignment >>> Aunque no puede cambiar el contenido de la tupla, siempre puede crear una tupla completamente nueva que reemplace a la anterior. >>> t = (t[0], 75, t[2]) >>> t ('AA', 75, 32.2) >>> Siempre que reasigne un nombre de variable existente como este, el valor anterior se descarta. Aunque la asignaci\u00f3n anterior puede parecer que est\u00e1 modificando la tupla, en realidad est\u00e1 creando una nueva tupla y desechando la anterior. Las tuplas se utilizan a menudo para empaquetar y descomprimir valores en variables. Intente lo siguiente: >>> name, shares, price = t >>> name 'AA' >>> shares 75 >>> price 32.2 >>> Tome las variables anteriores y vuelva a empaquetarlas en una tupla >>> t = (name, 2*shares, price) >>> t ('AA', 150, 32.2) >>> Ejercicio 2.2: Diccionarios como estructura de datos Una alternativa a una tupla es crear un diccionario. >>> d = { 'name' : row[0], 'shares' : int(row[1]), 'price' : float(row[2]) } >>> d {'name': 'AA', 'shares': 100, 'price': 32.2 } >>> Calcule el costo total de esta participaci\u00f3n: >>> cost = d['shares'] * d['price'] >>> cost 3220.0000000000005 >>> Compare este ejemplo con el mismo c\u00e1lculo que involucra tuplas anterior. Cambie el n\u00famero de acciones a 75. >>> d['shares'] = 75 >>> d {'name': 'AA', 'shares': 75, 'price': 32.2 } >>> A diferencia de las tuplas, los diccionarios se pueden modificar libremente. Agrega algunos atributos: >>> d['date'] = (6, 11, 2007) >>> d['account'] = 12345 >>> d {'name': 'AA', 'shares': 75, 'price':32.2, 'date': (6, 11, 2007), 'account': 12345} >>> Ejercicio 2.3: Otras operaciones adicionales Si convierte un diccionario en una lista, obtendr\u00e1 todas sus claves: >>> list(d) ['name', 'shares', 'price', 'date', 'account'] >>> De manera similar, si usa la fordeclaraci\u00f3n para iterar en un diccionario, obtendr\u00e1 las claves: >>> for k in d: print('k =', k) k = name k = shares k = price k = date k = account >>> Pruebe esta variante que realiza una b\u00fasqueda al mismo tiempo: >>> for k in d: print(k, '=', d[k]) name = AA shares = 75 price = 32.2 date = (6, 11, 2007) account = 12345 >>> Tambi\u00e9n puede obtener todas las claves utilizando el m\u00e9todo keys() : >>> keys = d.keys() >>> keys dict_keys(['name', 'shares', 'price', 'date', 'account']) >>> keys()es un poco inusual porque devuelve un dict_keysobjeto especial . Se trata de una superposici\u00f3n del diccionario original que siempre le proporciona las claves actuales, incluso si el diccionario cambia. Por ejemplo, intente esto: >>> del d['account'] >>> keys dict_keys(['name', 'shares', 'price', 'date']) >>> Observe cuidadosamente que 'account'desapareci\u00f3 keysaunque no volvi\u00f3 a llamar d.keys(). Una forma m\u00e1s elegante de trabajar con claves y valores juntos es utilizar el items()m\u00e9todo. Esto te da (key, value)tuplas: >>> items = d.items() >>> items dict_items([('name', 'AA'), ('shares', 75), ('price', 32.2), ('date', (6, 11, 2007))]) >>> for k, v in d.items(): print(k, '=', v) name = AA shares = 75 price = 32.2 date = (6, 11, 2007) >>> Si tiene tuplas como items, puede crear un diccionario usando la dict()funci\u00f3n. Intentalo: >>> items dict_items([('name', 'AA'), ('shares', 75), ('price', 32.2), ('date', (6, 11, 2007))]) >>> d = dict(items) >>> d {'name': 'AA', 'shares': 75, 'price':32.2, 'date': (6, 11, 2007)} >>> 2.2 Contenedores 2.2.1: Visi\u00f3n General Los programas a menudo tienen que trabajar con muchos objetos. Una cartera de acciones Una tabla de precios de acciones Hay tres opciones principales para usar. Listas. Datos ordenados. Diccionarios. Datos desordenados. Conjuntos. Colecci\u00f3n desordenada de art\u00edculos \u00fanicos.* 2.2.2: Listas como un Contenedor Utilice una lista cuando sea importante el orden de los datos. Recuerde que las listas pueden contener cualquier tipo de objeto. Por ejemplo, una lista de tuplas. portfolio = [ ('GOOG', 100, 490.1), ('IBM', 50, 91.3), ('CAT', 150, 83.44) ] portfolio[0] # ('GOOG', 100, 490.1) portfolio[2] # ('CAT', 150, 83.44) 2.2.3: Construcci\u00f3n de una lista Construyendo una lista desde cero. records = [] # Initial empty list # Use .append() to add more items records.append(('GOOG', 100, 490.10)) records.append(('IBM', 50, 91.3)) ... Un ejemplo al leer registros de un archivo. records = [] # Lista vac\u00eda de inicio with open('Data/portfolio.csv', 'rt') as f: next(f) # Nos saltamos el encabezado for line in f: row = line.split(',') records.append((row[0], int(row[1]), float(row[2]))) 2.2.4: Diccionarios como contenedores Los diccionarios son \u00fatiles si desea b\u00fasquedas aleatorias r\u00e1pidas (por nombre de clave). Por ejemplo, un diccionario de precios de acciones: prices = { 'GOOG': 513.25, 'CAT': 87.22, 'IBM': 93.37, 'MSFT': 44.12 } Aqu\u00ed hay algunas b\u00fasquedas simples: >>> prices['IBM'] 93.37 >>> prices['GOOG'] 513.25 >>> 2.2.5: Construcci\u00f3n de un diccionario Ejemplo de construcci\u00f3n de un dictado desde cero. prices = {} # Initial empty dict # Insert new items prices['GOOG'] = 513.25 prices['CAT'] = 87.22 prices['IBM'] = 93.37 Un ejemplo que completa el dict a partir del contenido de un archivo. prices = {} # Initial empty dict with open('Data/prices.csv', 'rt') as f: for line in f: row = line.split(',') prices[row[0]] = float(row[1]) Nota: Si prueba esto en el Data/prices.csvarchivo, encontrar\u00e1 que casi funciona; hay una l\u00ednea en blanco al final que hace que se bloquee. Necesitar\u00e1 encontrar alguna forma de modificar el c\u00f3digo para tener en cuenta eso (vea el ejercicio 2.6). 2.2.6: B\u00fasquedas de diccionario Puede probar la existencia de una clave. if key in d: # YES else: # NO Puede buscar un valor que podr\u00eda no existir y proporcionar un valor predeterminado en caso de que no exista. name = d.get(key, default) Un ejemplo: >>> prices.get('IBM', 0.0) 93.37 >>> prices.get('SCOX', 0.0) 0.0 >>> 2.2.7: Claves compuestas Casi cualquier tipo de valor se puede utilizar como clave de diccionario en Python. Una clave de diccionario debe ser de un tipo que sea inmutable. Por ejemplo, tuplas: holidays = { (1, 1) : 'New Years', (3, 14) : 'Pi day', (9, 13) : \"Programmer's day\", } Luego para acceder: >>> holidays[3, 14] 'Pi day' >>> Ni una lista, un conjunto ni otro diccionario pueden servir como clave de diccionario, porque las listas y los diccionarios son mutables. 2.2.8: Conjuntos (Sets) Los conjuntos son una colecci\u00f3n de elementos \u00fanicos desordenados. tech_stocks = { 'IBM','AAPL','MSFT' } # alternativamente: tech_stocks = set(['IBM', 'AAPL', 'MSFT']) Los conjuntos son \u00fatiles para las pruebas de pertenencia. >>> tech_stocks set(['AAPL', 'IBM', 'MSFT']) >>> 'IBM' in tech_stocks True >>> 'FB' in tech_stocks False >>> Los conjuntos tambi\u00e9n son \u00fatiles para la eliminaci\u00f3n de duplicados. names = ['IBM', 'AAPL', 'GOOG', 'IBM', 'GOOG', 'YHOO'] unique = set(names) # unique = set(['IBM', 'AAPL','GOOG','YHOO']) Operaciones de conjuntos adicionales: names.add('CAT') # Add an item names.remove('YHOO') # Remove an item s1 | s2 # Set union s1 & s2 # Set intersection s1 - s2 # Set difference 2.2.9: Ejercicios En estos ejercicios, comenzar\u00e1 a crear uno de los programas principales que se utilizar\u00e1n durante el resto de este curso. Haga su trabajo en el archivo Work/report.py . Ejercicio 2.4: Una lista de tuplas El archivo Data/portfolio.csvcontiene una lista de acciones en una cartera. En el ejercicio 1.30 , escribi\u00f3 una funci\u00f3n portfolio_cost(filename)que ley\u00f3 este archivo y realiz\u00f3 un c\u00e1lculo simple. Tu c\u00f3digo deber\u00eda haberse visto as\u00ed: # pcost.py import csv def portfolio_cost(filename): '''Computes the total cost (shares*price) of a portfolio file''' total_cost = 0.0 with open(filename, 'rt') as f: rows = csv.reader(f) headers = next(rows) for row in rows: nshares = int(row[1]) price = float(row[2]) total_cost += nshares * price return total_cost Usando este c\u00f3digo como una gu\u00eda aproximada, cree un nuevo archivo report.py. En ese archivo, defina una funci\u00f3n read_portfolio(filename)que abra un archivo de cartera determinado y lo lea en una lista de tuplas. Para hacer esto, va a realizar algunas modificaciones menores al c\u00f3digo anterior. Primero, en lugar de definir total_cost = 0, crear\u00e1 una variable que inicialmente se establece en una lista vac\u00eda. Por ejemplo: portfolio = [] A continuaci\u00f3n, en lugar de sumar el costo total, convertir\u00e1 cada fila en una tupla exactamente como lo hizo en el \u00faltimo ejercicio y la agregar\u00e1 a esta lista. Por ejemplo: for row in rows: holding = (row[0], int(row[1]), float(row[2])) portfolio.append(holding) Finalmente, devolver\u00e1 la portfoliolista resultante . Experimente con su funci\u00f3n de forma interactiva (solo un recordatorio de que para hacer esto, primero debe ejecutar el report.pyprograma en el int\u00e9rprete): Sugerencia: Haga uso de -i al ejecutar el archivo en la terminal, e.g. $ python -i archivo.py >>> portfolio = read_portfolio('Data/portfolio.csv') >>> portfolio [('AA', 100, 32.2), ('IBM', 50, 91.1), ('CAT', 150, 83.44), ('MSFT', 200, 51.23), ('GE', 95, 40.37), ('MSFT', 50, 65.1), ('IBM', 100, 70.44)] >>> >>> portfolio[0] ('AA', 100, 32.2) >>> portfolio[1] ('IBM', 50, 91.1) >>> portfolio[1][1] 50 >>> total = 0.0 >>> for s in portfolio: total += s[1] * s[2] >>> print(total) 44671.15 >>> Esta lista de tuplas que ha creado es muy similar a una matriz 2-D. Por ejemplo, puede acceder a una columna y una fila espec\u00edficas mediante una b\u00fasqueda como portfolio[row][column]d\u00f3nde rowy columnson n\u00fameros enteros. Dicho esto, tambi\u00e9n puede reescribir el \u00faltimo ciclo for usando una declaraci\u00f3n como esta: >>> total = 0.0 >>> for name, shares, price in portfolio: total += shares*price >>> print(total) 44671.15 >>> Ejercicio 2.5: Lista de diccionarios Tome la funci\u00f3n que escribi\u00f3 en el ejercicio 2.4 y modif\u00edquela para representar cada acci\u00f3n de la cartera con un diccionario en lugar de una tupla. En este diccionario, use los nombres de campo de \"nombre\", \"acciones\" y \"precio\" para representar las diferentes columnas en el archivo de entrada. Experimente con esta nueva funci\u00f3n de la misma manera que lo hizo en el ejercicio 2.4. >>> portfolio = read_portfolio('Data/portfolio.csv') >>> portfolio [{'name': 'AA', 'shares': 100, 'price': 32.2}, {'name': 'IBM', 'shares': 50, 'price': 91.1}, {'name': 'CAT', 'shares': 150, 'price': 83.44}, {'name': 'MSFT', 'shares': 200, 'price': 51.23}, {'name': 'GE', 'shares': 95, 'price': 40.37}, {'name': 'MSFT', 'shares': 50, 'price': 65.1}, {'name': 'IBM', 'shares': 100, 'price': 70.44}] >>> portfolio[0] {'name': 'AA', 'shares': 100, 'price': 32.2} >>> portfolio[1] {'name': 'IBM', 'shares': 50, 'price': 91.1} >>> portfolio[1]['shares'] 50 >>> total = 0.0 >>> for s in portfolio: total += s['shares']*s['price'] >>> print(total) 44671.15 >>> Aqu\u00ed, notar\u00e1 que se accede a los diferentes campos para cada entrada mediante nombres de clave en lugar de n\u00fameros de columna num\u00e9ricos. Esto se prefiere a menudo porque el c\u00f3digo resultante es m\u00e1s f\u00e1cil de leer m\u00e1s tarde. Ver diccionarios y listas de gran tama\u00f1o puede resultar complicado. Para limpiar la salida para la depuraci\u00f3n, considere usar la funci\u00f3n pprint . >>> from pprint import pprint >>> pprint(portfolio) [{'name': 'AA', 'price': 32.2, 'shares': 100}, {'name': 'IBM', 'price': 91.1, 'shares': 50}, {'name': 'CAT', 'price': 83.44, 'shares': 150}, {'name': 'MSFT', 'price': 51.23, 'shares': 200}, {'name': 'GE', 'price': 40.37, 'shares': 95}, {'name': 'MSFT', 'price': 65.1, 'shares': 50}, {'name': 'IBM', 'price': 70.44, 'shares': 100}] >>> Ejercicio 2.6: Diccionarios como contenedor Un diccionario es una forma \u00fatil de realizar un seguimiento de los elementos en los que desea buscar elementos utilizando un \u00edndice que no sea un n\u00famero entero. En el shell de Python, intente jugar con un diccionario: >>> prices = { } >>> prices['IBM'] = 92.45 >>> prices['MSFT'] = 45.12 >>> prices ... look at the result ... >>> prices['IBM'] 92.45 >>> prices['AAPL'] ... look at the result ... >>> 'AAPL' in prices False >>> El archivo Data/prices.csvcontiene una serie de l\u00edneas con precios de acciones. El archivo se parece a esto: \"AA\",9.22 \"AXP\",24.85 \"BA\",44.85 \"BAC\",11.27 \"C\",3.72 ... Escriba una funci\u00f3n read_prices(filename)que lea un conjunto de precios como este en un diccionario donde las claves del diccionario son los nombres de las acciones y los valores en el diccionario son los precios de las acciones. Para hacer esto, comience con un diccionario vac\u00edo y comience a insertar valores en \u00e9l tal como lo hizo anteriormente. Sin embargo, ahora est\u00e1 leyendo los valores de un archivo. Usaremos esta estructura de datos para buscar r\u00e1pidamente el precio de un nombre de acci\u00f3n determinado. Algunos peque\u00f1os consejos que necesitar\u00e1 para esta parte. Primero, aseg\u00farese de usar el csvm\u00f3dulo tal como lo hizo antes, no es necesario reinventar la rueda aqu\u00ed. >>> import csv >>> f = open('Data/prices.csv', 'r') >>> rows = csv.reader(f) >>> for row in rows: print(row) ['AA', '9.22'] ['AXP', '24.85'] ... [] >>> La otra peque\u00f1a complicaci\u00f3n es que el Data/prices.csvarchivo puede tener algunas l\u00edneas en blanco. Observe c\u00f3mo la \u00faltima fila de datos de arriba es una lista vac\u00eda, lo que significa que no hab\u00eda datos presentes en esa l\u00ednea. Existe la posibilidad de que esto provoque la muerte de su programa con una excepci\u00f3n. Utilice las declaraciones tryy exceptpara detectar esto seg\u00fan corresponda. Pensamiento: \u00bfser\u00eda mejor protegerse contra datos incorrectos con una ifdeclaraci\u00f3n -en su lugar? Una vez que haya escrito su funci\u00f3n read_prices(), pru\u00e9bela de forma interactiva para asegurarse de que funcione: >>> prices = read_prices('Data/prices.csv') >>> prices['IBM'] 106.28 >>> prices['MSFT'] 20.89 >>> La otra peque\u00f1a complicaci\u00f3n es que el archivo Data/prices.csv puede tener algunas l\u00edneas en blanco. Observe c\u00f3mo la \u00faltima fila de datos de arriba es una lista vac\u00eda, lo que significa que no hab\u00eda datos presentes en esa l\u00ednea. Existe la posibilidad de que esto provoque la muerte de su programa con una excepci\u00f3n. Utilice las declaraciones tryy exceptpara detectar esto seg\u00fan corresponda. Pensamiento: \u00bfser\u00eda mejor protegerse contra datos incorrectos con una ifdeclaraci\u00f3n -en su lugar? Una vez que haya escrito su funci\u00f3n read_prices() , pru\u00e9bela de forma interactiva para asegurarse de que funcione: >>> prices = read_prices('Data/prices.csv') >>> prices['IBM'] 106.28 >>> prices['MSFT'] 20.89 >>> Ejercicio 2.7: Descubra se puede jubilar Complete este trabajo agregando algunas declaraciones adicionales a su programa report.py que calculen ganancias / p\u00e9rdidas. Estas declaraciones deben tomar la lista de acciones del ejercicio 2.5 y el diccionario de precios del ejercicio 2.6 y calcular el valor actual de la cartera junto con la ganancia / p\u00e9rdida. 2.3 Salida formateada Esta secci\u00f3n es una peque\u00f1a digresi\u00f3n, pero cuando trabaja con datos, a menudo desea producir resultados estructurados (tablas, etc.). Por ejemplo: Name Shares Price ---------- ---------- ----------- AA 100 32.20 IBM 50 91.10 CAT 150 83.44 MSFT 200 51.23 GE 95 40.37 MSFT 50 65.10 IBM 100 70.44 2.3.1: Formateo de cadena Una forma de formatear cadenas en Python 3.6+ es con f-strings. >>> name = 'IBM' >>> shares = 100 >>> price = 91.1 >>> f'{name:>10s} {shares:>10d} {price:>10.2f}' ' IBM 100 91.10' >>> La pieza {expression:format} se reemplaza. Se usa com\u00fanmente con print. print(f'{name:>10s} {shares:>10d} {price:>10.2f}') 2.3.2: C\u00f3digos de formato C\u00f3digos de formato (despu\u00e9s de que el :interior de la {}) son similares a C printf(). Los c\u00f3digos comunes incluyen: d Decimal integer b Binary integer x Hexadecimal integer f Float as [-]m.dddddd e Float as [-]m.dddddde+-xx g Float, but selective use of E notation s String c Character (from integer) Los modificadores comunes ajustan el ancho del campo y la precisi\u00f3n decimal. Esta es una lista parcial: :>10d Integer right aligned in 10-character field :<10d Integer left aligned in 10-character field :^10d Integer centered in 10-character field :0.2f Float with 2 digit precision 2.3.3: Formateo de diccionarios Puede utilizar el format_map()m\u00e9todo para aplicar formato de cadena a un diccionario de valores: >>> s = { 'name': 'IBM', 'shares': 100, 'price': 91.1 } >>> '{name:>10s} {shares:10d} {price:10.2f}'.format_map(s) ' IBM 100 91.10' >>> Utiliza los mismos c\u00f3digos que f-stringspero toma los valores del diccionario suministrado. 2.3.4: El m\u00e9todo format() Existe un m\u00e9todo format()que puede aplicar formato a argumentos o argumentos de palabras clave. >>> '{name:>10s} {shares:10d} {price:10.2f}'.format(name='IBM', shares=100, price=91.1) ' IBM 100 91.10' >>> '{:10s} {:10d} {:10.2f}'.format('IBM', 100, 91.1) ' IBM 100 91.10' >>> Francamente, format()es un poco prolijo. Prefiero las cuerdas f. 2.3.5: Formateo al estilo C Tambi\u00e9n puede utilizar el operador de formato % . >>> 'The value is %d' % 3 'The value is 3' >>> '%5d %-5d %10d' % (3,4,5) ' 3 4 5' >>> '%0.2f' % (3.1415926,) '3.14' Esto requiere un solo elemento o una tupla a la derecha. C\u00f3digos de formato son el modelo de la C printf() tambi\u00e9n. Nota: Este es el \u00fanico formato disponible en cadenas de bytes. >>> b'%s has %n messages' % (b'Dave', 37) b'Dave has 37 messages' >>> 2.3.6: Ejercicios Ejercicio 2.8: Como formatear numeros Un problema com\u00fan al imprimir n\u00fameros es especificar el n\u00famero de decimales. Una forma de solucionar este problema es usar f-strings. Prueba estos ejemplos: >>> value = 42863.1 >>> print(value) 42863.1 >>> print(f'{value:0.4f}') 42863.1000 >>> print(f'{value:>16.2f}') 42863.10 >>> print(f'{value:<16.2f}') 42863.10 >>> print(f'{value:*>16,.2f}') *******42,863.10 >>> La documentaci\u00f3n completa sobre los c\u00f3digos de formato utilizados para las cadenas f se puede encontrar aqu\u00ed . El formateo tambi\u00e9n se realiza a veces utilizando el operador % de cadenas. >>> print('%0.4f' % value) 42863.1000 >>> print('%16.2f' % value) 42863.10 >>> La documentaci\u00f3n sobre varios c\u00f3digos utilizados con %se puede encontrar aqu\u00ed. Aunque se usa com\u00fanmente con print, el formato de cadena no est\u00e1 ligado a la impresi\u00f3n. Si desea guardar una cadena formateada. Simplemente as\u00edgnelo a una variable. >>> f = '%0.4f' % value >>> f '42863.1000' >>> Ejercicio 2.9: Coleccionando data En el ejercicio 2.7, escribi\u00f3 un programa llamado report.pyque calcul\u00f3 la ganancia / p\u00e9rdida de una cartera de acciones. En este ejercicio, comenzar\u00e1 a modificarlo para producir una tabla como esta: Name Shares Price Change ---------- ---------- ---------- ---------- AA 100 9.22 -22.98 IBM 50 106.28 15.18 CAT 150 35.46 -47.98 MSFT 200 20.89 -30.34 GE 95 13.48 -26.89 MSFT 50 20.89 -44.21 IBM 100 106.28 35.84 En este informe, \"Precio\" es el precio actual de la acci\u00f3n de la acci\u00f3n y \"Cambio\" es el cambio en el precio de la acci\u00f3n desde el precio de compra inicial. Para generar el informe anterior, primero querr\u00e1 recopilar todos los datos que se muestran en la tabla. Escriba una funci\u00f3n make_report() que tome una lista de existencias y un diccionario de precios como entrada y devuelva una lista de tuplas que contenga las filas de la tabla anterior. Agregue esta funci\u00f3n a su report.pyarchivo. As\u00ed es como deber\u00eda funcionar si lo prueba de forma interactiva: >>> portfolio = read_portfolio('Data/portfolio.csv') >>> prices = read_prices('Data/prices.csv') >>> report = make_report(portfolio, prices) >>> for r in report: print(r) ('AA', 100, 9.22, -22.980000000000004) ('IBM', 50, 106.28, 15.180000000000007) ('CAT', 150, 35.46, -47.98) ('MSFT', 200, 20.89, -30.339999999999996) ('GE', 95, 13.48, -26.889999999999997) ... >>> Ejercicio 2.10: Imprimiendo una tabla formateada Rehaga el bucle for del ejercicio 2.9, pero cambie la instrucci\u00f3n print para formatear las tuplas. >>> for r in report: print('%10s %10d %10.2f %10.2f' % r) AA 100 9.22 -22.98 IBM 50 106.28 15.18 CAT 150 35.46 -47.98 MSFT 200 20.89 -30.34 ... >>> Tambi\u00e9n puede expandir los valores y usar f-strings. Por ejemplo: >>> for name, shares, price, change in report: print(f'{name:>10s} {shares:>10d} {price:>10.2f} {change:>10.2f}') AA 100 9.22 -22.98 IBM 50 106.28 15.18 CAT 150 35.46 -47.98 MSFT 200 20.89 -30.34 ... >>> Tome las declaraciones anteriores y agr\u00e9guelas a su report.pyprograma. Haga que su programa tome la salida de la funci\u00f3n make_report() e imprima una tabla bien formateada como se muestra. Ejercicio 2.11: Agregando algunos encabezados Suponga que tiene una tupla de nombres de encabezado como este: headers = ('Name', 'Shares', 'Price', 'Change') Agregue c\u00f3digo a su programa que toma la tupla de encabezados anterior y crea una cadena donde cada nombre de encabezado est\u00e1 alineado a la derecha en un campo de 10 caracteres de ancho y cada campo est\u00e1 separado por un solo espacio. ' Name Shares Price Change' Escriba c\u00f3digo que tome los encabezados y cree la cadena de separaci\u00f3n entre los encabezados y los datos que siguen. Esta cadena es solo un grupo de caracteres \"-\" debajo de cada nombre de campo. Por ejemplo: '---------- ---------- ---------- -----------' Cuando haya terminado, su programa deber\u00eda producir la tabla que se muestra en la parte superior de este ejercicio. Name Shares Price Change ---------- ---------- ---------- ---------- AA 100 9.22 -22.98 IBM 50 106.28 15.18 CAT 150 35.46 -47.98 MSFT 200 20.89 -30.34 GE 95 13.48 -26.89 MSFT 50 20.89 -44.21 IBM 100 106.28 35.84 Ejercicio 2.12: Un reto \u00bfC\u00f3mo modificar\u00eda su c\u00f3digo para que el precio incluya el s\u00edmbolo de moneda ($) y la salida se vea as\u00ed: Name Shares Price Change ---------- ---------- ---------- ---------- AA 100 $9.22 -22.98 IBM 50 $106.28 15.18 CAT 150 $35.46 -47.98 MSFT 200 $20.89 -30.34 GE 95 $13.48 -26.89 MSFT 50 $20.89 -44.21 IBM 100 $106.28 35.84 2.4 Secuencias 2.4.1: Tipos de secuencias Python tiene tres tipos de datos de secuencia . Cuerda: 'Hello' . Una cadena es una secuencia de caracteres. Lista: [1, 4, 5] . Tupla: ('GOOG', 100, 490.1) . Todas las secuencias est\u00e1n ordenadas, indexadas por n\u00fameros enteros y tienen una longitud. a = 'Hello' # String b = [1, 4, 5] # List c = ('GOOG', 100, 490.1) # Tuple # Indexed order a[0] # 'H' b[-1] # 5 c[1] # 100 # Length of sequence len(a) # 5 len(b) # 3 len(c) # 3 Las secuencias pueden ser replicados: s * n . >>> a = 'Hello' >>> a * 3 'HelloHelloHello' >>> b = [1, 2, 3] >>> b * 2 [1, 2, 3, 1, 2, 3] >>> Secuencias del mismo tipo pueden ser concatenados: s + t . >>> a = (1, 2, 3) >>> b = (4, 5) >>> a + b (1, 2, 3, 4, 5) >>> >>> c = [1, 5] >>> a + c Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: can only concatenate tuple (not \"list\") to tuple 2.4.2: Cortar Cortar significa tomar una subsecuencia de una secuencia. La sintaxis es s[start:end] . Donde start y end son los \u00edndices de la subsecuencia que desea. a = [0,1,2,3,4,5,6,7,8] a[2:5] # [2,3,4] a[-5:] # [4,5,6,7,8] a[:3] # [0,1,2] \u00cdndices start y end deben ser n\u00fameros enteros. Las rebanadas no incluyen el valor final. Es como un intervalo medio abierto de matem\u00e1ticas. Si se omiten los \u00edndices, por defecto van al principio o al final de la lista. 2.4.3: Reasignaci\u00f3n de cortes En las listas, los sectores se pueden reasignar y eliminar. # Reasginaci\u00f3n a = [0,1,2,3,4,5,6,7,8] a[2:4] = [10,11,12] # [0,1,10,11,12,4,5,6,7,8] Nota: No es necesario que el segmento reasignado tenga la misma longitud. # Remoci\u00f3n a = [0,1,2,3,4,5,6,7,8] del a[2:4] # [0,1,4,5,6,7,8] 2.4.4: Secuencia de reducciones Existen algunas funciones comunes para reducir una secuencia a un solo valor. >>> s = [1, 2, 3, 4] >>> sum(s) 10 >>> min(s) 1 >>> max(s) 4 >>> t = ['Hello', 'World'] >>> max(t) 'World' >>> 2.4.5: Iteracion sobre una secuencia El bucle for itera sobre los elementos en una secuencia. >>> s = [1, 4, 9, 16] >>> for i in s: ... print(i) ... 1 4 9 16 >>> En cada iteraci\u00f3n del ciclo, obtienes un nuevo elemento con el que trabajar. Este nuevo valor se coloca en la variable de iteraci\u00f3n. En este ejemplo, la variable de iteraci\u00f3n es x : for x in s: # `x` es una variable de iteraci\u00f3n ...declaraciones En cada iteraci\u00f3n, el valor anterior de la variable de iteraci\u00f3n se sobrescribe (si lo hubiera). Una vez finalizado el ciclo, la variable retiene el \u00faltimo valor. 2.4.6: La declaraci\u00f3n break Puede usar la break declaraci\u00f3n para salir de un ciclo antes de tiempo. for name in namelist: if name == 'Jake': break ... ... declaraciones Cuando la break instrucci\u00f3n se ejecuta, sale del ciclo y pasa al siguiente statements . La declaraci\u00f3n break solo se aplica al bucle m\u00e1s interno. Si este bucle est\u00e1 dentro de otro bucle, no romper\u00e1 el bucle exterior. 2.4.7: La declaraci\u00f3n continue Para omitir un elemento y pasar al siguiente, use la continue declaraci\u00f3n. for line in lines: if line == '\\n': # Skip blank lines continue # More statements ... Esto es \u00fatil cuando el elemento actual no es de inter\u00e9s o debe ignorarse en el procesamiento. 2.4.8: Ciclando sobre enteros Si necesita contar, use range() . for i in range(100): # i = 0,1,...,99 La sintaxis es range([start,] end [,step]) for i in range(100): # i = 0,1,...,99 for j in range(10,20): # j = 10,11,..., 19 for k in range(10,50,2): # k = 10,12,...,48 # Note como cuenta en pasos de 2, no 1. El valor final nunca se incluye. Refleja el comportamiento de los cortes. start es opcional. Por defecto 0 . step es opcional. Por defecto 1 . range() calcula los valores seg\u00fan sea necesario. En realidad, no almacena una gran variedad de n\u00fameros. 2.4.9: La funci\u00f3n enumerate() La enumerate funci\u00f3n agrega un valor de contador adicional a la iteraci\u00f3n. names = ['Elwood', 'Jake', 'Curtis'] for i, name in enumerate(names): # Cicla con i = 0, name = 'Elwood' # i = 1, name = 'Jake' # i = 2, name = 'Curtis' La forma general es enumerate(sequence [, start = 0]) . start es opcional. Un buen ejemplo de uso enumerate() es el seguimiento de los n\u00fameros de l\u00ednea mientras se lee un archivo: with open(filename) as f: for lineno, line in enumerate(f, start=1): ... Al final, enumerate es solo un buen atajo para: i = 0 for x in s: statements i += 1 Usar enumerate es escribir menos y se ejecuta un poco m\u00e1s r\u00e1pido. 2.4.10: for y tuplas Puede iterar con m\u00faltiples variables de iteraci\u00f3n. points = [ (1, 4),(10, 40),(23, 14),(5, 6),(7, 8) ] for x, y in points: # Cicla con x = 1, y = 4 # x = 10, y = 40 # x = 23, y = 14 # ... Cuando se utilizan varias variables, cada tupla se descompone en un conjunto de variables de iteraci\u00f3n. El n\u00famero de variables debe coincidir con el n\u00famero de elementos de cada tupla. 2.4.11: La funci\u00f3n zip() La zip funci\u00f3n toma m\u00faltiples secuencias y crea un iterador que las combina. columns = ['name', 'shares', 'price'] values = ['GOOG', 100, 490.1 ] pairs = zip(columns, values) # ('name','GOOG'), ('shares',100), ('price',490.1) Para obtener el resultado, debes iterar. Puede utilizar varias variables para descomprimir las tuplas como se mostr\u00f3 anteriormente. for column, value in pairs: ... Un uso com\u00fan de zip es crear pares clave / valor para construir diccionarios. d = dict(zip(columns, values)) 2.4.12: Ejercicios Ejercicio 2.13: Contar Pruebe algunos ejemplos b\u00e1sicos de conteo: >>> for n in range(10): # Cuenta 0 ... 9 print(n, end=' ') 0 1 2 3 4 5 6 7 8 9 >>> for n in range(10,0,-1): # Cuenta 10 ... 1 print(n, end=' ') 10 9 8 7 6 5 4 3 2 1 >>> for n in range(0,10,2): # Cuenta 0, 2, ... 8 print(n, end=' ') 0 2 4 6 8 >>> Ejercicio 2.14: Mas operaciones sobre secuencias Experimente interactivamente con algunas de las operaciones de reducci\u00f3n de secuencia. >>> data = [4, 9, 1, 25, 16, 100, 49] >>> min(data) 1 >>> max(data) 100 >>> sum(data) 204 >>> Intente recorrer los datos. >>> for x in data: print(x) 4 9 ... >>> for n, x in enumerate(data): print(n, x) 0 4 1 9 2 1 ... >> A veces, los principiantes usan la for instrucci\u00f3n, len() y range() en alg\u00fan tipo de fragmento de c\u00f3digo horrible que parece surgido de las profundidades de un programa C oxidado. >>> for n in range(len(data)): print(data[n]) 4 9 1 ... >>> \u00a1No hagas eso! Leerlo no solo hace sangrar los ojos de todos, es ineficiente con la memoria y funciona mucho m\u00e1s lento. Simplemente use un for bucle normal si desea iterar sobre los datos. \u00daselo enumerate() si necesita el \u00edndice por alguna raz\u00f3n. Ejercicio 2.15: Un ejemplo pr\u00e1ctico de enumerate() Recuerde que el archivo Data/missing.csv contiene datos para una cartera de acciones, pero tiene algunas filas con datos faltantes. Usando enumerate() , modifique su pcost.py programa para que imprima un n\u00famero de l\u00ednea con el mensaje de advertencia cuando encuentre una entrada incorrecta. >>> cost = portfolio_cost('Data/missing.csv') Row 4: Couldn't convert: ['MSFT', '', '51.23'] Row 7: Couldn't convert: ['IBM', '', '70.44'] >>> Para hacer esto, necesitar\u00e1 cambiar algunas partes de su c\u00f3digo. ... for rowno, row in enumerate(rows, start=1): try: ... except ValueError: print(f'Fila {rowno}: Mala fila: {row}') Ejercicio 2.16: Usando la funci\u00f3n zip() En el archivo Data/portfolio.csv , la primera l\u00ednea contiene encabezados de columna. En todo el c\u00f3digo anterior, los hemos estado descartando. >>> f = open('Data/portfolio.csv') >>> rows = csv.reader(f) >>> headers = next(rows) >>> headers ['name', 'shares', 'price'] >>> Sin embargo, \u00bfqu\u00e9 pasar\u00eda si pudieras usar los encabezados para algo \u00fatil? Aqu\u00ed es donde la zip() funci\u00f3n entra en escena. Primero intente esto para emparejar los encabezados del archivo con una fila de datos: >>> row = next(rows) >>> row ['AA', '100', '32.20'] >>> list(zip(headers, row)) [ ('name', 'AA'), ('shares', '100'), ('price', '32.20') ] >>> Observe c\u00f3mo se zip() emparejaron los encabezados de columna con los valores de columna. Hemos utilizado list() aqu\u00ed para convertir el resultado en una lista para que pueda verlo. Normalmente, zip() crea un iterador que debe consumir un bucle for. Este emparejamiento es un paso intermedio para crear un diccionario. Ahora prueba esto: >>> record = dict(zip(headers, row)) >>> record {'price': '32.20', 'name': 'AA', 'shares': '100'} >>> Esta transformaci\u00f3n es uno de los trucos m\u00e1s \u00fatiles que debe conocer al procesar muchos archivos de datos. Por ejemplo, suponga que desea que el pcost.py programa funcione con varios archivos de entrada, pero sin tener en cuenta el n\u00famero de columna real donde aparecen el nombre, las acciones y el precio. Modifique la portfolio_cost() funci\u00f3n pcost.py para que se vea as\u00ed: # pcost.py def portfolio_cost(filename): ... for rowno, row in enumerate(rows, start=1): record = dict(zip(headers, row)) try: nshares = int(record['shares']) price = float(record['price']) total_cost += nshares * price except ValueError: # Esto atrapa errores de conversi\u00f3n a int() y float() print(f'Fila {rowno}: Mala fila: {row}') ... Ahora, pruebe su funci\u00f3n en un archivo de datos completamente diferente Data/portfoliodate.csv que se ve as\u00ed: name,date,time,shares,price \"AA\",\"6/11/2007\",\"9:50am\",100,32.20 \"IBM\",\"5/13/2007\",\"4:20pm\",50,91.10 \"CAT\",\"9/23/2006\",\"1:30pm\",150,83.44 \"MSFT\",\"5/17/2007\",\"10:30am\",200,51.23 \"GE\",\"2/1/2006\",\"10:45am\",95,40.37 \"MSFT\",\"10/31/2006\",\"12:05pm\",50,65.10 \"IBM\",\"7/9/2006\",\"3:15pm\",100,70.44 >>> portfolio_cost('Data/portfoliodate.csv') 44671.15 >>> Si lo hizo bien, ver\u00e1 que su programa a\u00fan funciona a pesar de que el archivo de datos tiene un formato de columna completamente diferente al anterior. \u00a1Eso es genial! El cambio realizado aqu\u00ed es sutil, pero significativo. En lugar de portfolio_cost() estar codificado para leer un solo formato de archivo fijo, la nueva versi\u00f3n lee cualquier archivo CSV y selecciona los valores de inter\u00e9s. Siempre que el archivo tenga las columnas requeridas, el c\u00f3digo funcionar\u00e1. Modifique el report.py programa que escribi\u00f3 en la Secci\u00f3n 2.3 para que utilice la misma t\u00e9cnica para seleccionar encabezados de columna. Intente ejecutar el report.py programa en el Data/portfoliodate.csv archivo y vea que produce la misma respuesta que antes. Ejercicio 2.17: Invirtiendo un diccionario Un diccionario asigna claves a valores. Por ejemplo, un diccionario de precios de acciones. >>> prices = { 'GOOG': 490.1, 'AA': 23.45, 'IBM': 91.1, 'MSFT': 34.23 } >>> Si usa el m\u00e9todo items() , puede obtener pares (key,value) : >>> prices.items() dict_items([('GOOG', 490.1), ('AA', 23.45), ('IBM', 91.1), ('MSFT', 34.23)]) >>> Sin embargo, \u00bfqu\u00e9 pasar\u00eda si quisiera obtener una lista de pares (value, key) ? Sugerencia: use zip() . >>> pricelist = list(zip(prices.values(),prices.keys())) >>> pricelist [(490.1, 'GOOG'), (23.45, 'AA'), (91.1, 'IBM'), (34.23, 'MSFT')] >>> \u00bfPor qu\u00e9 har\u00edas esto? Por un lado, le permite realizar ciertos tipos de procesamiento de datos en los datos del diccionario. >>> min(pricelist) (23.45, 'AA') >>> max(pricelist) (490.1, 'GOOG') >>> sorted(pricelist) [(23.45, 'AA'), (34.23, 'MSFT'), (91.1, 'IBM'), (490.1, 'GOOG')] >>> Esto tambi\u00e9n ilustra una caracter\u00edstica importante de las tuplas. Cuando se usan en comparaciones, las tuplas se comparan elemento por elemento comenzando con el primer elemento. Similar a c\u00f3mo se comparan las cadenas car\u00e1cter por car\u00e1cter. zip() se utiliza a menudo en situaciones como esta en las que necesita emparejar datos de diferentes lugares. Por ejemplo, emparejar los nombres de las columnas con los valores de las columnas para crear un diccionario de valores con nombre. Tenga en cuenta que zip() no se limita a pares. Por ejemplo, puede usarlo con cualquier n\u00famero de listas de entrada: >>> a = [1, 2, 3, 4] >>> b = ['w', 'x', 'y', 'z'] >>> c = [0.2, 0.4, 0.6, 0.8] >>> list(zip(a, b, c)) [(1, 'w', 0.2), (2, 'x', 0.4), (3, 'y', 0.6), (4, 'z', 0.8))] >>> Adem\u00e1s, tenga en cuenta que zip() se detiene una vez que se agota la secuencia de entrada m\u00e1s corta. >>> a = [1, 2, 3, 4, 5, 6] >>> b = ['x', 'y', 'z'] >>> list(zip(a,b)) [(1, 'x'), (2, 'y'), (3, 'z')] >>> 2.5 El modulo collections El collections m\u00f3dulo proporciona una serie de objetos \u00fatiles para el manejo de datos. Esta parte presenta brevemente algunas de estas caracter\u00edsticas. 2.5.1: Ejemplo: contando cosas Digamos que desea tabular el total de acciones de cada acci\u00f3n. portfolio = [ ('GOOG', 100, 490.1), ('IBM', 50, 91.1), ('CAT', 150, 83.44), ('IBM', 100, 45.23), ('GOOG', 75, 572.45), ('AA', 50, 23.15) ] Hay dos IBM entradas y dos GOOG entradas en esta lista. Las acciones deben combinarse de alguna manera. 2.5.2: Contadores Soluci\u00f3n: utilice un Counter . from collections import Counter total_shares = Counter() for name, shares, price in portfolio: total_shares[name] += shares total_shares['IBM'] # 150 2.5.3: Ejemplo: asignaciones uno-muchos Problema: desea asignar una clave a varios valores. portfolio = [ ('GOOG', 100, 490.1), ('IBM', 50, 91.1), ('CAT', 150, 83.44), ('IBM', 100, 45.23), ('GOOG', 75, 572.45), ('AA', 50, 23.15) ] Como en el ejemplo anterior, la clave IBM deber\u00eda tener dos tuplas diferentes en su lugar. Soluci\u00f3n: utilice un defaultdict . from collections import defaultdict holdings = defaultdict(list) for name, shares, price in portfolio: holdings[name].append((shares, price)) holdings['IBM'] # [ (50, 91.1), (100, 45.23) ] El defaultdict asegura que cada vez que acceda a una clave obtenga un valor predeterminado. 2.5.4: Ejemplo: un historial Problema: queremos un historial de las \u00faltimas N cosas. Soluci\u00f3n: utilice un deque . from collections import deque history = deque(maxlen=N) with open(filename) as f: for line in f: history.append(line) ... 2.5.5: Ejercicios El collections m\u00f3dulo puede ser uno de los m\u00f3dulos de biblioteca m\u00e1s \u00fatiles para tratar tipos de problemas de manejo de datos con fines especiales, como la tabulaci\u00f3n y la indexaci\u00f3n. En este ejercicio, veremos algunos ejemplos simples. Comience ejecutando su report.py programa para que tenga la cartera de acciones cargada en el modo interactivo. bash % python3 -i report.py 2.18: Tabulaci\u00f3n con contadores Suponga que desea tabular el n\u00famero total de acciones de cada acci\u00f3n. Esto es f\u00e1cil de usar Counter objetos. Intentalo: >>> portfolio = read_portfolio('Data/portfolio.csv') >>> from collections import Counter >>> holdings = Counter() >>> for s in portfolio: holdings[s['name']] += s['shares'] >>> holdings Counter({'MSFT': 250, 'IBM': 150, 'CAT': 150, 'AA': 100, 'GE': 95}) >>> Observe cuidadosamente c\u00f3mo las m\u00faltiples entradas para MSFT y IBM en portfolio se combinan en una sola entrada aqu\u00ed. Puede usar un contador como un diccionario para recuperar valores individuales: >>> holdings['IBM'] 150 >>> holdings['MSFT'] 250 >>> Si desea clasificar los valores, haga esto: >>> # Get three most held stocks >>> holdings.most_common(3) [('MSFT', 250), ('IBM', 150), ('CAT', 150)] >>> Tomemos otra cartera de acciones y creemos un nuevo contador: >>> portfolio2 = read_portfolio('Data/portfolio2.csv') >>> holdings2 = Counter() >>> for s in portfolio2: holdings2[s['name']] += s['shares'] >>> holdings2 Counter({'HPQ': 250, 'GE': 125, 'AA': 50, 'MSFT': 25}) >>> Finalmente, combinemos todas las existencias haciendo una operaci\u00f3n simple: >>> holdings Counter({'MSFT': 250, 'IBM': 150, 'CAT': 150, 'AA': 100, 'GE': 95}) >>> holdings2 Counter({'HPQ': 250, 'GE': 125, 'AA': 50, 'MSFT': 25}) >>> combined = holdings + holdings2 >>> combined Counter({'MSFT': 275, 'HPQ': 250, 'GE': 220, 'AA': 150, 'IBM': 150, 'CAT': 150}) >>> Esto es solo una peque\u00f1a muestra de lo que ofrecen los contadores. Sin embargo, si alguna vez necesita tabular valores, deber\u00eda considerar usar uno. 2.5.6: Comentario: el modulo collections El m\u00f3dulo collections es uno de los m\u00f3dulos de biblioteca m\u00e1s \u00fatiles de todo Python. De hecho, podr\u00edamos hacer un tutorial extenso sobre eso. Sin embargo, hacerlo ahora tambi\u00e9n ser\u00eda una distracci\u00f3n. Por ahora, ponga collections su lista de lecturas a la hora de dormir para m\u00e1s tarde. 2.6 Comprensi\u00f3n de Listas Una tarea com\u00fan es procesar elementos en una lista. Esta secci\u00f3n presenta listas por comprensi\u00f3n, una poderosa herramienta para hacer precisamente eso. 2.6.1: Creando nuevas listas Una lista de comprensi\u00f3n crea una nueva lista aplicando una operaci\u00f3n a cada elemento de una secuencia. >>> a = [1, 2, 3, 4, 5] >>> b = [2*x for x in a ] >>> b [2, 4, 6, 8, 10] >>> Otro ejemplo: >>> names = ['Elwood', 'Jake'] >>> a = [name.lower() for name in names] >>> a ['elwood', 'jake'] >>> La sintaxis general es: [ <expresi\u00f3n> for <variable_nombre> in <secuencia> ] . 2.6.2: Filtrar Tambi\u00e9n puede filtrar durante la comprensi\u00f3n de la lista. >>> a = [1, -5, 4, 2, -2, 10] >>> b = [2*x for x in a if x > 0 ] >>> b [2, 8, 4, 20] >>> 2.6.3: Casos de uso Las listas por comprensi\u00f3n son muy \u00fatiles. Por ejemplo, puede recopilar valores de campos de un diccionario espec\u00edfico: stocknames = [s['name'] for s in stocks] Puede realizar consultas similares a bases de datos en secuencias. a = [s for s in stocks if s['price'] > 100 and s['shares'] > 50 ] Tambi\u00e9n puede combinar una comprensi\u00f3n de lista con una reducci\u00f3n de secuencia: cost = sum([s['shares']*s['price'] for s in stocks]) 2.6.4: Sintaxis general [ <expresi\u00f3n> for <variable_nombre> in <secuencia> si <condici\u00f3n>] Que significa: result = [] for variable_name in sequence: if condition: result.append(expression) 2.6.5: Digresi\u00f3n hist\u00f3rica Las listas por comprensi\u00f3n provienen de las matem\u00e1ticas (notaci\u00f3n del generador de conjuntos). a = [ x * x for x in s if x > 0 ] # Python a = { x^2 | x \u2208 s, x > 0 } # Math Tambi\u00e9n se implementa en varios otros idiomas. Sin embargo, la mayor\u00eda de los programadores probablemente no est\u00e9n pensando en su clase de matem\u00e1ticas. Entonces, est\u00e1 bien verlo como un atajo de lista genial. 2.6.6: Ejercicios Comience ejecutando su report.py programa para que tenga la cartera de acciones cargada en el modo interactivo. bash % python3 -i report.py Ejercicio 2.19: Comprension de listas Pruebe algunas comprensiones de listas simples solo para familiarizarse con la sintaxis. >>> nums = [1,2,3,4] >>> squares = [ x * x for x in nums ] >>> squares [1, 4, 9, 16] >>> twice = [ 2 * x for x in nums if x > 2 ] >>> twice [6, 8] >>> Observe c\u00f3mo las listas por comprensi\u00f3n est\u00e1n creando una nueva lista con los datos adecuadamente transformados o filtrados. Ejercicio 2.20: Reducciones de secuencia Calcule el costo total de la cartera con una sola declaraci\u00f3n de Python. >>> portfolio = read_portfolio('Data/portfolio.csv') >>> cost = sum([ s['shares'] * s['price'] for s in portfolio ]) >>> cost 44671.15 >>> Despu\u00e9s de haber hecho eso, muestre c\u00f3mo puede calcular el valor actual de la cartera con un solo extracto. >>> value = sum([ s['shares'] * prices[s['name']] for s in portfolio ]) >>> value 28686.1 >>> Ambas operaciones anteriores son un ejemplo de reducci\u00f3n de mapa. La comprensi\u00f3n de la lista est\u00e1 mapeando una operaci\u00f3n a lo largo de la lista. >>> [ s['shares'] * s['price'] for s in portfolio ] [3220.0000000000005, 4555.0, 12516.0, 10246.0, 3835.1499999999996, 3254.9999999999995, 7044.0] >>> La sum() funci\u00f3n est\u00e1 realizando despu\u00e9s una reducci\u00f3n en todo el resultado: >>> sum(_) 44671.15 >>> Con este conocimiento, ahora est\u00e1 listo para lanzar una nueva empresa de big data. Ejercicio 2.21: Consulta de datos Pruebe los siguientes ejemplos de varias consultas de datos. Primero, una lista de todas las posiciones de la cartera con m\u00e1s de 100 acciones. >>> more100 = [ s for s in portfolio if s['shares'] > 100 ] >>> more100 [{'price': 83.44, 'name': 'CAT', 'shares': 150}, {'price': 51.23, 'name': 'MSFT', 'shares': 200}] >>> Todas las posiciones en cartera de acciones de MSFT e IBM. >>> msftibm = [ s for s in portfolio if s['name'] in {'MSFT','IBM'} ] >>> msftibm [{'price': 91.1, 'name': 'IBM', 'shares': 50}, {'price': 51.23, 'name': 'MSFT', 'shares': 200}, {'price': 65.1, 'name': 'MSFT', 'shares': 50}, {'price': 70.44, 'name': 'IBM', 'shares': 100}] >>> Una lista de todas las tenencias de la cartera que cuestan m\u00e1s de $10000 . >>> cost10k = [ s for s in portfolio if s['shares'] * s['price'] > 10000 ] >>> cost10k [{'price': 83.44, 'name': 'CAT', 'shares': 150}, {'price': 51.23, 'name': 'MSFT', 'shares': 200}] >>> Ejercicio 2.22: Extracci\u00f3n de datos Mostrar c\u00f3mo se podr\u00eda construir una lista de tuplas (name, shares) , donde name y shares son tomados de portfolio . >>> name_shares =[ (s['name'], s['shares']) for s in portfolio ] >>> name_shares [('AA', 100), ('IBM', 50), ('CAT', 150), ('MSFT', 200), ('GE', 95), ('MSFT', 50), ('IBM', 100)] >>> Si cambia los corchetes ( [ , ] ) por llaves ( { , } ), obtendr\u00e1 algo conocido como comprensi\u00f3n de conjuntos. Esto le brinda valores \u00fanicos o distintos. Por ejemplo, esto determina el conjunto de nombres de acciones \u00fanicos que aparecen en portfolio : >>> names = { s['name'] for s in portfolio } >>> names { 'AA', 'GE', 'IBM', 'MSFT', 'CAT'] } >>> Si especifica key:value pares, puede crear un diccionario. Por ejemplo, cree un diccionario que asigne el nombre de una acci\u00f3n al n\u00famero total de acciones que posee. >>> holdings = { name: 0 for name in names } >>> holdings {'AA': 0, 'GE': 0, 'IBM': 0, 'MSFT': 0, 'CAT': 0} >>> Esta \u00faltima caracter\u00edstica se conoce como comprensi\u00f3n de diccionario . Vamos a tabular: >>> for s in portfolio: holdings[s['name']] += s['shares'] >>> holdings { 'AA': 100, 'GE': 95, 'IBM': 150, 'MSFT':250, 'CAT': 150 } >>> Pruebe este ejemplo que filtra el diccionario prices solo a los nombres que aparecen en la cartera: >>> portfolio_prices = { name: prices[name] for name in names } >>> portfolio_prices {'AA': 9.22, 'GE': 13.48, 'IBM': 106.28, 'MSFT': 20.89, 'CAT': 35.46} >>> Ejercicio 2.23: Extracci\u00f3n de datos desde archivos CSV Saber c\u00f3mo utilizar varias combinaciones de comprensiones de listas, conjuntos y diccionarios puede resultar \u00fatil en diversas formas de procesamiento de datos. A continuaci\u00f3n, se muestra un ejemplo que muestra c\u00f3mo extraer columnas seleccionadas de un archivo CSV. Primero, lea una fila de informaci\u00f3n de encabezado de un archivo CSV: >>> import csv >>> f = open('Data/portfoliodate.csv') >>> rows = csv.reader(f) >>> headers = next(rows) >>> headers ['name', 'date', 'time', 'shares', 'price'] >>> A continuaci\u00f3n, defina una variable que enumere las columnas que realmente le interesan: >>> select = ['name', 'shares', 'price'] >>> Ahora, ubique los \u00edndices de las columnas anteriores en el archivo CSV de origen: >>> indices = [ headers.index(colname) for colname in select ] >>> indices [0, 3, 4] >>> Finalmente, lea una fila de datos y convi\u00e9rtala en un diccionario usando una comprensi\u00f3n de diccionario: >>> row = next(rows) >>> record = { colname: row[index] for colname, index in zip(select, indices) } # dict-comprehension >>> record {'price': '32.20', 'name': 'AA', 'shares': '100'} >>> Si se siente c\u00f3modo con lo que acaba de suceder, lea el resto del archivo: >>> portfolio = [ { colname: row[index] for colname, index in zip(select, indices) } for row in rows ] >>> portfolio [{'price': '91.10', 'name': 'IBM', 'shares': '50'}, {'price': '83.44', 'name': 'CAT', 'shares': '150'}, {'price': '51.23', 'name': 'MSFT', 'shares': '200'}, {'price': '40.37', 'name': 'GE', 'shares': '95'}, {'price': '65.10', 'name': 'MSFT', 'shares': '50'}, {'price': '70.44', 'name': 'IBM', 'shares': '100'}] >>> Vaya, acabas de reducir gran parte de la read_portfolio() funci\u00f3n a una sola declaraci\u00f3n. Comentario Las listas por comprensi\u00f3n se utilizan com\u00fanmente en Python como un medio eficaz para transformar, filtrar o recopilar datos. Debido a la sintaxis, no querr\u00e1 exagerar; intente que la comprensi\u00f3n de cada lista sea lo m\u00e1s simple posible. Est\u00e1 bien dividir las cosas en varios pasos. Por ejemplo, no est\u00e1 claro si le gustar\u00eda dar ese \u00faltimo ejemplo a sus compa\u00f1eros de trabajo desprevenidos. Dicho esto, saber c\u00f3mo manipular datos r\u00e1pidamente es una habilidad incre\u00edblemente \u00fatil. Existen numerosas situaciones en las que es posible que deba resolver alg\u00fan tipo de problema \u00fanico que involucre la importaci\u00f3n, exportaci\u00f3n, extracci\u00f3n de datos, etc. Convertirse en un maestro gur\u00fa de la comprensi\u00f3n de listas puede reducir sustancialmente el tiempo dedicado a idear una soluci\u00f3n. Adem\u00e1s, no se olvide del collections m\u00f3dulo. 2.7 Objetos Esta secci\u00f3n presenta m\u00e1s detalles sobre el modelo de objetos internos de Python y analiza algunos asuntos relacionados con la administraci\u00f3n de memoria, la copia y la verificaci\u00f3n de tipos. 2.7.1: Asignacion Muchas operaciones en Python est\u00e1n relacionadas con la asignaci\u00f3n o el almacenamiento de valores. a = value # Asignaci\u00f3n a una variable s[n] = value # Asignaci\u00f3n a una lista s.append(value) # Agregando a una lista d['key'] = value # Agregando a un diccionario Una advertencia: las operaciones de asignaci\u00f3n nunca hacen una copia del valor asignado. Todas las asignaciones son simplemente copias de referencia (o copias de puntero si lo prefiere). 2.7.2: Ejemplo de asignacion Considere este fragmento de c\u00f3digo. a = [1,2,3] b = a c = [a,b] Una imagen de las operaciones de memoria subyacentes. En este ejemplo, solo hay un objeto de lista [1,2,3] , pero hay cuatro referencias diferentes a \u00e9l. Esto significa que la modificaci\u00f3n de un valor afecta a todas las referencias. >>> a.append(999) >>> a [1,2,3,999] >>> b [1,2,3,999] >>> c [[1,2,3,999], [1,2,3,999]] >>> Observe c\u00f3mo un cambio en la lista original aparece en todas partes (\u00a1ay!). Esto se debe a que nunca se hicieron copias. Todo apunta a lo mismo. 2.7.3: Reasignacion de valores La reasignaci\u00f3n de un valor nunca sobrescribe la memoria utilizada por el valor anterior. a = [1,2,3] b = a a = [4,5,6] print(a) # [4, 5, 6] print(b) # [1, 2, 3] Tiene el valor original Recuerde: las variables son nombres, no ubicaciones de memoria. 2.7.4: Algunos peligros Si no sabe acerca de este intercambio, se disparar\u00e1 en el pie en alg\u00fan momento. Escenario t\u00edpico. Modifica algunos datos pensando que es su propia copia privada y accidentalmente corrompe algunos datos en alguna otra parte del programa. Comentario: Esta es una de las razones por las que los tipos de datos primitivos (int, float, string) son inmutables (solo lectura). 2.7.5: Identidad y referencia Utilice el operador is para comprobar si dos valores son exactamente el mismo objeto. >>> a = [1,2,3] >>> b = a >>> a is b True >>> is compara la identidad del objeto (un n\u00famero entero). La identidad se puede obtener utilizando id() . >>> id(a) 3588944 >>> id(b) 3588944 >>> Nota: Casi siempre es mejor utilizar == para comparar objetos. El comportamiento de is suele ser inesperado: >>> a = [1,2,3] >>> b = a >>> c = [1,2,3] >>> a is b True >>> a is c False >>> a == c # hmm... \u00bfpor qu\u00e9? True >>> 2.7.6: Copias superficiales Las listas y los dictados tienen m\u00e9todos para copiar. >>> a = [2,3,[100,101],4] >>> b = list(a) # Make a copy >>> a is b False Es una lista nueva, pero los elementos de la lista se comparten. >>> a[2].append(102) >>> b[2] [100,101,102] >>> >>> a[2] is b[2] True >>> Por ejemplo, [100, 101, 102] se comparte la lista interna . Esto se conoce como copia superficial. Aqu\u00ed tienes una foto. 2.7.9: Copias profundas A veces es necesario hacer una copia de un objeto y todos los objetos que contiene. Puede utilizar el m\u00f3dulo copy para esto: >>> a = [2,3,[100,101],4] >>> import copy >>> b = copy.deepcopy(a) >>> a[2].append(102) >>> b[2] [100,101] >>> a[2] is b[2] False >>> 2.7.10: Nombres, valores, tipos Los nombres de las variables no tienen tipo . Es solo un nombre. Sin embargo, los valores no tienen un tipo subyacente. >>> a = 42 >>> b = 'Hello World' >>> type(a) <type 'int'> >>> type(b) <type 'str'> type() te dir\u00e1 qu\u00e9 es. El nombre del tipo se usa generalmente como una funci\u00f3n que crea o convierte un valor a ese tipo. 2.7.11: Verificaci\u00f3n de tipo C\u00f3mo saber si un objeto es de un tipo espec\u00edfico. if isinstance(a, list): print('a is a list') Comprobando uno de los muchos tipos posibles. if isinstance(a, (list,tuple)): print('a is a list or tuple') Precauci\u00f3n: No se exceda con la verificaci\u00f3n de tipos. Puede conducir a una complejidad de c\u00f3digo excesiva. Por lo general, solo lo har\u00eda si al hacerlo evitar\u00eda errores comunes cometidos por otros que usan su c\u00f3digo. 2.7.12: Todo es un objeto Los n\u00fameros, cadenas, listas, funciones, excepciones, clases, instancias, etc. son todos objetos. Significa que todos los objetos que se pueden nombrar pueden pasarse como datos, colocarse en contenedores, etc., sin ninguna restricci\u00f3n. No hay tipos especiales de objetos. A veces se dice que todos los objetos son de \"primera clase\". Un simple ejemplo: >>> import math >>> items = [abs, math, ValueError ] >>> items [<built-in function abs>, <module 'math' (builtin)>, <type 'exceptions.ValueError'>] >>> items[0](-45) 45 >>> items[1].sqrt(2) 1.4142135623730951 >>> try: x = int('not a number') except items[2]: print('Failed!') Failed! >>> Aqu\u00ed items hay una lista que contiene una funci\u00f3n, un m\u00f3dulo y una excepci\u00f3n. Puede utilizar directamente los elementos de la lista en lugar de los nombres originales: items[0](-45) # abs items[1].sqrt(2) # math except items[2]: # ValueError Un gran poder conlleva responsabilidad. El hecho de que pueda hacer eso no significa que deba hacerlo. 2.33: Ejercicios En este conjunto de ejercicios, analizamos parte del poder que proviene de los objetos de primera clase. Ejercicio 2.24: Data de primera-clase En el archivo Data/portfolio.csv , leemos datos organizados como columnas que se ven as\u00ed: name,shares,price \"AA\",100,32.20 \"IBM\",50,91.10 ... En el c\u00f3digo anterior, us\u00e1bamos el csv m\u00f3dulo para leer el archivo, pero a\u00fan ten\u00edamos que realizar conversiones de tipo manuales. Por ejemplo: for row in rows: name = row[0] shares = int(row[1]) price = float(row[2]) Este tipo de conversi\u00f3n tambi\u00e9n se puede realizar de una manera m\u00e1s inteligente utilizando algunas operaciones b\u00e1sicas de lista. Haga una lista de Python que contenga los nombres de las funciones de conversi\u00f3n que usar\u00eda para convertir cada columna en el tipo apropiado: >>> types = [str, int, float] >>> La raz\u00f3n por la que incluso puede crear esta lista es que todo en Python es de primera clase . Entonces, si desea tener una lista de funciones, est\u00e1 bien. Los elementos de la lista que ha creado son funciones para convertir un valor x en un tipo determinado (por ejemplo, str(x) , int(x) , float(x) ). Ahora, lea una fila de datos del archivo anterior: >>> import csv >>> f = open('Data/portfolio.csv') >>> rows = csv.reader(f) >>> headers = next(rows) >>> row = next(rows) >>> row ['AA', '100', '32.20'] >>> Como se se\u00f1al\u00f3, esta fila no es suficiente para hacer c\u00e1lculos porque los tipos son incorrectos. Por ejemplo: >>> row[1] * row[2] Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: can't multiply sequence by non-int of type 'str' >>> Sin embargo, tal vez los datos se puedan emparejar con los tipos que especific\u00f3 en types . Por ejemplo: >>> types[1] <type 'int'> >>> row[1] '100' >>> Intente convertir uno de los valores: >>> types[1](row[1]) # Same as int(row[1]) 100 >>> Intente convertir un valor diferente: >>> types[2](row[2]) # Same as float(row[2]) 32.2 >>> Pruebe el c\u00e1lculo con valores convertidos: >>> types[1](row[1])*types[2](row[2]) 3220.0000000000005 >>> Comprima los tipos de columna con los campos y observe el resultado: >>> r = list(zip(types, row)) >>> r [(<type 'str'>, 'AA'), (<type 'int'>, '100'), (<type 'float'>,'32.20')] >>> Notar\u00e1 que esto ha emparejado una conversi\u00f3n de tipo con un valor. Por ejemplo, int se empareja con el valor '100' . La lista comprimida es \u00fatil si desea realizar conversiones en todos los valores, uno tras otro. Prueba esto: >>> converted = [] >>> for func, val in zip(types, row): converted.append(func(val)) ... >>> converted ['AA', 100, 32.2] >>> converted[1] * converted[2] 3220.0000000000005 >>> Aseg\u00farese de comprender lo que sucede en el c\u00f3digo anterior. En el bucle, la func variable es una de las funciones de conversi\u00f3n de tipo (por ejemplo, str , int , etc.) y la val variable es uno de los valores como 'AA' , '100' . La expresi\u00f3n func(val) est\u00e1 convirtiendo un valor (algo as\u00ed como un tipo de conversi\u00f3n). El c\u00f3digo anterior se puede comprimir en una sola lista comprensiva. >>> converted = [func(val) for func, val in zip(types, row)] >>> converted ['AA', 100, 32.2] >>> Ejercicio 2.25: Creando diccionarios \u00bfRecuerda c\u00f3mo la funci\u00f3n dict() puede hacer f\u00e1cilmente un diccionario si tiene una secuencia de nombres y valores clave? Hagamos un diccionario a partir de los encabezados de las columnas: >>> headers ['name', 'shares', 'price'] >>> converted ['AA', 100, 32.2] >>> dict(zip(headers, converted)) {'price': 32.2, 'name': 'AA', 'shares': 100} >>> Por supuesto, si est\u00e1 en su lista de comprensi\u00f3n fu, puede hacer toda la conversi\u00f3n en un solo paso usando un dict-comprehension: >>> { name: func(val) for name, func, val in zip(headers, types, row) } {'price': 32.2, 'name': 'AA', 'shares': 100} >>> Ejercicio 2.26: El horizonte Con las t\u00e9cnicas de este ejercicio, podr\u00eda escribir declaraciones que conviertan f\u00e1cilmente campos de casi cualquier archivo de datos orientado a columnas en un diccionario de Python. Solo para ilustrar, suponga que lee datos de un archivo de datos diferente como este: >>> f = open('Data/dowstocks.csv') >>> rows = csv.reader(f) >>> headers = next(rows) >>> row = next(rows) >>> headers ['name', 'price', 'date', 'time', 'change', 'open', 'high', 'low', 'volume'] >>> row ['AA', '39.48', '6/11/2007', '9:36am', '-0.18', '39.67', '39.69', '39.45', '181800'] >>> Convirtamos los campos usando un truco similar: >>> types = [str, float, str, str, float, float, float, float, int] >>> converted = [func(val) for func, val in zip(types, row)] >>> record = dict(zip(headers, converted)) >>> record {'volume': 181800, 'name': 'AA', 'price': 39.48, 'high': 39.69, 'low': 39.45, 'time': '9:36am', 'date': '6/11/2007', 'open': 39.67, 'change': -0.18} >>> record['name'] 'AA' >>> record['price'] 39.48 >>> Bonificaci\u00f3n: \u00bfC\u00f3mo modificar\u00eda este ejemplo para analizar adicionalmente la entrada date en una tupla como (6, 11, 2007) ? Dedique alg\u00fan tiempo a reflexionar sobre lo que ha hecho en este ejercicio. Revisaremos estas ideas un poco m\u00e1s tarde.","title":"2 Trabajando con Data"},{"location":"2/#2-trabajando-con-data","text":"Conoceremos las estructuras de datos de fundamental importancia en Python: tuples, lists, sets y dictionaries. Presentaremos algunos patrones comunes para el manejo de datos y discutiremos el modelo de objetos en Python.","title":"2. Trabajando con data"},{"location":"2/#21-tipos-y-estructuras-de-data","text":"Esta secci\u00f3n presenta estructuras de datos en forma de tuplas y diccionarios.","title":"2.1 Tipos y estructuras de data"},{"location":"2/#211-tipos-primitivos","text":"Python tiene algunos tipos primitivos de datos: Enteros N\u00fameros de punto flotante Cadenas (texto) Aprendimos sobre esto en la introducci\u00f3n.","title":"2.1.1 Tipos primitivos"},{"location":"2/#212-tipo-none","text":"email_address = None None se utiliza a menudo como marcador de posici\u00f3n para un valor opcional o faltante. Eso se eval\u00faa como \"Falso\" en condicionales. if email_address: send_email(email_address, msg)","title":"2.1.2 Tipo None"},{"location":"2/#213-estructuras-de-data","text":"Los programas reales tienen datos m\u00e1s complejos. Por ejemplo, informaci\u00f3n sobre una participaci\u00f3n en acciones: 100 acciones de GOOG a $490.10 Este es un \"objeto\" con tres partes: Nombre o s\u00edmbolo de la acci\u00f3n (\"GOOG\", una cadena) N\u00famero de acciones (100, un n\u00famero entero) Precio (490,10 un punto flotante)","title":"2.1.3: Estructuras de data"},{"location":"2/#214-tuplas","text":"Una tupla es una colecci\u00f3n de valores agrupados. Ejemplo: s = ('GOOG', 100, 490.1) A veces el () es omitido. s = 'GOOG', 100, 490.1' Casos especiales (0-tupla, 1-tupla). t = () # Una tupla vac\u00eda w = ('GOOG', ) # Una tupla de 1-item Las tuplas se utilizan a menudo para representar registros o estructuras simples . Normalmente, es un \u00fanico objeto de varias partes. Una buena analog\u00eda: Una tupla es como una sola fila en una tabla de base de datos. El contenido de la tupla est\u00e1 ordenado (como una matriz). s = ('GOOG', 100, 490.1) name = s[0] # 'GOOG' shares = s[1] # 100 price = s[2] # 490.1 Sin embargo, el contenido no se puede modificar. >>> s[1] = 75 TypeError: object does not support item assignment Sin embargo, puede crear una nueva tupla basada en una tupla actual. s = (s[0], 75, s[2]) Las tuplas tienen m\u00e1s que ver con empaquetar elementos relacionados en una sola entidad , que con cualquier otra cosa. s = ('GOOG', 100, 490.1) Por tanto, la tupla es f\u00e1cil de pasar a otras partes de un programa como un solo objeto.","title":"2.1.4: Tuplas"},{"location":"2/#215-desempaque-de-tuplas","text":"Para usar la tupla en otro lugar, puede desempaquetar sus partes en variables. name, shares, price = s print('Cost', shares * price) The number of variables on the left must match the tuple structure. name, shares = s # ERROR Traceback (most recent call last): ... ValueError: too many values to unpack","title":"2.1.5: Desempaque de Tuplas"},{"location":"2/#216-tuplas-vs-listas","text":"Tuples look like read-only lists. However, tuples are most often used for a single item consisting of multiple parts. Lists are usually a collection of distinct items, usually all of the same type. record = ('GOOG', 100, 490.1) # Una tupla que representa un registro en una cartera symbols = [ 'GOOG', 'AAPL', 'IBM' ] # Una lista que representa tres s\u00edmbolos de acciones","title":"2.1.6 Tuplas vs Listas"},{"location":"2/#217-diccionarios","text":"Un diccionario es la asignaci\u00f3n de claves a valores. A veces tambi\u00e9n se le llama una tabla hash o matriz asociativa. Las claves sirven como \u00edndices para acceder a los valores. s = { 'name': 'GOOG', 'shares': 100, 'price': 490.1 }","title":"2.1.7 Diccionarios"},{"location":"2/#218-operaciones-comunes","text":"To get values from a dictionary use the key names. >>> print(s['name'], s['shares']) GOOG 100 >>> s['price'] 490.10 >>> Para agregar o modificar valores, asigne usando los nombres de las claves. >>> s['shares'] = 75 >>> s['date'] = '6/6/2007' >>> Para eliminar un valor, use la instrucci\u00f3n del . >>> del s['date'] >>>","title":"2.1.8 Operaciones comunes"},{"location":"2/#219-porque-diccionarios","text":"Los diccionarios son \u00fatiles cuando hay * muchos * valores diferentes y esos valores puede ser modificado o manipulado. Los diccionarios hacen que su c\u00f3digo sea m\u00e1s legible. s['price'] # vs s[2]","title":"2.1.9 \u00bfPorqu\u00e9 diccionarios?"},{"location":"2/#2110-ejercicios","text":"En los \u00faltimos ejercicios, escribi\u00f3 un programa que lee un archivo de datos Data/portfolio.csv . Usando el m\u00f3dulo csv , es f\u00e1cil leer el archivo fila por fila. >>> import csv >>> f = open('Data/portfolio.csv') >>> rows = csv.reader(f) >>> next(rows) ['name', 'shares', 'price'] >>> row = next(rows) >>> row ['AA', '100', '32.20'] >>> Aunque leer el archivo es f\u00e1cil, a menudo querr\u00e1 hacer m\u00e1s con el datos que leerlos. Por ejemplo, tal vez desee almacenarlo y comience a realizar algunos c\u00e1lculos sobre \u00e9l. Desafortunadamente, una \"fila\" sin procesar de datos no le da suficiente para trabajar. Por ejemplo, incluso un el c\u00e1lculo matem\u00e1tico simple no funciona: >>> row = ['AA', '100', '32.20'] >>> cost = row[1] * row[2] Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: can't multiply sequence by non-int of type 'str' >>> Para hacer m\u00e1s, normalmente desea interpretar los datos sin procesar de alguna manera y convertirlo en un tipo de objeto m\u00e1s \u00fatil para que pueda trabajar con \u00e9l m\u00e1s tarde. Dos opciones simples son tuplas o diccionarios.","title":"2.1.10 Ejercicios"},{"location":"2/#ejercicio-21-tuplas","text":"En el indicador interactivo, cree la siguiente tupla que represente la fila anterior, pero con las columnas num\u00e9ricas convertidas a los n\u00fameros adecuados: >>> t = (row[0], int(row[1]), float(row[2])) >>> t ('AA', 100, 32.2) >>> Con esto, ahora puede calcular el costo total multiplicando las acciones y el precio: >>> cost = t[1] * t[2] >>> cost 3220.0000000000005 >>> \u00bfLas matem\u00e1ticas est\u00e1n rotas en Python? \u00bfCu\u00e1l es el problema con la respuesta de 3220.0000000000005? Este es un artefacto del hardware de punto flotante en su computadora que solo puede representar decimales con precisi\u00f3n en Base-2, no en Base-10. Incluso para c\u00e1lculos simples que involucran decimales en base 10, se introducen peque\u00f1os errores. Esto es normal, aunque quiz\u00e1s un poco sorprendente si no lo ha visto antes. Esto sucede en todos los lenguajes de programaci\u00f3n que utilizan decimales de punto flotante, pero a menudo se oculta al imprimir. Por ejemplo: >>> print(f'{cost:0.2f}') 3220.00 >>> Las tuplas son de solo lectura. Verifique esto intentando cambiar el n\u00famero de acciones a 75. >>> t[1] = 75 Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'tuple' object does not support item assignment >>> Aunque no puede cambiar el contenido de la tupla, siempre puede crear una tupla completamente nueva que reemplace a la anterior. >>> t = (t[0], 75, t[2]) >>> t ('AA', 75, 32.2) >>> Siempre que reasigne un nombre de variable existente como este, el valor anterior se descarta. Aunque la asignaci\u00f3n anterior puede parecer que est\u00e1 modificando la tupla, en realidad est\u00e1 creando una nueva tupla y desechando la anterior. Las tuplas se utilizan a menudo para empaquetar y descomprimir valores en variables. Intente lo siguiente: >>> name, shares, price = t >>> name 'AA' >>> shares 75 >>> price 32.2 >>> Tome las variables anteriores y vuelva a empaquetarlas en una tupla >>> t = (name, 2*shares, price) >>> t ('AA', 150, 32.2) >>>","title":"Ejercicio 2.1: Tuplas"},{"location":"2/#ejercicio-22-diccionarios-como-estructura-de-datos","text":"Una alternativa a una tupla es crear un diccionario. >>> d = { 'name' : row[0], 'shares' : int(row[1]), 'price' : float(row[2]) } >>> d {'name': 'AA', 'shares': 100, 'price': 32.2 } >>> Calcule el costo total de esta participaci\u00f3n: >>> cost = d['shares'] * d['price'] >>> cost 3220.0000000000005 >>> Compare este ejemplo con el mismo c\u00e1lculo que involucra tuplas anterior. Cambie el n\u00famero de acciones a 75. >>> d['shares'] = 75 >>> d {'name': 'AA', 'shares': 75, 'price': 32.2 } >>> A diferencia de las tuplas, los diccionarios se pueden modificar libremente. Agrega algunos atributos: >>> d['date'] = (6, 11, 2007) >>> d['account'] = 12345 >>> d {'name': 'AA', 'shares': 75, 'price':32.2, 'date': (6, 11, 2007), 'account': 12345} >>>","title":"Ejercicio 2.2: Diccionarios como estructura de datos"},{"location":"2/#ejercicio-23-otras-operaciones-adicionales","text":"Si convierte un diccionario en una lista, obtendr\u00e1 todas sus claves: >>> list(d) ['name', 'shares', 'price', 'date', 'account'] >>> De manera similar, si usa la fordeclaraci\u00f3n para iterar en un diccionario, obtendr\u00e1 las claves: >>> for k in d: print('k =', k) k = name k = shares k = price k = date k = account >>> Pruebe esta variante que realiza una b\u00fasqueda al mismo tiempo: >>> for k in d: print(k, '=', d[k]) name = AA shares = 75 price = 32.2 date = (6, 11, 2007) account = 12345 >>> Tambi\u00e9n puede obtener todas las claves utilizando el m\u00e9todo keys() : >>> keys = d.keys() >>> keys dict_keys(['name', 'shares', 'price', 'date', 'account']) >>> keys()es un poco inusual porque devuelve un dict_keysobjeto especial . Se trata de una superposici\u00f3n del diccionario original que siempre le proporciona las claves actuales, incluso si el diccionario cambia. Por ejemplo, intente esto: >>> del d['account'] >>> keys dict_keys(['name', 'shares', 'price', 'date']) >>> Observe cuidadosamente que 'account'desapareci\u00f3 keysaunque no volvi\u00f3 a llamar d.keys(). Una forma m\u00e1s elegante de trabajar con claves y valores juntos es utilizar el items()m\u00e9todo. Esto te da (key, value)tuplas: >>> items = d.items() >>> items dict_items([('name', 'AA'), ('shares', 75), ('price', 32.2), ('date', (6, 11, 2007))]) >>> for k, v in d.items(): print(k, '=', v) name = AA shares = 75 price = 32.2 date = (6, 11, 2007) >>> Si tiene tuplas como items, puede crear un diccionario usando la dict()funci\u00f3n. Intentalo: >>> items dict_items([('name', 'AA'), ('shares', 75), ('price', 32.2), ('date', (6, 11, 2007))]) >>> d = dict(items) >>> d {'name': 'AA', 'shares': 75, 'price':32.2, 'date': (6, 11, 2007)} >>>","title":"Ejercicio 2.3: Otras operaciones adicionales"},{"location":"2/#22-contenedores","text":"","title":"2.2 Contenedores"},{"location":"2/#221-vision-general","text":"Los programas a menudo tienen que trabajar con muchos objetos. Una cartera de acciones Una tabla de precios de acciones Hay tres opciones principales para usar. Listas. Datos ordenados. Diccionarios. Datos desordenados. Conjuntos. Colecci\u00f3n desordenada de art\u00edculos \u00fanicos.*","title":"2.2.1: Visi\u00f3n General"},{"location":"2/#222-listas-como-un-contenedor","text":"Utilice una lista cuando sea importante el orden de los datos. Recuerde que las listas pueden contener cualquier tipo de objeto. Por ejemplo, una lista de tuplas. portfolio = [ ('GOOG', 100, 490.1), ('IBM', 50, 91.3), ('CAT', 150, 83.44) ] portfolio[0] # ('GOOG', 100, 490.1) portfolio[2] # ('CAT', 150, 83.44)","title":"2.2.2: Listas como un Contenedor"},{"location":"2/#223-construccion-de-una-lista","text":"Construyendo una lista desde cero. records = [] # Initial empty list # Use .append() to add more items records.append(('GOOG', 100, 490.10)) records.append(('IBM', 50, 91.3)) ... Un ejemplo al leer registros de un archivo. records = [] # Lista vac\u00eda de inicio with open('Data/portfolio.csv', 'rt') as f: next(f) # Nos saltamos el encabezado for line in f: row = line.split(',') records.append((row[0], int(row[1]), float(row[2])))","title":"2.2.3: Construcci\u00f3n de una lista"},{"location":"2/#224-diccionarios-como-contenedores","text":"Los diccionarios son \u00fatiles si desea b\u00fasquedas aleatorias r\u00e1pidas (por nombre de clave). Por ejemplo, un diccionario de precios de acciones: prices = { 'GOOG': 513.25, 'CAT': 87.22, 'IBM': 93.37, 'MSFT': 44.12 } Aqu\u00ed hay algunas b\u00fasquedas simples: >>> prices['IBM'] 93.37 >>> prices['GOOG'] 513.25 >>>","title":"2.2.4: Diccionarios como contenedores"},{"location":"2/#225-construccion-de-un-diccionario","text":"Ejemplo de construcci\u00f3n de un dictado desde cero. prices = {} # Initial empty dict # Insert new items prices['GOOG'] = 513.25 prices['CAT'] = 87.22 prices['IBM'] = 93.37 Un ejemplo que completa el dict a partir del contenido de un archivo. prices = {} # Initial empty dict with open('Data/prices.csv', 'rt') as f: for line in f: row = line.split(',') prices[row[0]] = float(row[1]) Nota: Si prueba esto en el Data/prices.csvarchivo, encontrar\u00e1 que casi funciona; hay una l\u00ednea en blanco al final que hace que se bloquee. Necesitar\u00e1 encontrar alguna forma de modificar el c\u00f3digo para tener en cuenta eso (vea el ejercicio 2.6).","title":"2.2.5: Construcci\u00f3n de un diccionario"},{"location":"2/#226-busquedas-de-diccionario","text":"Puede probar la existencia de una clave. if key in d: # YES else: # NO Puede buscar un valor que podr\u00eda no existir y proporcionar un valor predeterminado en caso de que no exista. name = d.get(key, default) Un ejemplo: >>> prices.get('IBM', 0.0) 93.37 >>> prices.get('SCOX', 0.0) 0.0 >>>","title":"2.2.6: B\u00fasquedas de diccionario"},{"location":"2/#227-claves-compuestas","text":"Casi cualquier tipo de valor se puede utilizar como clave de diccionario en Python. Una clave de diccionario debe ser de un tipo que sea inmutable. Por ejemplo, tuplas: holidays = { (1, 1) : 'New Years', (3, 14) : 'Pi day', (9, 13) : \"Programmer's day\", } Luego para acceder: >>> holidays[3, 14] 'Pi day' >>> Ni una lista, un conjunto ni otro diccionario pueden servir como clave de diccionario, porque las listas y los diccionarios son mutables.","title":"2.2.7: Claves compuestas"},{"location":"2/#228-conjuntos-sets","text":"Los conjuntos son una colecci\u00f3n de elementos \u00fanicos desordenados. tech_stocks = { 'IBM','AAPL','MSFT' } # alternativamente: tech_stocks = set(['IBM', 'AAPL', 'MSFT']) Los conjuntos son \u00fatiles para las pruebas de pertenencia. >>> tech_stocks set(['AAPL', 'IBM', 'MSFT']) >>> 'IBM' in tech_stocks True >>> 'FB' in tech_stocks False >>> Los conjuntos tambi\u00e9n son \u00fatiles para la eliminaci\u00f3n de duplicados. names = ['IBM', 'AAPL', 'GOOG', 'IBM', 'GOOG', 'YHOO'] unique = set(names) # unique = set(['IBM', 'AAPL','GOOG','YHOO']) Operaciones de conjuntos adicionales: names.add('CAT') # Add an item names.remove('YHOO') # Remove an item s1 | s2 # Set union s1 & s2 # Set intersection s1 - s2 # Set difference","title":"2.2.8: Conjuntos (Sets)"},{"location":"2/#229-ejercicios","text":"En estos ejercicios, comenzar\u00e1 a crear uno de los programas principales que se utilizar\u00e1n durante el resto de este curso. Haga su trabajo en el archivo Work/report.py .","title":"2.2.9: Ejercicios"},{"location":"2/#ejercicio-24-una-lista-de-tuplas","text":"El archivo Data/portfolio.csvcontiene una lista de acciones en una cartera. En el ejercicio 1.30 , escribi\u00f3 una funci\u00f3n portfolio_cost(filename)que ley\u00f3 este archivo y realiz\u00f3 un c\u00e1lculo simple. Tu c\u00f3digo deber\u00eda haberse visto as\u00ed: # pcost.py import csv def portfolio_cost(filename): '''Computes the total cost (shares*price) of a portfolio file''' total_cost = 0.0 with open(filename, 'rt') as f: rows = csv.reader(f) headers = next(rows) for row in rows: nshares = int(row[1]) price = float(row[2]) total_cost += nshares * price return total_cost Usando este c\u00f3digo como una gu\u00eda aproximada, cree un nuevo archivo report.py. En ese archivo, defina una funci\u00f3n read_portfolio(filename)que abra un archivo de cartera determinado y lo lea en una lista de tuplas. Para hacer esto, va a realizar algunas modificaciones menores al c\u00f3digo anterior. Primero, en lugar de definir total_cost = 0, crear\u00e1 una variable que inicialmente se establece en una lista vac\u00eda. Por ejemplo: portfolio = [] A continuaci\u00f3n, en lugar de sumar el costo total, convertir\u00e1 cada fila en una tupla exactamente como lo hizo en el \u00faltimo ejercicio y la agregar\u00e1 a esta lista. Por ejemplo: for row in rows: holding = (row[0], int(row[1]), float(row[2])) portfolio.append(holding) Finalmente, devolver\u00e1 la portfoliolista resultante . Experimente con su funci\u00f3n de forma interactiva (solo un recordatorio de que para hacer esto, primero debe ejecutar el report.pyprograma en el int\u00e9rprete): Sugerencia: Haga uso de -i al ejecutar el archivo en la terminal, e.g. $ python -i archivo.py >>> portfolio = read_portfolio('Data/portfolio.csv') >>> portfolio [('AA', 100, 32.2), ('IBM', 50, 91.1), ('CAT', 150, 83.44), ('MSFT', 200, 51.23), ('GE', 95, 40.37), ('MSFT', 50, 65.1), ('IBM', 100, 70.44)] >>> >>> portfolio[0] ('AA', 100, 32.2) >>> portfolio[1] ('IBM', 50, 91.1) >>> portfolio[1][1] 50 >>> total = 0.0 >>> for s in portfolio: total += s[1] * s[2] >>> print(total) 44671.15 >>> Esta lista de tuplas que ha creado es muy similar a una matriz 2-D. Por ejemplo, puede acceder a una columna y una fila espec\u00edficas mediante una b\u00fasqueda como portfolio[row][column]d\u00f3nde rowy columnson n\u00fameros enteros. Dicho esto, tambi\u00e9n puede reescribir el \u00faltimo ciclo for usando una declaraci\u00f3n como esta: >>> total = 0.0 >>> for name, shares, price in portfolio: total += shares*price >>> print(total) 44671.15 >>>","title":"Ejercicio 2.4: Una lista de tuplas"},{"location":"2/#ejercicio-25-lista-de-diccionarios","text":"Tome la funci\u00f3n que escribi\u00f3 en el ejercicio 2.4 y modif\u00edquela para representar cada acci\u00f3n de la cartera con un diccionario en lugar de una tupla. En este diccionario, use los nombres de campo de \"nombre\", \"acciones\" y \"precio\" para representar las diferentes columnas en el archivo de entrada. Experimente con esta nueva funci\u00f3n de la misma manera que lo hizo en el ejercicio 2.4. >>> portfolio = read_portfolio('Data/portfolio.csv') >>> portfolio [{'name': 'AA', 'shares': 100, 'price': 32.2}, {'name': 'IBM', 'shares': 50, 'price': 91.1}, {'name': 'CAT', 'shares': 150, 'price': 83.44}, {'name': 'MSFT', 'shares': 200, 'price': 51.23}, {'name': 'GE', 'shares': 95, 'price': 40.37}, {'name': 'MSFT', 'shares': 50, 'price': 65.1}, {'name': 'IBM', 'shares': 100, 'price': 70.44}] >>> portfolio[0] {'name': 'AA', 'shares': 100, 'price': 32.2} >>> portfolio[1] {'name': 'IBM', 'shares': 50, 'price': 91.1} >>> portfolio[1]['shares'] 50 >>> total = 0.0 >>> for s in portfolio: total += s['shares']*s['price'] >>> print(total) 44671.15 >>> Aqu\u00ed, notar\u00e1 que se accede a los diferentes campos para cada entrada mediante nombres de clave en lugar de n\u00fameros de columna num\u00e9ricos. Esto se prefiere a menudo porque el c\u00f3digo resultante es m\u00e1s f\u00e1cil de leer m\u00e1s tarde. Ver diccionarios y listas de gran tama\u00f1o puede resultar complicado. Para limpiar la salida para la depuraci\u00f3n, considere usar la funci\u00f3n pprint . >>> from pprint import pprint >>> pprint(portfolio) [{'name': 'AA', 'price': 32.2, 'shares': 100}, {'name': 'IBM', 'price': 91.1, 'shares': 50}, {'name': 'CAT', 'price': 83.44, 'shares': 150}, {'name': 'MSFT', 'price': 51.23, 'shares': 200}, {'name': 'GE', 'price': 40.37, 'shares': 95}, {'name': 'MSFT', 'price': 65.1, 'shares': 50}, {'name': 'IBM', 'price': 70.44, 'shares': 100}] >>>","title":"Ejercicio 2.5: Lista de diccionarios"},{"location":"2/#ejercicio-26-diccionarios-como-contenedor","text":"Un diccionario es una forma \u00fatil de realizar un seguimiento de los elementos en los que desea buscar elementos utilizando un \u00edndice que no sea un n\u00famero entero. En el shell de Python, intente jugar con un diccionario: >>> prices = { } >>> prices['IBM'] = 92.45 >>> prices['MSFT'] = 45.12 >>> prices ... look at the result ... >>> prices['IBM'] 92.45 >>> prices['AAPL'] ... look at the result ... >>> 'AAPL' in prices False >>> El archivo Data/prices.csvcontiene una serie de l\u00edneas con precios de acciones. El archivo se parece a esto: \"AA\",9.22 \"AXP\",24.85 \"BA\",44.85 \"BAC\",11.27 \"C\",3.72 ... Escriba una funci\u00f3n read_prices(filename)que lea un conjunto de precios como este en un diccionario donde las claves del diccionario son los nombres de las acciones y los valores en el diccionario son los precios de las acciones. Para hacer esto, comience con un diccionario vac\u00edo y comience a insertar valores en \u00e9l tal como lo hizo anteriormente. Sin embargo, ahora est\u00e1 leyendo los valores de un archivo. Usaremos esta estructura de datos para buscar r\u00e1pidamente el precio de un nombre de acci\u00f3n determinado. Algunos peque\u00f1os consejos que necesitar\u00e1 para esta parte. Primero, aseg\u00farese de usar el csvm\u00f3dulo tal como lo hizo antes, no es necesario reinventar la rueda aqu\u00ed. >>> import csv >>> f = open('Data/prices.csv', 'r') >>> rows = csv.reader(f) >>> for row in rows: print(row) ['AA', '9.22'] ['AXP', '24.85'] ... [] >>> La otra peque\u00f1a complicaci\u00f3n es que el Data/prices.csvarchivo puede tener algunas l\u00edneas en blanco. Observe c\u00f3mo la \u00faltima fila de datos de arriba es una lista vac\u00eda, lo que significa que no hab\u00eda datos presentes en esa l\u00ednea. Existe la posibilidad de que esto provoque la muerte de su programa con una excepci\u00f3n. Utilice las declaraciones tryy exceptpara detectar esto seg\u00fan corresponda. Pensamiento: \u00bfser\u00eda mejor protegerse contra datos incorrectos con una ifdeclaraci\u00f3n -en su lugar? Una vez que haya escrito su funci\u00f3n read_prices(), pru\u00e9bela de forma interactiva para asegurarse de que funcione: >>> prices = read_prices('Data/prices.csv') >>> prices['IBM'] 106.28 >>> prices['MSFT'] 20.89 >>> La otra peque\u00f1a complicaci\u00f3n es que el archivo Data/prices.csv puede tener algunas l\u00edneas en blanco. Observe c\u00f3mo la \u00faltima fila de datos de arriba es una lista vac\u00eda, lo que significa que no hab\u00eda datos presentes en esa l\u00ednea. Existe la posibilidad de que esto provoque la muerte de su programa con una excepci\u00f3n. Utilice las declaraciones tryy exceptpara detectar esto seg\u00fan corresponda. Pensamiento: \u00bfser\u00eda mejor protegerse contra datos incorrectos con una ifdeclaraci\u00f3n -en su lugar? Una vez que haya escrito su funci\u00f3n read_prices() , pru\u00e9bela de forma interactiva para asegurarse de que funcione: >>> prices = read_prices('Data/prices.csv') >>> prices['IBM'] 106.28 >>> prices['MSFT'] 20.89 >>>","title":"Ejercicio 2.6: Diccionarios como contenedor"},{"location":"2/#ejercicio-27-descubra-se-puede-jubilar","text":"Complete este trabajo agregando algunas declaraciones adicionales a su programa report.py que calculen ganancias / p\u00e9rdidas. Estas declaraciones deben tomar la lista de acciones del ejercicio 2.5 y el diccionario de precios del ejercicio 2.6 y calcular el valor actual de la cartera junto con la ganancia / p\u00e9rdida.","title":"Ejercicio 2.7: Descubra se puede jubilar"},{"location":"2/#23-salida-formateada","text":"Esta secci\u00f3n es una peque\u00f1a digresi\u00f3n, pero cuando trabaja con datos, a menudo desea producir resultados estructurados (tablas, etc.). Por ejemplo: Name Shares Price ---------- ---------- ----------- AA 100 32.20 IBM 50 91.10 CAT 150 83.44 MSFT 200 51.23 GE 95 40.37 MSFT 50 65.10 IBM 100 70.44","title":"2.3 Salida formateada"},{"location":"2/#231-formateo-de-cadena","text":"Una forma de formatear cadenas en Python 3.6+ es con f-strings. >>> name = 'IBM' >>> shares = 100 >>> price = 91.1 >>> f'{name:>10s} {shares:>10d} {price:>10.2f}' ' IBM 100 91.10' >>> La pieza {expression:format} se reemplaza. Se usa com\u00fanmente con print. print(f'{name:>10s} {shares:>10d} {price:>10.2f}')","title":"2.3.1: Formateo de cadena"},{"location":"2/#232-codigos-de-formato","text":"C\u00f3digos de formato (despu\u00e9s de que el :interior de la {}) son similares a C printf(). Los c\u00f3digos comunes incluyen: d Decimal integer b Binary integer x Hexadecimal integer f Float as [-]m.dddddd e Float as [-]m.dddddde+-xx g Float, but selective use of E notation s String c Character (from integer) Los modificadores comunes ajustan el ancho del campo y la precisi\u00f3n decimal. Esta es una lista parcial: :>10d Integer right aligned in 10-character field :<10d Integer left aligned in 10-character field :^10d Integer centered in 10-character field :0.2f Float with 2 digit precision","title":"2.3.2: C\u00f3digos de formato"},{"location":"2/#233-formateo-de-diccionarios","text":"Puede utilizar el format_map()m\u00e9todo para aplicar formato de cadena a un diccionario de valores: >>> s = { 'name': 'IBM', 'shares': 100, 'price': 91.1 } >>> '{name:>10s} {shares:10d} {price:10.2f}'.format_map(s) ' IBM 100 91.10' >>> Utiliza los mismos c\u00f3digos que f-stringspero toma los valores del diccionario suministrado.","title":"2.3.3: Formateo de diccionarios"},{"location":"2/#234-el-metodo-format","text":"Existe un m\u00e9todo format()que puede aplicar formato a argumentos o argumentos de palabras clave. >>> '{name:>10s} {shares:10d} {price:10.2f}'.format(name='IBM', shares=100, price=91.1) ' IBM 100 91.10' >>> '{:10s} {:10d} {:10.2f}'.format('IBM', 100, 91.1) ' IBM 100 91.10' >>> Francamente, format()es un poco prolijo. Prefiero las cuerdas f.","title":"2.3.4: El m\u00e9todo format()"},{"location":"2/#235-formateo-al-estilo-c","text":"Tambi\u00e9n puede utilizar el operador de formato % . >>> 'The value is %d' % 3 'The value is 3' >>> '%5d %-5d %10d' % (3,4,5) ' 3 4 5' >>> '%0.2f' % (3.1415926,) '3.14' Esto requiere un solo elemento o una tupla a la derecha. C\u00f3digos de formato son el modelo de la C printf() tambi\u00e9n. Nota: Este es el \u00fanico formato disponible en cadenas de bytes. >>> b'%s has %n messages' % (b'Dave', 37) b'Dave has 37 messages' >>>","title":"2.3.5: Formateo al estilo C"},{"location":"2/#236-ejercicios","text":"","title":"2.3.6: Ejercicios"},{"location":"2/#ejercicio-28-como-formatear-numeros","text":"Un problema com\u00fan al imprimir n\u00fameros es especificar el n\u00famero de decimales. Una forma de solucionar este problema es usar f-strings. Prueba estos ejemplos: >>> value = 42863.1 >>> print(value) 42863.1 >>> print(f'{value:0.4f}') 42863.1000 >>> print(f'{value:>16.2f}') 42863.10 >>> print(f'{value:<16.2f}') 42863.10 >>> print(f'{value:*>16,.2f}') *******42,863.10 >>> La documentaci\u00f3n completa sobre los c\u00f3digos de formato utilizados para las cadenas f se puede encontrar aqu\u00ed . El formateo tambi\u00e9n se realiza a veces utilizando el operador % de cadenas. >>> print('%0.4f' % value) 42863.1000 >>> print('%16.2f' % value) 42863.10 >>> La documentaci\u00f3n sobre varios c\u00f3digos utilizados con %se puede encontrar aqu\u00ed. Aunque se usa com\u00fanmente con print, el formato de cadena no est\u00e1 ligado a la impresi\u00f3n. Si desea guardar una cadena formateada. Simplemente as\u00edgnelo a una variable. >>> f = '%0.4f' % value >>> f '42863.1000' >>>","title":"Ejercicio 2.8: Como formatear numeros"},{"location":"2/#ejercicio-29-coleccionando-data","text":"En el ejercicio 2.7, escribi\u00f3 un programa llamado report.pyque calcul\u00f3 la ganancia / p\u00e9rdida de una cartera de acciones. En este ejercicio, comenzar\u00e1 a modificarlo para producir una tabla como esta: Name Shares Price Change ---------- ---------- ---------- ---------- AA 100 9.22 -22.98 IBM 50 106.28 15.18 CAT 150 35.46 -47.98 MSFT 200 20.89 -30.34 GE 95 13.48 -26.89 MSFT 50 20.89 -44.21 IBM 100 106.28 35.84 En este informe, \"Precio\" es el precio actual de la acci\u00f3n de la acci\u00f3n y \"Cambio\" es el cambio en el precio de la acci\u00f3n desde el precio de compra inicial. Para generar el informe anterior, primero querr\u00e1 recopilar todos los datos que se muestran en la tabla. Escriba una funci\u00f3n make_report() que tome una lista de existencias y un diccionario de precios como entrada y devuelva una lista de tuplas que contenga las filas de la tabla anterior. Agregue esta funci\u00f3n a su report.pyarchivo. As\u00ed es como deber\u00eda funcionar si lo prueba de forma interactiva: >>> portfolio = read_portfolio('Data/portfolio.csv') >>> prices = read_prices('Data/prices.csv') >>> report = make_report(portfolio, prices) >>> for r in report: print(r) ('AA', 100, 9.22, -22.980000000000004) ('IBM', 50, 106.28, 15.180000000000007) ('CAT', 150, 35.46, -47.98) ('MSFT', 200, 20.89, -30.339999999999996) ('GE', 95, 13.48, -26.889999999999997) ... >>>","title":"Ejercicio 2.9: Coleccionando data"},{"location":"2/#ejercicio-210-imprimiendo-una-tabla-formateada","text":"Rehaga el bucle for del ejercicio 2.9, pero cambie la instrucci\u00f3n print para formatear las tuplas. >>> for r in report: print('%10s %10d %10.2f %10.2f' % r) AA 100 9.22 -22.98 IBM 50 106.28 15.18 CAT 150 35.46 -47.98 MSFT 200 20.89 -30.34 ... >>> Tambi\u00e9n puede expandir los valores y usar f-strings. Por ejemplo: >>> for name, shares, price, change in report: print(f'{name:>10s} {shares:>10d} {price:>10.2f} {change:>10.2f}') AA 100 9.22 -22.98 IBM 50 106.28 15.18 CAT 150 35.46 -47.98 MSFT 200 20.89 -30.34 ... >>> Tome las declaraciones anteriores y agr\u00e9guelas a su report.pyprograma. Haga que su programa tome la salida de la funci\u00f3n make_report() e imprima una tabla bien formateada como se muestra.","title":"Ejercicio 2.10: Imprimiendo una tabla formateada"},{"location":"2/#ejercicio-211-agregando-algunos-encabezados","text":"Suponga que tiene una tupla de nombres de encabezado como este: headers = ('Name', 'Shares', 'Price', 'Change') Agregue c\u00f3digo a su programa que toma la tupla de encabezados anterior y crea una cadena donde cada nombre de encabezado est\u00e1 alineado a la derecha en un campo de 10 caracteres de ancho y cada campo est\u00e1 separado por un solo espacio. ' Name Shares Price Change' Escriba c\u00f3digo que tome los encabezados y cree la cadena de separaci\u00f3n entre los encabezados y los datos que siguen. Esta cadena es solo un grupo de caracteres \"-\" debajo de cada nombre de campo. Por ejemplo: '---------- ---------- ---------- -----------' Cuando haya terminado, su programa deber\u00eda producir la tabla que se muestra en la parte superior de este ejercicio. Name Shares Price Change ---------- ---------- ---------- ---------- AA 100 9.22 -22.98 IBM 50 106.28 15.18 CAT 150 35.46 -47.98 MSFT 200 20.89 -30.34 GE 95 13.48 -26.89 MSFT 50 20.89 -44.21 IBM 100 106.28 35.84","title":"Ejercicio 2.11: Agregando algunos encabezados"},{"location":"2/#ejercicio-212-un-reto","text":"\u00bfC\u00f3mo modificar\u00eda su c\u00f3digo para que el precio incluya el s\u00edmbolo de moneda ($) y la salida se vea as\u00ed: Name Shares Price Change ---------- ---------- ---------- ---------- AA 100 $9.22 -22.98 IBM 50 $106.28 15.18 CAT 150 $35.46 -47.98 MSFT 200 $20.89 -30.34 GE 95 $13.48 -26.89 MSFT 50 $20.89 -44.21 IBM 100 $106.28 35.84","title":"Ejercicio 2.12: Un reto"},{"location":"2/#24-secuencias","text":"","title":"2.4 Secuencias"},{"location":"2/#241-tipos-de-secuencias","text":"Python tiene tres tipos de datos de secuencia . Cuerda: 'Hello' . Una cadena es una secuencia de caracteres. Lista: [1, 4, 5] . Tupla: ('GOOG', 100, 490.1) . Todas las secuencias est\u00e1n ordenadas, indexadas por n\u00fameros enteros y tienen una longitud. a = 'Hello' # String b = [1, 4, 5] # List c = ('GOOG', 100, 490.1) # Tuple # Indexed order a[0] # 'H' b[-1] # 5 c[1] # 100 # Length of sequence len(a) # 5 len(b) # 3 len(c) # 3 Las secuencias pueden ser replicados: s * n . >>> a = 'Hello' >>> a * 3 'HelloHelloHello' >>> b = [1, 2, 3] >>> b * 2 [1, 2, 3, 1, 2, 3] >>> Secuencias del mismo tipo pueden ser concatenados: s + t . >>> a = (1, 2, 3) >>> b = (4, 5) >>> a + b (1, 2, 3, 4, 5) >>> >>> c = [1, 5] >>> a + c Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: can only concatenate tuple (not \"list\") to tuple","title":"2.4.1: Tipos de secuencias"},{"location":"2/#242-cortar","text":"Cortar significa tomar una subsecuencia de una secuencia. La sintaxis es s[start:end] . Donde start y end son los \u00edndices de la subsecuencia que desea. a = [0,1,2,3,4,5,6,7,8] a[2:5] # [2,3,4] a[-5:] # [4,5,6,7,8] a[:3] # [0,1,2] \u00cdndices start y end deben ser n\u00fameros enteros. Las rebanadas no incluyen el valor final. Es como un intervalo medio abierto de matem\u00e1ticas. Si se omiten los \u00edndices, por defecto van al principio o al final de la lista.","title":"2.4.2: Cortar"},{"location":"2/#243-reasignacion-de-cortes","text":"En las listas, los sectores se pueden reasignar y eliminar. # Reasginaci\u00f3n a = [0,1,2,3,4,5,6,7,8] a[2:4] = [10,11,12] # [0,1,10,11,12,4,5,6,7,8] Nota: No es necesario que el segmento reasignado tenga la misma longitud. # Remoci\u00f3n a = [0,1,2,3,4,5,6,7,8] del a[2:4] # [0,1,4,5,6,7,8]","title":"2.4.3: Reasignaci\u00f3n de cortes"},{"location":"2/#244-secuencia-de-reducciones","text":"Existen algunas funciones comunes para reducir una secuencia a un solo valor. >>> s = [1, 2, 3, 4] >>> sum(s) 10 >>> min(s) 1 >>> max(s) 4 >>> t = ['Hello', 'World'] >>> max(t) 'World' >>>","title":"2.4.4: Secuencia de reducciones"},{"location":"2/#245-iteracion-sobre-una-secuencia","text":"El bucle for itera sobre los elementos en una secuencia. >>> s = [1, 4, 9, 16] >>> for i in s: ... print(i) ... 1 4 9 16 >>> En cada iteraci\u00f3n del ciclo, obtienes un nuevo elemento con el que trabajar. Este nuevo valor se coloca en la variable de iteraci\u00f3n. En este ejemplo, la variable de iteraci\u00f3n es x : for x in s: # `x` es una variable de iteraci\u00f3n ...declaraciones En cada iteraci\u00f3n, el valor anterior de la variable de iteraci\u00f3n se sobrescribe (si lo hubiera). Una vez finalizado el ciclo, la variable retiene el \u00faltimo valor.","title":"2.4.5: Iteracion sobre una secuencia"},{"location":"2/#246-la-declaracion-break","text":"Puede usar la break declaraci\u00f3n para salir de un ciclo antes de tiempo. for name in namelist: if name == 'Jake': break ... ... declaraciones Cuando la break instrucci\u00f3n se ejecuta, sale del ciclo y pasa al siguiente statements . La declaraci\u00f3n break solo se aplica al bucle m\u00e1s interno. Si este bucle est\u00e1 dentro de otro bucle, no romper\u00e1 el bucle exterior.","title":"2.4.6: La declaraci\u00f3n break"},{"location":"2/#247-la-declaracion-continue","text":"Para omitir un elemento y pasar al siguiente, use la continue declaraci\u00f3n. for line in lines: if line == '\\n': # Skip blank lines continue # More statements ... Esto es \u00fatil cuando el elemento actual no es de inter\u00e9s o debe ignorarse en el procesamiento.","title":"2.4.7: La declaraci\u00f3n continue"},{"location":"2/#248-ciclando-sobre-enteros","text":"Si necesita contar, use range() . for i in range(100): # i = 0,1,...,99 La sintaxis es range([start,] end [,step]) for i in range(100): # i = 0,1,...,99 for j in range(10,20): # j = 10,11,..., 19 for k in range(10,50,2): # k = 10,12,...,48 # Note como cuenta en pasos de 2, no 1. El valor final nunca se incluye. Refleja el comportamiento de los cortes. start es opcional. Por defecto 0 . step es opcional. Por defecto 1 . range() calcula los valores seg\u00fan sea necesario. En realidad, no almacena una gran variedad de n\u00fameros.","title":"2.4.8: Ciclando sobre enteros"},{"location":"2/#249-la-funcion-enumerate","text":"La enumerate funci\u00f3n agrega un valor de contador adicional a la iteraci\u00f3n. names = ['Elwood', 'Jake', 'Curtis'] for i, name in enumerate(names): # Cicla con i = 0, name = 'Elwood' # i = 1, name = 'Jake' # i = 2, name = 'Curtis' La forma general es enumerate(sequence [, start = 0]) . start es opcional. Un buen ejemplo de uso enumerate() es el seguimiento de los n\u00fameros de l\u00ednea mientras se lee un archivo: with open(filename) as f: for lineno, line in enumerate(f, start=1): ... Al final, enumerate es solo un buen atajo para: i = 0 for x in s: statements i += 1 Usar enumerate es escribir menos y se ejecuta un poco m\u00e1s r\u00e1pido.","title":"2.4.9: La funci\u00f3n enumerate()"},{"location":"2/#2410-for-y-tuplas","text":"Puede iterar con m\u00faltiples variables de iteraci\u00f3n. points = [ (1, 4),(10, 40),(23, 14),(5, 6),(7, 8) ] for x, y in points: # Cicla con x = 1, y = 4 # x = 10, y = 40 # x = 23, y = 14 # ... Cuando se utilizan varias variables, cada tupla se descompone en un conjunto de variables de iteraci\u00f3n. El n\u00famero de variables debe coincidir con el n\u00famero de elementos de cada tupla.","title":"2.4.10: for y tuplas"},{"location":"2/#2411-la-funcion-zip","text":"La zip funci\u00f3n toma m\u00faltiples secuencias y crea un iterador que las combina. columns = ['name', 'shares', 'price'] values = ['GOOG', 100, 490.1 ] pairs = zip(columns, values) # ('name','GOOG'), ('shares',100), ('price',490.1) Para obtener el resultado, debes iterar. Puede utilizar varias variables para descomprimir las tuplas como se mostr\u00f3 anteriormente. for column, value in pairs: ... Un uso com\u00fan de zip es crear pares clave / valor para construir diccionarios. d = dict(zip(columns, values))","title":"2.4.11: La funci\u00f3n zip()"},{"location":"2/#2412-ejercicios","text":"","title":"2.4.12: Ejercicios"},{"location":"2/#ejercicio-213-contar","text":"Pruebe algunos ejemplos b\u00e1sicos de conteo: >>> for n in range(10): # Cuenta 0 ... 9 print(n, end=' ') 0 1 2 3 4 5 6 7 8 9 >>> for n in range(10,0,-1): # Cuenta 10 ... 1 print(n, end=' ') 10 9 8 7 6 5 4 3 2 1 >>> for n in range(0,10,2): # Cuenta 0, 2, ... 8 print(n, end=' ') 0 2 4 6 8 >>>","title":"Ejercicio 2.13: Contar"},{"location":"2/#ejercicio-214-mas-operaciones-sobre-secuencias","text":"Experimente interactivamente con algunas de las operaciones de reducci\u00f3n de secuencia. >>> data = [4, 9, 1, 25, 16, 100, 49] >>> min(data) 1 >>> max(data) 100 >>> sum(data) 204 >>> Intente recorrer los datos. >>> for x in data: print(x) 4 9 ... >>> for n, x in enumerate(data): print(n, x) 0 4 1 9 2 1 ... >> A veces, los principiantes usan la for instrucci\u00f3n, len() y range() en alg\u00fan tipo de fragmento de c\u00f3digo horrible que parece surgido de las profundidades de un programa C oxidado. >>> for n in range(len(data)): print(data[n]) 4 9 1 ... >>> \u00a1No hagas eso! Leerlo no solo hace sangrar los ojos de todos, es ineficiente con la memoria y funciona mucho m\u00e1s lento. Simplemente use un for bucle normal si desea iterar sobre los datos. \u00daselo enumerate() si necesita el \u00edndice por alguna raz\u00f3n.","title":"Ejercicio 2.14: Mas operaciones sobre secuencias"},{"location":"2/#ejercicio-215-un-ejemplo-practico-de-enumerate","text":"Recuerde que el archivo Data/missing.csv contiene datos para una cartera de acciones, pero tiene algunas filas con datos faltantes. Usando enumerate() , modifique su pcost.py programa para que imprima un n\u00famero de l\u00ednea con el mensaje de advertencia cuando encuentre una entrada incorrecta. >>> cost = portfolio_cost('Data/missing.csv') Row 4: Couldn't convert: ['MSFT', '', '51.23'] Row 7: Couldn't convert: ['IBM', '', '70.44'] >>> Para hacer esto, necesitar\u00e1 cambiar algunas partes de su c\u00f3digo. ... for rowno, row in enumerate(rows, start=1): try: ... except ValueError: print(f'Fila {rowno}: Mala fila: {row}')","title":"Ejercicio 2.15: Un ejemplo pr\u00e1ctico de enumerate()"},{"location":"2/#ejercicio-216-usando-la-funcion-zip","text":"En el archivo Data/portfolio.csv , la primera l\u00ednea contiene encabezados de columna. En todo el c\u00f3digo anterior, los hemos estado descartando. >>> f = open('Data/portfolio.csv') >>> rows = csv.reader(f) >>> headers = next(rows) >>> headers ['name', 'shares', 'price'] >>> Sin embargo, \u00bfqu\u00e9 pasar\u00eda si pudieras usar los encabezados para algo \u00fatil? Aqu\u00ed es donde la zip() funci\u00f3n entra en escena. Primero intente esto para emparejar los encabezados del archivo con una fila de datos: >>> row = next(rows) >>> row ['AA', '100', '32.20'] >>> list(zip(headers, row)) [ ('name', 'AA'), ('shares', '100'), ('price', '32.20') ] >>> Observe c\u00f3mo se zip() emparejaron los encabezados de columna con los valores de columna. Hemos utilizado list() aqu\u00ed para convertir el resultado en una lista para que pueda verlo. Normalmente, zip() crea un iterador que debe consumir un bucle for. Este emparejamiento es un paso intermedio para crear un diccionario. Ahora prueba esto: >>> record = dict(zip(headers, row)) >>> record {'price': '32.20', 'name': 'AA', 'shares': '100'} >>> Esta transformaci\u00f3n es uno de los trucos m\u00e1s \u00fatiles que debe conocer al procesar muchos archivos de datos. Por ejemplo, suponga que desea que el pcost.py programa funcione con varios archivos de entrada, pero sin tener en cuenta el n\u00famero de columna real donde aparecen el nombre, las acciones y el precio. Modifique la portfolio_cost() funci\u00f3n pcost.py para que se vea as\u00ed: # pcost.py def portfolio_cost(filename): ... for rowno, row in enumerate(rows, start=1): record = dict(zip(headers, row)) try: nshares = int(record['shares']) price = float(record['price']) total_cost += nshares * price except ValueError: # Esto atrapa errores de conversi\u00f3n a int() y float() print(f'Fila {rowno}: Mala fila: {row}') ... Ahora, pruebe su funci\u00f3n en un archivo de datos completamente diferente Data/portfoliodate.csv que se ve as\u00ed: name,date,time,shares,price \"AA\",\"6/11/2007\",\"9:50am\",100,32.20 \"IBM\",\"5/13/2007\",\"4:20pm\",50,91.10 \"CAT\",\"9/23/2006\",\"1:30pm\",150,83.44 \"MSFT\",\"5/17/2007\",\"10:30am\",200,51.23 \"GE\",\"2/1/2006\",\"10:45am\",95,40.37 \"MSFT\",\"10/31/2006\",\"12:05pm\",50,65.10 \"IBM\",\"7/9/2006\",\"3:15pm\",100,70.44 >>> portfolio_cost('Data/portfoliodate.csv') 44671.15 >>> Si lo hizo bien, ver\u00e1 que su programa a\u00fan funciona a pesar de que el archivo de datos tiene un formato de columna completamente diferente al anterior. \u00a1Eso es genial! El cambio realizado aqu\u00ed es sutil, pero significativo. En lugar de portfolio_cost() estar codificado para leer un solo formato de archivo fijo, la nueva versi\u00f3n lee cualquier archivo CSV y selecciona los valores de inter\u00e9s. Siempre que el archivo tenga las columnas requeridas, el c\u00f3digo funcionar\u00e1. Modifique el report.py programa que escribi\u00f3 en la Secci\u00f3n 2.3 para que utilice la misma t\u00e9cnica para seleccionar encabezados de columna. Intente ejecutar el report.py programa en el Data/portfoliodate.csv archivo y vea que produce la misma respuesta que antes.","title":"Ejercicio 2.16: Usando la funci\u00f3n zip()"},{"location":"2/#ejercicio-217-invirtiendo-un-diccionario","text":"Un diccionario asigna claves a valores. Por ejemplo, un diccionario de precios de acciones. >>> prices = { 'GOOG': 490.1, 'AA': 23.45, 'IBM': 91.1, 'MSFT': 34.23 } >>> Si usa el m\u00e9todo items() , puede obtener pares (key,value) : >>> prices.items() dict_items([('GOOG', 490.1), ('AA', 23.45), ('IBM', 91.1), ('MSFT', 34.23)]) >>> Sin embargo, \u00bfqu\u00e9 pasar\u00eda si quisiera obtener una lista de pares (value, key) ? Sugerencia: use zip() . >>> pricelist = list(zip(prices.values(),prices.keys())) >>> pricelist [(490.1, 'GOOG'), (23.45, 'AA'), (91.1, 'IBM'), (34.23, 'MSFT')] >>> \u00bfPor qu\u00e9 har\u00edas esto? Por un lado, le permite realizar ciertos tipos de procesamiento de datos en los datos del diccionario. >>> min(pricelist) (23.45, 'AA') >>> max(pricelist) (490.1, 'GOOG') >>> sorted(pricelist) [(23.45, 'AA'), (34.23, 'MSFT'), (91.1, 'IBM'), (490.1, 'GOOG')] >>> Esto tambi\u00e9n ilustra una caracter\u00edstica importante de las tuplas. Cuando se usan en comparaciones, las tuplas se comparan elemento por elemento comenzando con el primer elemento. Similar a c\u00f3mo se comparan las cadenas car\u00e1cter por car\u00e1cter. zip() se utiliza a menudo en situaciones como esta en las que necesita emparejar datos de diferentes lugares. Por ejemplo, emparejar los nombres de las columnas con los valores de las columnas para crear un diccionario de valores con nombre. Tenga en cuenta que zip() no se limita a pares. Por ejemplo, puede usarlo con cualquier n\u00famero de listas de entrada: >>> a = [1, 2, 3, 4] >>> b = ['w', 'x', 'y', 'z'] >>> c = [0.2, 0.4, 0.6, 0.8] >>> list(zip(a, b, c)) [(1, 'w', 0.2), (2, 'x', 0.4), (3, 'y', 0.6), (4, 'z', 0.8))] >>> Adem\u00e1s, tenga en cuenta que zip() se detiene una vez que se agota la secuencia de entrada m\u00e1s corta. >>> a = [1, 2, 3, 4, 5, 6] >>> b = ['x', 'y', 'z'] >>> list(zip(a,b)) [(1, 'x'), (2, 'y'), (3, 'z')] >>>","title":"Ejercicio 2.17: Invirtiendo un diccionario"},{"location":"2/#25-el-modulo-collections","text":"El collections m\u00f3dulo proporciona una serie de objetos \u00fatiles para el manejo de datos. Esta parte presenta brevemente algunas de estas caracter\u00edsticas.","title":"2.5 El modulo collections"},{"location":"2/#251-ejemplo-contando-cosas","text":"Digamos que desea tabular el total de acciones de cada acci\u00f3n. portfolio = [ ('GOOG', 100, 490.1), ('IBM', 50, 91.1), ('CAT', 150, 83.44), ('IBM', 100, 45.23), ('GOOG', 75, 572.45), ('AA', 50, 23.15) ] Hay dos IBM entradas y dos GOOG entradas en esta lista. Las acciones deben combinarse de alguna manera.","title":"2.5.1: Ejemplo: contando cosas"},{"location":"2/#252-contadores","text":"Soluci\u00f3n: utilice un Counter . from collections import Counter total_shares = Counter() for name, shares, price in portfolio: total_shares[name] += shares total_shares['IBM'] # 150","title":"2.5.2: Contadores"},{"location":"2/#253-ejemplo-asignaciones-uno-muchos","text":"Problema: desea asignar una clave a varios valores. portfolio = [ ('GOOG', 100, 490.1), ('IBM', 50, 91.1), ('CAT', 150, 83.44), ('IBM', 100, 45.23), ('GOOG', 75, 572.45), ('AA', 50, 23.15) ] Como en el ejemplo anterior, la clave IBM deber\u00eda tener dos tuplas diferentes en su lugar. Soluci\u00f3n: utilice un defaultdict . from collections import defaultdict holdings = defaultdict(list) for name, shares, price in portfolio: holdings[name].append((shares, price)) holdings['IBM'] # [ (50, 91.1), (100, 45.23) ] El defaultdict asegura que cada vez que acceda a una clave obtenga un valor predeterminado.","title":"2.5.3: Ejemplo: asignaciones uno-muchos"},{"location":"2/#254-ejemplo-un-historial","text":"Problema: queremos un historial de las \u00faltimas N cosas. Soluci\u00f3n: utilice un deque . from collections import deque history = deque(maxlen=N) with open(filename) as f: for line in f: history.append(line) ...","title":"2.5.4: Ejemplo: un historial"},{"location":"2/#255-ejercicios","text":"El collections m\u00f3dulo puede ser uno de los m\u00f3dulos de biblioteca m\u00e1s \u00fatiles para tratar tipos de problemas de manejo de datos con fines especiales, como la tabulaci\u00f3n y la indexaci\u00f3n. En este ejercicio, veremos algunos ejemplos simples. Comience ejecutando su report.py programa para que tenga la cartera de acciones cargada en el modo interactivo. bash % python3 -i report.py","title":"2.5.5: Ejercicios"},{"location":"2/#218-tabulacion-con-contadores","text":"Suponga que desea tabular el n\u00famero total de acciones de cada acci\u00f3n. Esto es f\u00e1cil de usar Counter objetos. Intentalo: >>> portfolio = read_portfolio('Data/portfolio.csv') >>> from collections import Counter >>> holdings = Counter() >>> for s in portfolio: holdings[s['name']] += s['shares'] >>> holdings Counter({'MSFT': 250, 'IBM': 150, 'CAT': 150, 'AA': 100, 'GE': 95}) >>> Observe cuidadosamente c\u00f3mo las m\u00faltiples entradas para MSFT y IBM en portfolio se combinan en una sola entrada aqu\u00ed. Puede usar un contador como un diccionario para recuperar valores individuales: >>> holdings['IBM'] 150 >>> holdings['MSFT'] 250 >>> Si desea clasificar los valores, haga esto: >>> # Get three most held stocks >>> holdings.most_common(3) [('MSFT', 250), ('IBM', 150), ('CAT', 150)] >>> Tomemos otra cartera de acciones y creemos un nuevo contador: >>> portfolio2 = read_portfolio('Data/portfolio2.csv') >>> holdings2 = Counter() >>> for s in portfolio2: holdings2[s['name']] += s['shares'] >>> holdings2 Counter({'HPQ': 250, 'GE': 125, 'AA': 50, 'MSFT': 25}) >>> Finalmente, combinemos todas las existencias haciendo una operaci\u00f3n simple: >>> holdings Counter({'MSFT': 250, 'IBM': 150, 'CAT': 150, 'AA': 100, 'GE': 95}) >>> holdings2 Counter({'HPQ': 250, 'GE': 125, 'AA': 50, 'MSFT': 25}) >>> combined = holdings + holdings2 >>> combined Counter({'MSFT': 275, 'HPQ': 250, 'GE': 220, 'AA': 150, 'IBM': 150, 'CAT': 150}) >>> Esto es solo una peque\u00f1a muestra de lo que ofrecen los contadores. Sin embargo, si alguna vez necesita tabular valores, deber\u00eda considerar usar uno.","title":"2.18: Tabulaci\u00f3n con contadores"},{"location":"2/#256-comentario-el-modulo-collections","text":"El m\u00f3dulo collections es uno de los m\u00f3dulos de biblioteca m\u00e1s \u00fatiles de todo Python. De hecho, podr\u00edamos hacer un tutorial extenso sobre eso. Sin embargo, hacerlo ahora tambi\u00e9n ser\u00eda una distracci\u00f3n. Por ahora, ponga collections su lista de lecturas a la hora de dormir para m\u00e1s tarde.","title":"2.5.6: Comentario: el modulo collections"},{"location":"2/#26-comprension-de-listas","text":"Una tarea com\u00fan es procesar elementos en una lista. Esta secci\u00f3n presenta listas por comprensi\u00f3n, una poderosa herramienta para hacer precisamente eso.","title":"2.6 Comprensi\u00f3n de Listas"},{"location":"2/#261-creando-nuevas-listas","text":"Una lista de comprensi\u00f3n crea una nueva lista aplicando una operaci\u00f3n a cada elemento de una secuencia. >>> a = [1, 2, 3, 4, 5] >>> b = [2*x for x in a ] >>> b [2, 4, 6, 8, 10] >>> Otro ejemplo: >>> names = ['Elwood', 'Jake'] >>> a = [name.lower() for name in names] >>> a ['elwood', 'jake'] >>> La sintaxis general es: [ <expresi\u00f3n> for <variable_nombre> in <secuencia> ] .","title":"2.6.1: Creando nuevas listas"},{"location":"2/#262-filtrar","text":"Tambi\u00e9n puede filtrar durante la comprensi\u00f3n de la lista. >>> a = [1, -5, 4, 2, -2, 10] >>> b = [2*x for x in a if x > 0 ] >>> b [2, 8, 4, 20] >>>","title":"2.6.2: Filtrar"},{"location":"2/#263-casos-de-uso","text":"Las listas por comprensi\u00f3n son muy \u00fatiles. Por ejemplo, puede recopilar valores de campos de un diccionario espec\u00edfico: stocknames = [s['name'] for s in stocks] Puede realizar consultas similares a bases de datos en secuencias. a = [s for s in stocks if s['price'] > 100 and s['shares'] > 50 ] Tambi\u00e9n puede combinar una comprensi\u00f3n de lista con una reducci\u00f3n de secuencia: cost = sum([s['shares']*s['price'] for s in stocks])","title":"2.6.3: Casos de uso"},{"location":"2/#264-sintaxis-general","text":"[ <expresi\u00f3n> for <variable_nombre> in <secuencia> si <condici\u00f3n>] Que significa: result = [] for variable_name in sequence: if condition: result.append(expression)","title":"2.6.4: Sintaxis general"},{"location":"2/#265-digresion-historica","text":"Las listas por comprensi\u00f3n provienen de las matem\u00e1ticas (notaci\u00f3n del generador de conjuntos). a = [ x * x for x in s if x > 0 ] # Python a = { x^2 | x \u2208 s, x > 0 } # Math Tambi\u00e9n se implementa en varios otros idiomas. Sin embargo, la mayor\u00eda de los programadores probablemente no est\u00e9n pensando en su clase de matem\u00e1ticas. Entonces, est\u00e1 bien verlo como un atajo de lista genial.","title":"2.6.5: Digresi\u00f3n hist\u00f3rica"},{"location":"2/#266-ejercicios","text":"Comience ejecutando su report.py programa para que tenga la cartera de acciones cargada en el modo interactivo. bash % python3 -i report.py","title":"2.6.6: Ejercicios"},{"location":"2/#ejercicio-219-comprension-de-listas","text":"Pruebe algunas comprensiones de listas simples solo para familiarizarse con la sintaxis. >>> nums = [1,2,3,4] >>> squares = [ x * x for x in nums ] >>> squares [1, 4, 9, 16] >>> twice = [ 2 * x for x in nums if x > 2 ] >>> twice [6, 8] >>> Observe c\u00f3mo las listas por comprensi\u00f3n est\u00e1n creando una nueva lista con los datos adecuadamente transformados o filtrados.","title":"Ejercicio 2.19: Comprension de listas"},{"location":"2/#ejercicio-220-reducciones-de-secuencia","text":"Calcule el costo total de la cartera con una sola declaraci\u00f3n de Python. >>> portfolio = read_portfolio('Data/portfolio.csv') >>> cost = sum([ s['shares'] * s['price'] for s in portfolio ]) >>> cost 44671.15 >>> Despu\u00e9s de haber hecho eso, muestre c\u00f3mo puede calcular el valor actual de la cartera con un solo extracto. >>> value = sum([ s['shares'] * prices[s['name']] for s in portfolio ]) >>> value 28686.1 >>> Ambas operaciones anteriores son un ejemplo de reducci\u00f3n de mapa. La comprensi\u00f3n de la lista est\u00e1 mapeando una operaci\u00f3n a lo largo de la lista. >>> [ s['shares'] * s['price'] for s in portfolio ] [3220.0000000000005, 4555.0, 12516.0, 10246.0, 3835.1499999999996, 3254.9999999999995, 7044.0] >>> La sum() funci\u00f3n est\u00e1 realizando despu\u00e9s una reducci\u00f3n en todo el resultado: >>> sum(_) 44671.15 >>> Con este conocimiento, ahora est\u00e1 listo para lanzar una nueva empresa de big data.","title":"Ejercicio 2.20: Reducciones de secuencia"},{"location":"2/#ejercicio-221-consulta-de-datos","text":"Pruebe los siguientes ejemplos de varias consultas de datos. Primero, una lista de todas las posiciones de la cartera con m\u00e1s de 100 acciones. >>> more100 = [ s for s in portfolio if s['shares'] > 100 ] >>> more100 [{'price': 83.44, 'name': 'CAT', 'shares': 150}, {'price': 51.23, 'name': 'MSFT', 'shares': 200}] >>> Todas las posiciones en cartera de acciones de MSFT e IBM. >>> msftibm = [ s for s in portfolio if s['name'] in {'MSFT','IBM'} ] >>> msftibm [{'price': 91.1, 'name': 'IBM', 'shares': 50}, {'price': 51.23, 'name': 'MSFT', 'shares': 200}, {'price': 65.1, 'name': 'MSFT', 'shares': 50}, {'price': 70.44, 'name': 'IBM', 'shares': 100}] >>> Una lista de todas las tenencias de la cartera que cuestan m\u00e1s de $10000 . >>> cost10k = [ s for s in portfolio if s['shares'] * s['price'] > 10000 ] >>> cost10k [{'price': 83.44, 'name': 'CAT', 'shares': 150}, {'price': 51.23, 'name': 'MSFT', 'shares': 200}] >>>","title":"Ejercicio 2.21: Consulta de datos"},{"location":"2/#ejercicio-222-extraccion-de-datos","text":"Mostrar c\u00f3mo se podr\u00eda construir una lista de tuplas (name, shares) , donde name y shares son tomados de portfolio . >>> name_shares =[ (s['name'], s['shares']) for s in portfolio ] >>> name_shares [('AA', 100), ('IBM', 50), ('CAT', 150), ('MSFT', 200), ('GE', 95), ('MSFT', 50), ('IBM', 100)] >>> Si cambia los corchetes ( [ , ] ) por llaves ( { , } ), obtendr\u00e1 algo conocido como comprensi\u00f3n de conjuntos. Esto le brinda valores \u00fanicos o distintos. Por ejemplo, esto determina el conjunto de nombres de acciones \u00fanicos que aparecen en portfolio : >>> names = { s['name'] for s in portfolio } >>> names { 'AA', 'GE', 'IBM', 'MSFT', 'CAT'] } >>> Si especifica key:value pares, puede crear un diccionario. Por ejemplo, cree un diccionario que asigne el nombre de una acci\u00f3n al n\u00famero total de acciones que posee. >>> holdings = { name: 0 for name in names } >>> holdings {'AA': 0, 'GE': 0, 'IBM': 0, 'MSFT': 0, 'CAT': 0} >>> Esta \u00faltima caracter\u00edstica se conoce como comprensi\u00f3n de diccionario . Vamos a tabular: >>> for s in portfolio: holdings[s['name']] += s['shares'] >>> holdings { 'AA': 100, 'GE': 95, 'IBM': 150, 'MSFT':250, 'CAT': 150 } >>> Pruebe este ejemplo que filtra el diccionario prices solo a los nombres que aparecen en la cartera: >>> portfolio_prices = { name: prices[name] for name in names } >>> portfolio_prices {'AA': 9.22, 'GE': 13.48, 'IBM': 106.28, 'MSFT': 20.89, 'CAT': 35.46} >>>","title":"Ejercicio 2.22: Extracci\u00f3n de datos"},{"location":"2/#ejercicio-223-extraccion-de-datos-desde-archivos-csv","text":"Saber c\u00f3mo utilizar varias combinaciones de comprensiones de listas, conjuntos y diccionarios puede resultar \u00fatil en diversas formas de procesamiento de datos. A continuaci\u00f3n, se muestra un ejemplo que muestra c\u00f3mo extraer columnas seleccionadas de un archivo CSV. Primero, lea una fila de informaci\u00f3n de encabezado de un archivo CSV: >>> import csv >>> f = open('Data/portfoliodate.csv') >>> rows = csv.reader(f) >>> headers = next(rows) >>> headers ['name', 'date', 'time', 'shares', 'price'] >>> A continuaci\u00f3n, defina una variable que enumere las columnas que realmente le interesan: >>> select = ['name', 'shares', 'price'] >>> Ahora, ubique los \u00edndices de las columnas anteriores en el archivo CSV de origen: >>> indices = [ headers.index(colname) for colname in select ] >>> indices [0, 3, 4] >>> Finalmente, lea una fila de datos y convi\u00e9rtala en un diccionario usando una comprensi\u00f3n de diccionario: >>> row = next(rows) >>> record = { colname: row[index] for colname, index in zip(select, indices) } # dict-comprehension >>> record {'price': '32.20', 'name': 'AA', 'shares': '100'} >>> Si se siente c\u00f3modo con lo que acaba de suceder, lea el resto del archivo: >>> portfolio = [ { colname: row[index] for colname, index in zip(select, indices) } for row in rows ] >>> portfolio [{'price': '91.10', 'name': 'IBM', 'shares': '50'}, {'price': '83.44', 'name': 'CAT', 'shares': '150'}, {'price': '51.23', 'name': 'MSFT', 'shares': '200'}, {'price': '40.37', 'name': 'GE', 'shares': '95'}, {'price': '65.10', 'name': 'MSFT', 'shares': '50'}, {'price': '70.44', 'name': 'IBM', 'shares': '100'}] >>> Vaya, acabas de reducir gran parte de la read_portfolio() funci\u00f3n a una sola declaraci\u00f3n.","title":"Ejercicio 2.23: Extracci\u00f3n de datos desde archivos CSV"},{"location":"2/#comentario","text":"Las listas por comprensi\u00f3n se utilizan com\u00fanmente en Python como un medio eficaz para transformar, filtrar o recopilar datos. Debido a la sintaxis, no querr\u00e1 exagerar; intente que la comprensi\u00f3n de cada lista sea lo m\u00e1s simple posible. Est\u00e1 bien dividir las cosas en varios pasos. Por ejemplo, no est\u00e1 claro si le gustar\u00eda dar ese \u00faltimo ejemplo a sus compa\u00f1eros de trabajo desprevenidos. Dicho esto, saber c\u00f3mo manipular datos r\u00e1pidamente es una habilidad incre\u00edblemente \u00fatil. Existen numerosas situaciones en las que es posible que deba resolver alg\u00fan tipo de problema \u00fanico que involucre la importaci\u00f3n, exportaci\u00f3n, extracci\u00f3n de datos, etc. Convertirse en un maestro gur\u00fa de la comprensi\u00f3n de listas puede reducir sustancialmente el tiempo dedicado a idear una soluci\u00f3n. Adem\u00e1s, no se olvide del collections m\u00f3dulo.","title":"Comentario"},{"location":"2/#27-objetos","text":"Esta secci\u00f3n presenta m\u00e1s detalles sobre el modelo de objetos internos de Python y analiza algunos asuntos relacionados con la administraci\u00f3n de memoria, la copia y la verificaci\u00f3n de tipos.","title":"2.7 Objetos"},{"location":"2/#271-asignacion","text":"Muchas operaciones en Python est\u00e1n relacionadas con la asignaci\u00f3n o el almacenamiento de valores. a = value # Asignaci\u00f3n a una variable s[n] = value # Asignaci\u00f3n a una lista s.append(value) # Agregando a una lista d['key'] = value # Agregando a un diccionario Una advertencia: las operaciones de asignaci\u00f3n nunca hacen una copia del valor asignado. Todas las asignaciones son simplemente copias de referencia (o copias de puntero si lo prefiere).","title":"2.7.1: Asignacion"},{"location":"2/#272-ejemplo-de-asignacion","text":"Considere este fragmento de c\u00f3digo. a = [1,2,3] b = a c = [a,b] Una imagen de las operaciones de memoria subyacentes. En este ejemplo, solo hay un objeto de lista [1,2,3] , pero hay cuatro referencias diferentes a \u00e9l. Esto significa que la modificaci\u00f3n de un valor afecta a todas las referencias. >>> a.append(999) >>> a [1,2,3,999] >>> b [1,2,3,999] >>> c [[1,2,3,999], [1,2,3,999]] >>> Observe c\u00f3mo un cambio en la lista original aparece en todas partes (\u00a1ay!). Esto se debe a que nunca se hicieron copias. Todo apunta a lo mismo.","title":"2.7.2: Ejemplo de asignacion"},{"location":"2/#273-reasignacion-de-valores","text":"La reasignaci\u00f3n de un valor nunca sobrescribe la memoria utilizada por el valor anterior. a = [1,2,3] b = a a = [4,5,6] print(a) # [4, 5, 6] print(b) # [1, 2, 3] Tiene el valor original Recuerde: las variables son nombres, no ubicaciones de memoria.","title":"2.7.3: Reasignacion de valores"},{"location":"2/#274-algunos-peligros","text":"Si no sabe acerca de este intercambio, se disparar\u00e1 en el pie en alg\u00fan momento. Escenario t\u00edpico. Modifica algunos datos pensando que es su propia copia privada y accidentalmente corrompe algunos datos en alguna otra parte del programa. Comentario: Esta es una de las razones por las que los tipos de datos primitivos (int, float, string) son inmutables (solo lectura).","title":"2.7.4: Algunos peligros"},{"location":"2/#275-identidad-y-referencia","text":"Utilice el operador is para comprobar si dos valores son exactamente el mismo objeto. >>> a = [1,2,3] >>> b = a >>> a is b True >>> is compara la identidad del objeto (un n\u00famero entero). La identidad se puede obtener utilizando id() . >>> id(a) 3588944 >>> id(b) 3588944 >>> Nota: Casi siempre es mejor utilizar == para comparar objetos. El comportamiento de is suele ser inesperado: >>> a = [1,2,3] >>> b = a >>> c = [1,2,3] >>> a is b True >>> a is c False >>> a == c # hmm... \u00bfpor qu\u00e9? True >>>","title":"2.7.5: Identidad y referencia"},{"location":"2/#276-copias-superficiales","text":"Las listas y los dictados tienen m\u00e9todos para copiar. >>> a = [2,3,[100,101],4] >>> b = list(a) # Make a copy >>> a is b False Es una lista nueva, pero los elementos de la lista se comparten. >>> a[2].append(102) >>> b[2] [100,101,102] >>> >>> a[2] is b[2] True >>> Por ejemplo, [100, 101, 102] se comparte la lista interna . Esto se conoce como copia superficial. Aqu\u00ed tienes una foto.","title":"2.7.6: Copias superficiales"},{"location":"2/#_1","text":"","title":""},{"location":"2/#279-copias-profundas","text":"A veces es necesario hacer una copia de un objeto y todos los objetos que contiene. Puede utilizar el m\u00f3dulo copy para esto: >>> a = [2,3,[100,101],4] >>> import copy >>> b = copy.deepcopy(a) >>> a[2].append(102) >>> b[2] [100,101] >>> a[2] is b[2] False >>>","title":"2.7.9: Copias profundas"},{"location":"2/#2710-nombres-valores-tipos","text":"Los nombres de las variables no tienen tipo . Es solo un nombre. Sin embargo, los valores no tienen un tipo subyacente. >>> a = 42 >>> b = 'Hello World' >>> type(a) <type 'int'> >>> type(b) <type 'str'> type() te dir\u00e1 qu\u00e9 es. El nombre del tipo se usa generalmente como una funci\u00f3n que crea o convierte un valor a ese tipo.","title":"2.7.10: Nombres, valores, tipos"},{"location":"2/#2711-verificacion-de-tipo","text":"C\u00f3mo saber si un objeto es de un tipo espec\u00edfico. if isinstance(a, list): print('a is a list') Comprobando uno de los muchos tipos posibles. if isinstance(a, (list,tuple)): print('a is a list or tuple') Precauci\u00f3n: No se exceda con la verificaci\u00f3n de tipos. Puede conducir a una complejidad de c\u00f3digo excesiva. Por lo general, solo lo har\u00eda si al hacerlo evitar\u00eda errores comunes cometidos por otros que usan su c\u00f3digo.","title":"2.7.11: Verificaci\u00f3n de tipo"},{"location":"2/#2712-todo-es-un-objeto","text":"Los n\u00fameros, cadenas, listas, funciones, excepciones, clases, instancias, etc. son todos objetos. Significa que todos los objetos que se pueden nombrar pueden pasarse como datos, colocarse en contenedores, etc., sin ninguna restricci\u00f3n. No hay tipos especiales de objetos. A veces se dice que todos los objetos son de \"primera clase\". Un simple ejemplo: >>> import math >>> items = [abs, math, ValueError ] >>> items [<built-in function abs>, <module 'math' (builtin)>, <type 'exceptions.ValueError'>] >>> items[0](-45) 45 >>> items[1].sqrt(2) 1.4142135623730951 >>> try: x = int('not a number') except items[2]: print('Failed!') Failed! >>> Aqu\u00ed items hay una lista que contiene una funci\u00f3n, un m\u00f3dulo y una excepci\u00f3n. Puede utilizar directamente los elementos de la lista en lugar de los nombres originales: items[0](-45) # abs items[1].sqrt(2) # math except items[2]: # ValueError Un gran poder conlleva responsabilidad. El hecho de que pueda hacer eso no significa que deba hacerlo.","title":"2.7.12: Todo es un objeto"},{"location":"2/#233-ejercicios","text":"En este conjunto de ejercicios, analizamos parte del poder que proviene de los objetos de primera clase.","title":"2.33: Ejercicios"},{"location":"2/#ejercicio-224-data-de-primera-clase","text":"En el archivo Data/portfolio.csv , leemos datos organizados como columnas que se ven as\u00ed: name,shares,price \"AA\",100,32.20 \"IBM\",50,91.10 ... En el c\u00f3digo anterior, us\u00e1bamos el csv m\u00f3dulo para leer el archivo, pero a\u00fan ten\u00edamos que realizar conversiones de tipo manuales. Por ejemplo: for row in rows: name = row[0] shares = int(row[1]) price = float(row[2]) Este tipo de conversi\u00f3n tambi\u00e9n se puede realizar de una manera m\u00e1s inteligente utilizando algunas operaciones b\u00e1sicas de lista. Haga una lista de Python que contenga los nombres de las funciones de conversi\u00f3n que usar\u00eda para convertir cada columna en el tipo apropiado: >>> types = [str, int, float] >>> La raz\u00f3n por la que incluso puede crear esta lista es que todo en Python es de primera clase . Entonces, si desea tener una lista de funciones, est\u00e1 bien. Los elementos de la lista que ha creado son funciones para convertir un valor x en un tipo determinado (por ejemplo, str(x) , int(x) , float(x) ). Ahora, lea una fila de datos del archivo anterior: >>> import csv >>> f = open('Data/portfolio.csv') >>> rows = csv.reader(f) >>> headers = next(rows) >>> row = next(rows) >>> row ['AA', '100', '32.20'] >>> Como se se\u00f1al\u00f3, esta fila no es suficiente para hacer c\u00e1lculos porque los tipos son incorrectos. Por ejemplo: >>> row[1] * row[2] Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: can't multiply sequence by non-int of type 'str' >>> Sin embargo, tal vez los datos se puedan emparejar con los tipos que especific\u00f3 en types . Por ejemplo: >>> types[1] <type 'int'> >>> row[1] '100' >>> Intente convertir uno de los valores: >>> types[1](row[1]) # Same as int(row[1]) 100 >>> Intente convertir un valor diferente: >>> types[2](row[2]) # Same as float(row[2]) 32.2 >>> Pruebe el c\u00e1lculo con valores convertidos: >>> types[1](row[1])*types[2](row[2]) 3220.0000000000005 >>> Comprima los tipos de columna con los campos y observe el resultado: >>> r = list(zip(types, row)) >>> r [(<type 'str'>, 'AA'), (<type 'int'>, '100'), (<type 'float'>,'32.20')] >>> Notar\u00e1 que esto ha emparejado una conversi\u00f3n de tipo con un valor. Por ejemplo, int se empareja con el valor '100' . La lista comprimida es \u00fatil si desea realizar conversiones en todos los valores, uno tras otro. Prueba esto: >>> converted = [] >>> for func, val in zip(types, row): converted.append(func(val)) ... >>> converted ['AA', 100, 32.2] >>> converted[1] * converted[2] 3220.0000000000005 >>> Aseg\u00farese de comprender lo que sucede en el c\u00f3digo anterior. En el bucle, la func variable es una de las funciones de conversi\u00f3n de tipo (por ejemplo, str , int , etc.) y la val variable es uno de los valores como 'AA' , '100' . La expresi\u00f3n func(val) est\u00e1 convirtiendo un valor (algo as\u00ed como un tipo de conversi\u00f3n). El c\u00f3digo anterior se puede comprimir en una sola lista comprensiva. >>> converted = [func(val) for func, val in zip(types, row)] >>> converted ['AA', 100, 32.2] >>>","title":"Ejercicio 2.24: Data de primera-clase"},{"location":"2/#ejercicio-225-creando-diccionarios","text":"\u00bfRecuerda c\u00f3mo la funci\u00f3n dict() puede hacer f\u00e1cilmente un diccionario si tiene una secuencia de nombres y valores clave? Hagamos un diccionario a partir de los encabezados de las columnas: >>> headers ['name', 'shares', 'price'] >>> converted ['AA', 100, 32.2] >>> dict(zip(headers, converted)) {'price': 32.2, 'name': 'AA', 'shares': 100} >>> Por supuesto, si est\u00e1 en su lista de comprensi\u00f3n fu, puede hacer toda la conversi\u00f3n en un solo paso usando un dict-comprehension: >>> { name: func(val) for name, func, val in zip(headers, types, row) } {'price': 32.2, 'name': 'AA', 'shares': 100} >>>","title":"Ejercicio 2.25: Creando diccionarios"},{"location":"2/#ejercicio-226-el-horizonte","text":"Con las t\u00e9cnicas de este ejercicio, podr\u00eda escribir declaraciones que conviertan f\u00e1cilmente campos de casi cualquier archivo de datos orientado a columnas en un diccionario de Python. Solo para ilustrar, suponga que lee datos de un archivo de datos diferente como este: >>> f = open('Data/dowstocks.csv') >>> rows = csv.reader(f) >>> headers = next(rows) >>> row = next(rows) >>> headers ['name', 'price', 'date', 'time', 'change', 'open', 'high', 'low', 'volume'] >>> row ['AA', '39.48', '6/11/2007', '9:36am', '-0.18', '39.67', '39.69', '39.45', '181800'] >>> Convirtamos los campos usando un truco similar: >>> types = [str, float, str, str, float, float, float, float, int] >>> converted = [func(val) for func, val in zip(types, row)] >>> record = dict(zip(headers, converted)) >>> record {'volume': 181800, 'name': 'AA', 'price': 39.48, 'high': 39.69, 'low': 39.45, 'time': '9:36am', 'date': '6/11/2007', 'open': 39.67, 'change': -0.18} >>> record['name'] 'AA' >>> record['price'] 39.48 >>> Bonificaci\u00f3n: \u00bfC\u00f3mo modificar\u00eda este ejemplo para analizar adicionalmente la entrada date en una tupla como (6, 11, 2007) ? Dedique alg\u00fan tiempo a reflexionar sobre lo que ha hecho en este ejercicio. Revisaremos estas ideas un poco m\u00e1s tarde.","title":"Ejercicio 2.26: El horizonte"},{"location":"3/","text":"Organizaci\u00f3n de un Programa En este modulo nos empapamos de m\u00e1s detalles sobre la composici\u00f3n de funciones, el manejo de errores y la introducci\u00f3n de modulos. Al final seremos capaces de escribir programas que son subdivididos en funciones esparcidas en varios archivos. Veremos algunas plantillas de c\u00f3digo que les ser\u00e1 \u00fatil para la creaci\u00f3n de programas. Nota: estaremos publicando el contenido de este m\u00f3dulo pr\u00f3ximamente.","title":"3 Organizaci\u00f3n de un Programa"},{"location":"3/#organizacion-de-un-programa","text":"En este modulo nos empapamos de m\u00e1s detalles sobre la composici\u00f3n de funciones, el manejo de errores y la introducci\u00f3n de modulos. Al final seremos capaces de escribir programas que son subdivididos en funciones esparcidas en varios archivos. Veremos algunas plantillas de c\u00f3digo que les ser\u00e1 \u00fatil para la creaci\u00f3n de programas. Nota: estaremos publicando el contenido de este m\u00f3dulo pr\u00f3ximamente.","title":"Organizaci\u00f3n de un Programa"},{"location":"4/","text":"Clases y Objetos Introduciremos el concepto de clases y objetos. Aprenderemos sobre la declaraci\u00f3n class que nos permite crear nuevos objetos. Tambi\u00e9n introcimos el concepto de inherencia, unaherramienta que es comunmente utilizada para construir programar extensibles. Finalmente, veremos otras caracter\u00edsticas de clases como los m\u00e9todos especiales, b\u00fasqueda dinamica de atributos, y la definici\u00f3n de nuevas excepciones. Nota: estaremos publicando el contenido de este m\u00f3dulo pr\u00f3ximamente.","title":"4 Clases y Objetos"},{"location":"4/#clases-y-objetos","text":"Introduciremos el concepto de clases y objetos. Aprenderemos sobre la declaraci\u00f3n class que nos permite crear nuevos objetos. Tambi\u00e9n introcimos el concepto de inherencia, unaherramienta que es comunmente utilizada para construir programar extensibles. Finalmente, veremos otras caracter\u00edsticas de clases como los m\u00e9todos especiales, b\u00fasqueda dinamica de atributos, y la definici\u00f3n de nuevas excepciones. Nota: estaremos publicando el contenido de este m\u00f3dulo pr\u00f3ximamente.","title":"Clases y Objetos"},{"location":"5/","text":"Funcionamiento interno del objeto Python En esta secci\u00f3n aprenderemos sobre el funcionamiento interno de los objetos en Python. Algunos programadores con experiencia en otros lenguajes de programaci\u00f3n a menudo encuentran que la noci\u00f3n de clases en Python carece de ciertas caracter\u00edsticas. Por ejemplo, no existe la noci\u00f3n de control de accesso (e.g. privado, protegido), el argumento self lo encuentran extra\u00f1o, y trabajar con objetos se siente como una actividad con mucho libertinaje. Conoceremos como todo funciona y algunos patrones comunes para la encapsulaci\u00f3n interna de objetos. Nota: estaremos publicando el contenido de este m\u00f3dulo pr\u00f3ximamente.","title":"5 Entra\u00f1as del Objeto"},{"location":"5/#funcionamiento-interno-del-objeto-python","text":"En esta secci\u00f3n aprenderemos sobre el funcionamiento interno de los objetos en Python. Algunos programadores con experiencia en otros lenguajes de programaci\u00f3n a menudo encuentran que la noci\u00f3n de clases en Python carece de ciertas caracter\u00edsticas. Por ejemplo, no existe la noci\u00f3n de control de accesso (e.g. privado, protegido), el argumento self lo encuentran extra\u00f1o, y trabajar con objetos se siente como una actividad con mucho libertinaje. Conoceremos como todo funciona y algunos patrones comunes para la encapsulaci\u00f3n interna de objetos. Nota: estaremos publicando el contenido de este m\u00f3dulo pr\u00f3ximamente.","title":"Funcionamiento interno del objeto Python"},{"location":"6/","text":"Generadores La iteraci\u00f3n es uno de los m\u00e1s comunes patrones de programaci\u00f3n en Python. Los programas hacen mucha iteraci\u00f3n para procesar listas, leer archivos, consultar una base de datos, y m\u00e1s. Una de las caracter\u00edsticas mas poderosas de Python es la habilidad de costumizar y redefinir la iteraci\u00f3n en una funci\u00f3n generadora. Al final de la secci\u00f3n, escribiremos algunos programas que procesan datos en tiempo real en una manera interesante. Nota: estaremos publicando el contenido de este m\u00f3dulo pr\u00f3ximamente.","title":"6 Generadores"},{"location":"6/#generadores","text":"La iteraci\u00f3n es uno de los m\u00e1s comunes patrones de programaci\u00f3n en Python. Los programas hacen mucha iteraci\u00f3n para procesar listas, leer archivos, consultar una base de datos, y m\u00e1s. Una de las caracter\u00edsticas mas poderosas de Python es la habilidad de costumizar y redefinir la iteraci\u00f3n en una funci\u00f3n generadora. Al final de la secci\u00f3n, escribiremos algunos programas que procesan datos en tiempo real en una manera interesante. Nota: estaremos publicando el contenido de este m\u00f3dulo pr\u00f3ximamente.","title":"Generadores"},{"location":"7/","text":"Temas Avanzados En esta secci\u00f3n, veremos una peque\u00f1a colecci\u00f3n de algunas caracter\u00edsticas avanzadas de Python que posiblemente encontremos en nuestra programaci\u00f3n cotidiana. Los temas en esta secci\u00f3n son s\u00f3lo una introducci\u00f3n a estas ideas. Nota: estaremos publicando el contenido de este m\u00f3dulo pr\u00f3ximamente.","title":"7 Temas avanzados"},{"location":"7/#temas-avanzados","text":"En esta secci\u00f3n, veremos una peque\u00f1a colecci\u00f3n de algunas caracter\u00edsticas avanzadas de Python que posiblemente encontremos en nuestra programaci\u00f3n cotidiana. Los temas en esta secci\u00f3n son s\u00f3lo una introducci\u00f3n a estas ideas. Nota: estaremos publicando el contenido de este m\u00f3dulo pr\u00f3ximamente.","title":"Temas Avanzados"},{"location":"8/","text":"Prueba y Depuraci\u00f3n Esta secci\u00f3n introduce unos tem\u00e1s b\u00e1sicas en relaci\u00f3n a pruebas, reporter\u00eda y depuraci\u00f3n. Nota: estaremos publicando el contenido de este m\u00f3dulo pr\u00f3ximamente.","title":"8 Prueba y Depuraci\u00f3n"},{"location":"8/#prueba-y-depuracion","text":"Esta secci\u00f3n introduce unos tem\u00e1s b\u00e1sicas en relaci\u00f3n a pruebas, reporter\u00eda y depuraci\u00f3n. Nota: estaremos publicando el contenido de este m\u00f3dulo pr\u00f3ximamente.","title":"Prueba y Depuraci\u00f3n"},{"location":"9/","text":"Paquetes Concluiremos el curso con algunos detalles para la organizaci\u00f3n de c\u00f3digo en paquetes. Adem\u00e1s, discutiremos sobre la instalaci\u00f3n de paquetes de terceros y sobre la preparaci\u00f3n necesaria para entregarle nuestro c\u00f3digo a otros. El tema de empaquetamiento de c\u00f3digo essta en constante evoluci\u00f3n y es una parte compleja en el desarrollo de Python. Por tanto, esta secci\u00f3n esta enfocada en compartir algunos principios de organizaci\u00f3n general de c\u00f3digo. Nota: estaremos publicando el contenido de este m\u00f3dulo pr\u00f3ximamente.","title":"9 Paquetes"},{"location":"9/#paquetes","text":"Concluiremos el curso con algunos detalles para la organizaci\u00f3n de c\u00f3digo en paquetes. Adem\u00e1s, discutiremos sobre la instalaci\u00f3n de paquetes de terceros y sobre la preparaci\u00f3n necesaria para entregarle nuestro c\u00f3digo a otros. El tema de empaquetamiento de c\u00f3digo essta en constante evoluci\u00f3n y es una parte compleja en el desarrollo de Python. Por tanto, esta secci\u00f3n esta enfocada en compartir algunos principios de organizaci\u00f3n general de c\u00f3digo. Nota: estaremos publicando el contenido de este m\u00f3dulo pr\u00f3ximamente.","title":"Paquetes"},{"location":"faq/","text":"Preguntas Frecuentes Necesito ayuda, \u00bfd\u00f3nde la consigo? En muchas ocasiones, podemos resolver nuestras dudas leyendo documentaci\u00f3n oficial o haciendo una b\u00fasqueda online. No obstante, una de las mejores cosas que puede hacer es aprender en p\u00fablico e interactuar con otras personas. En ese sentido, la comunidad Python Panam\u00e1 ha puesto a disposici\u00f3n su servidor en Discord, acceda aqu\u00ed . No quiero instalar Python, \u00bfpuedo hacer el curso online? Es preferible que haga el curso en su ordenador; sin embargo, plataformas como Repl.it ponen a su disposici\u00f3n un editor y consola con un ambiente de ejecuci\u00f3n Python y una terminal Linux, sin costo alguno. \u00bfD\u00f3nde y c\u00f3mo instalo Python? La respuesta depende de su sistema operativo y modo preferible de instalaci\u00f3n. La forma m\u00e1s com\u00fan de hacerlo es accediendo a la p\u00e1gina oficial de Python, descargar el ejecutable e instalarlo en su ordenador.","title":"Preguntas"},{"location":"faq/#preguntas-frecuentes","text":"Necesito ayuda, \u00bfd\u00f3nde la consigo? En muchas ocasiones, podemos resolver nuestras dudas leyendo documentaci\u00f3n oficial o haciendo una b\u00fasqueda online. No obstante, una de las mejores cosas que puede hacer es aprender en p\u00fablico e interactuar con otras personas. En ese sentido, la comunidad Python Panam\u00e1 ha puesto a disposici\u00f3n su servidor en Discord, acceda aqu\u00ed . No quiero instalar Python, \u00bfpuedo hacer el curso online? Es preferible que haga el curso en su ordenador; sin embargo, plataformas como Repl.it ponen a su disposici\u00f3n un editor y consola con un ambiente de ejecuci\u00f3n Python y una terminal Linux, sin costo alguno. \u00bfD\u00f3nde y c\u00f3mo instalo Python? La respuesta depende de su sistema operativo y modo preferible de instalaci\u00f3n. La forma m\u00e1s com\u00fan de hacerlo es accediendo a la p\u00e1gina oficial de Python, descargar el ejecutable e instalarlo en su ordenador.","title":"Preguntas Frecuentes"},{"location":"licencia/","text":"creative commons Attribution-ShareAlike 4.0 International Creative Commons Corporation (\u201cCreative Commons\u201d) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \u201cas-is\u201d basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. More considerations for licensors . Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor\u2019s permission is not necessary for any reason\u2013for example, because of any applicable exception or limitation to copyright\u2013then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public . Creative Commons Attribution-ShareAlike 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 \u2013 Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. BY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses , approved by Creative Commons as essentially the equivalent of this Public License. d. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. e. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. f. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. g. License Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike. h. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. i. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. j. Licensor means the individual(s) or entity(ies) granting rights under this Public License. k. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. l. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. m. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 \u2013 Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: A. reproduce and Share the Licensed Material, in whole or in part; and B. produce, reproduce, and Share Adapted Material. 2. __Exceptions and Limitations.__ For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. __Term.__ The term of this Public License is specified in Section 6(a). 4. __Media and formats; technical modifications allowed.__ The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material. 5. __Downstream recipients.__ A. __Offer from the Licensor \u2013 Licensed Material.__ Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. B. __Additional offer from the Licensor \u2013 Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter\u2019s License You apply. C. __No downstream restrictions.__ You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. __No endorsement.__ Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties. Section 3 \u2013 License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material (including in modified form), You must: A. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. b. ShareAlike. In addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply. The Adapter\u2019s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License. You must include the text of, or the URI or hyperlink to, the Adapter's License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter's License You apply. Section 4 \u2013 Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 \u2013 Disclaimer of Warranties and Limitation of Liability. a. Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You. b. To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 \u2013 Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 \u2013 Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.t stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 \u2013 Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at [creativecommons.org/policies](http://creativecommons.org/policies), Creative Commons does not authorize the use of the trademark \u201cCreative Commons\u201d or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org","title":"Licencia"},{"location":"licencia/#creative-commons","text":"","title":"creative commons"},{"location":"licencia/#attribution-sharealike-40-international","text":"Creative Commons Corporation (\u201cCreative Commons\u201d) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \u201cas-is\u201d basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.","title":"Attribution-ShareAlike 4.0 International"},{"location":"licencia/#using-creative-commons-public-licenses","text":"Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. More considerations for licensors . Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor\u2019s permission is not necessary for any reason\u2013for example, because of any applicable exception or limitation to copyright\u2013then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public .","title":"Using Creative Commons Public Licenses"},{"location":"licencia/#creative-commons-attribution-sharealike-40-international-public-license","text":"By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.","title":"Creative Commons Attribution-ShareAlike 4.0 International Public License"},{"location":"licencia/#section-1-definitions","text":"a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. BY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses , approved by Creative Commons as essentially the equivalent of this Public License. d. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. e. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. f. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. g. License Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike. h. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. i. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. j. Licensor means the individual(s) or entity(ies) granting rights under this Public License. k. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. l. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. m. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.","title":"Section 1 \u2013 Definitions."},{"location":"licencia/#section-2-scope","text":"a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: A. reproduce and Share the Licensed Material, in whole or in part; and B. produce, reproduce, and Share Adapted Material. 2. __Exceptions and Limitations.__ For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. __Term.__ The term of this Public License is specified in Section 6(a). 4. __Media and formats; technical modifications allowed.__ The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material. 5. __Downstream recipients.__ A. __Offer from the Licensor \u2013 Licensed Material.__ Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. B. __Additional offer from the Licensor \u2013 Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter\u2019s License You apply. C. __No downstream restrictions.__ You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. __No endorsement.__ Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.","title":"Section 2 \u2013 Scope."},{"location":"licencia/#section-3-license-conditions","text":"Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material (including in modified form), You must: A. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. b. ShareAlike. In addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply. The Adapter\u2019s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License. You must include the text of, or the URI or hyperlink to, the Adapter's License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter's License You apply.","title":"Section 3 \u2013 License Conditions."},{"location":"licencia/#section-4-sui-generis-database-rights","text":"Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.","title":"Section 4 \u2013 Sui Generis Database Rights."},{"location":"licencia/#section-5-disclaimer-of-warranties-and-limitation-of-liability","text":"a. Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You. b. To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.","title":"Section 5 \u2013 Disclaimer of Warranties and Limitation of Liability."},{"location":"licencia/#section-6-term-and-termination","text":"a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License.","title":"Section 6 \u2013 Term and Termination."},{"location":"licencia/#section-7-other-terms-and-conditions","text":"a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.t stated herein are separate from and independent of the terms and conditions of this Public License.","title":"Section 7 \u2013 Other Terms and Conditions."},{"location":"licencia/#section-8-interpretation","text":"a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at [creativecommons.org/policies](http://creativecommons.org/policies), Creative Commons does not authorize the use of the trademark \u201cCreative Commons\u201d or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org","title":"Section 8 \u2013 Interpretation."},{"location":"temario/","text":"Temario Introducci\u00f3n a Python El objetivo de este cap\u00edtulo es introducir las bases de Python. Iniciaremos desde cero y aprenderemos a editar, ejecutar, y depurar programas. Adem\u00e1s, escribiremos una secuencia de comandos que lee data en un archivo CSV y ejecuta un c\u00e1lculo. Trabajando con data Conoceremos las estructuras de datos de fundamental importancia en Python: tuples, lists, sets y dictionaries. Presentaremos algunos patrones comunes para el manejo de datos y discutiremos el modelo de objetos en Python. Organizaci\u00f3n de un programa En este modulo nos empapamos de m\u00e1s detalles sobre la composici\u00f3n de funciones, el manejo de errores y la introducci\u00f3n de modulos. Al final seremos capaces de escribir programas que son subdivididos en funciones esparcidas en varios archivos. Veremos algunas plantillas de c\u00f3digo que les ser\u00e1 \u00fatil para la creaci\u00f3n de programas. Clases y Objetos Introduciremos el concepto de clases y objetos. Aprenderemos sobre la declaraci\u00f3n class que nos permite crear nuevos objetos. Tambi\u00e9n introcimos el concepto de inherencia, unaherramienta que es comunmente utilizada para construir programar extensibles. Finalmente, veremos otras caracter\u00edsticas de clases como los m\u00e9todos especiales, b\u00fasqueda dinamica de atributos, y la definici\u00f3n de nuevas excepciones. Funcionamiento interno del objeto Python En esta secci\u00f3n aprenderemos sobre el funcionamiento interno de los objetos en Python. Algunos programadores con experiencia en otros lenguajes de programaci\u00f3n a menudo encuentran que la noci\u00f3n de clases en Python carece de ciertas caracter\u00edsticas. Por ejemplo, no existe la noci\u00f3n de control de accesso (e.g. privado, protegido), el argumento self lo encuentran extra\u00f1o, y trabajar con objetos se siente como una actividad con mucho libertinaje. Conoceremos como todo funciona y algunos patrones comunes para la encapsulaci\u00f3n interna de objetos. Generadores La iteraci\u00f3n es uno de los m\u00e1s comunes patrones de programaci\u00f3n en Python. Los programas hacen mucha iteraci\u00f3n para procesar listas, leer archivos, consultar una base de datos, y m\u00e1s. Una de las caracter\u00edsticas mas poderosas de Python es la habilidad de costumizar y redefinir la iteraci\u00f3n en una funci\u00f3n generadora. Al final de la secci\u00f3n, escribiremos algunos programas que procesan datos en tiempo real en una manera interesante. Temas avanzados En esta secci\u00f3n, veremos una peque\u00f1a colecci\u00f3n de algunas caracter\u00edsticas avanzadas de Python que posiblemente encontremos en nuestra programaci\u00f3n cotidiana. Los temas en esta secci\u00f3n son s\u00f3lo una introducci\u00f3n a estas ideas. Prueba y Depuraci\u00f3n Esta secci\u00f3n introduce unos tem\u00e1s b\u00e1sicas en relaci\u00f3n a pruebas, reporter\u00eda y depuraci\u00f3n. Paquetes Concluiremos el curso con algunos detalles para la organizaci\u00f3n de c\u00f3digo en paquetes. Adem\u00e1s, discutiremos sobre la instalaci\u00f3n de paquetes de terceros y sobre la preparaci\u00f3n necesaria para entregarle nuestro c\u00f3digo a otros. El tema de empaquetamiento de c\u00f3digo essta en constante evoluci\u00f3n y es una parte compleja en el desarrollo de Python. Por tanto, esta secci\u00f3n esta enfocada en compartir algunos principios de organizaci\u00f3n general de c\u00f3digo.","title":"Temario"},{"location":"temario/#temario","text":"Introducci\u00f3n a Python El objetivo de este cap\u00edtulo es introducir las bases de Python. Iniciaremos desde cero y aprenderemos a editar, ejecutar, y depurar programas. Adem\u00e1s, escribiremos una secuencia de comandos que lee data en un archivo CSV y ejecuta un c\u00e1lculo. Trabajando con data Conoceremos las estructuras de datos de fundamental importancia en Python: tuples, lists, sets y dictionaries. Presentaremos algunos patrones comunes para el manejo de datos y discutiremos el modelo de objetos en Python. Organizaci\u00f3n de un programa En este modulo nos empapamos de m\u00e1s detalles sobre la composici\u00f3n de funciones, el manejo de errores y la introducci\u00f3n de modulos. Al final seremos capaces de escribir programas que son subdivididos en funciones esparcidas en varios archivos. Veremos algunas plantillas de c\u00f3digo que les ser\u00e1 \u00fatil para la creaci\u00f3n de programas. Clases y Objetos Introduciremos el concepto de clases y objetos. Aprenderemos sobre la declaraci\u00f3n class que nos permite crear nuevos objetos. Tambi\u00e9n introcimos el concepto de inherencia, unaherramienta que es comunmente utilizada para construir programar extensibles. Finalmente, veremos otras caracter\u00edsticas de clases como los m\u00e9todos especiales, b\u00fasqueda dinamica de atributos, y la definici\u00f3n de nuevas excepciones. Funcionamiento interno del objeto Python En esta secci\u00f3n aprenderemos sobre el funcionamiento interno de los objetos en Python. Algunos programadores con experiencia en otros lenguajes de programaci\u00f3n a menudo encuentran que la noci\u00f3n de clases en Python carece de ciertas caracter\u00edsticas. Por ejemplo, no existe la noci\u00f3n de control de accesso (e.g. privado, protegido), el argumento self lo encuentran extra\u00f1o, y trabajar con objetos se siente como una actividad con mucho libertinaje. Conoceremos como todo funciona y algunos patrones comunes para la encapsulaci\u00f3n interna de objetos. Generadores La iteraci\u00f3n es uno de los m\u00e1s comunes patrones de programaci\u00f3n en Python. Los programas hacen mucha iteraci\u00f3n para procesar listas, leer archivos, consultar una base de datos, y m\u00e1s. Una de las caracter\u00edsticas mas poderosas de Python es la habilidad de costumizar y redefinir la iteraci\u00f3n en una funci\u00f3n generadora. Al final de la secci\u00f3n, escribiremos algunos programas que procesan datos en tiempo real en una manera interesante. Temas avanzados En esta secci\u00f3n, veremos una peque\u00f1a colecci\u00f3n de algunas caracter\u00edsticas avanzadas de Python que posiblemente encontremos en nuestra programaci\u00f3n cotidiana. Los temas en esta secci\u00f3n son s\u00f3lo una introducci\u00f3n a estas ideas. Prueba y Depuraci\u00f3n Esta secci\u00f3n introduce unos tem\u00e1s b\u00e1sicas en relaci\u00f3n a pruebas, reporter\u00eda y depuraci\u00f3n. Paquetes Concluiremos el curso con algunos detalles para la organizaci\u00f3n de c\u00f3digo en paquetes. Adem\u00e1s, discutiremos sobre la instalaci\u00f3n de paquetes de terceros y sobre la preparaci\u00f3n necesaria para entregarle nuestro c\u00f3digo a otros. El tema de empaquetamiento de c\u00f3digo essta en constante evoluci\u00f3n y es una parte compleja en el desarrollo de Python. Por tanto, esta secci\u00f3n esta enfocada en compartir algunos principios de organizaci\u00f3n general de c\u00f3digo.","title":"Temario"}]}