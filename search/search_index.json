{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sobre el curso Este es un curso introductorio a Python para una audiencia con noci\u00f3n o experiencia previa en programaci\u00f3n. Su enfoque es ense\u00f1ar Python a trav\u00e9s del problema general de manipulaci\u00f3n de datos, espec\u00edficamente del mercado de valores. La idea del curso es mantenerse enfocado en lo pr\u00e1ctico y pragm\u00e1tico. El curso fue originalmente publicado en ingl\u00e9s por David Beazley y, con algunas modificaciones, adaptado al espa\u00f1ol por Adriaan Beiertz . Se comparte gratuitamente bajo el marco de la licencia Reconocimiento-CompartirIgual 4.0 Internacional (CC BY-SA 4.0) . Para completar el curso, solo necesitas una instalaci\u00f3n de Python 3.6+, determinaci\u00f3n, y tiempo para leer y hacer los ejercicios. El curso toma alrededor de 25-35 horas de autoestudio, lo cual incluye completar alrededor de 130 ejercicios de programaci\u00f3n. Este no es un curso para el completo principiante, toda vez que asume alguna experiencia o noci\u00f3n de programaci\u00f3n en este o algun otro lenguaje. Tampoco es un curso de desarrollo web o para ingenieros de software sobre como escribir o mantener una aplicaci\u00f3n Python de un mill\u00f3n de l\u00edneas de c\u00f3digo.","title":"Sobre el curso"},{"location":"#sobre-el-curso","text":"Este es un curso introductorio a Python para una audiencia con noci\u00f3n o experiencia previa en programaci\u00f3n. Su enfoque es ense\u00f1ar Python a trav\u00e9s del problema general de manipulaci\u00f3n de datos, espec\u00edficamente del mercado de valores. La idea del curso es mantenerse enfocado en lo pr\u00e1ctico y pragm\u00e1tico. El curso fue originalmente publicado en ingl\u00e9s por David Beazley y, con algunas modificaciones, adaptado al espa\u00f1ol por Adriaan Beiertz . Se comparte gratuitamente bajo el marco de la licencia Reconocimiento-CompartirIgual 4.0 Internacional (CC BY-SA 4.0) . Para completar el curso, solo necesitas una instalaci\u00f3n de Python 3.6+, determinaci\u00f3n, y tiempo para leer y hacer los ejercicios. El curso toma alrededor de 25-35 horas de autoestudio, lo cual incluye completar alrededor de 130 ejercicios de programaci\u00f3n. Este no es un curso para el completo principiante, toda vez que asume alguna experiencia o noci\u00f3n de programaci\u00f3n en este o algun otro lenguaje. Tampoco es un curso de desarrollo web o para ingenieros de software sobre como escribir o mantener una aplicaci\u00f3n Python de un mill\u00f3n de l\u00edneas de c\u00f3digo.","title":"Sobre el curso"},{"location":"adentro_del_objeto/","text":"Adentro de un objeto Python","title":"5 Adentro de un objeto"},{"location":"adentro_del_objeto/#adentro-de-un-objeto-python","text":"","title":"Adentro de un objeto Python"},{"location":"clases_y_objetos/","text":"Clases y Objetos","title":"4 Clases y Objetos"},{"location":"clases_y_objetos/#clases-y-objetos","text":"","title":"Clases y Objetos"},{"location":"faq/","text":"Preguntas Frecuentes Necesito ayuda, \u00bfd\u00f3nde la consigo? En muchas ocasiones, podemos resolver nuestras dudas leyendo documentaci\u00f3n oficial o haciendo una b\u00fasqueda online. No obstante, una de las mejores cosas que puede hacer es aprender en p\u00fablico e interactuar con otras personas. En ese sentido, la comunidad Python Panam\u00e1 ha puesto a disposici\u00f3n su servidor en Discord, acceda aqu\u00ed . \u00bfD\u00f3nde y c\u00f3mo instalo Python? No quiero instalar Python, \u00bfpuedo hacer el curso online?","title":"Preguntas"},{"location":"faq/#preguntas-frecuentes","text":"Necesito ayuda, \u00bfd\u00f3nde la consigo? En muchas ocasiones, podemos resolver nuestras dudas leyendo documentaci\u00f3n oficial o haciendo una b\u00fasqueda online. No obstante, una de las mejores cosas que puede hacer es aprender en p\u00fablico e interactuar con otras personas. En ese sentido, la comunidad Python Panam\u00e1 ha puesto a disposici\u00f3n su servidor en Discord, acceda aqu\u00ed . \u00bfD\u00f3nde y c\u00f3mo instalo Python? No quiero instalar Python, \u00bfpuedo hacer el curso online?","title":"Preguntas Frecuentes"},{"location":"generadores/","text":"Generadores","title":"6 Generadores"},{"location":"generadores/#generadores","text":"","title":"Generadores"},{"location":"intro_python/","text":"1. Intro a Python 1.1 Introduciendo Python El objetivo de este cap\u00edtulo es introducir las bases de Python. Iniciaremos desde cero y aprenderemos a editar, ejecutar, y depurar programas. Adem\u00e1s, escribiremos una secuencia de comandos que lee data en un archivo CSV y ejecuta un c\u00e1lculo. 1.1.1: Qu\u00e9 es Python? Python es un lenguaje interpretado de programaci\u00f3n de alto nivel. A menudo se le clasifica como un lenguaje de secuencias de comandos y tambi\u00e9n se le considera similar a lenguajes como Perl, Tcl o Ruby. La sintaxis de Python est\u00e1 vagamente inspirada en elementos de la programaci\u00f3n C. Python fue creado por Guido van Rossum alrededor de 1990, quien lo nombr\u00f3 en honor a la comedia de origen brit\u00e1nico Monty Python . 1.1.2: Donde consigo Python? Puedes obtener una versi\u00f3n de Python en Python.org . Para los prop\u00f3sitos de este curso, solo necesitas una instalaci\u00f3n b\u00e1sica. Recomiendo instalar Python 3.6 o una versi\u00f3n m\u00e1s reciente. Python 3.6 es el que se usa en las notas y en las soluciones, sin embargo puedes utilizar cualquier versi\u00f3n. 1.1.3: Porqu\u00e9 fue creado? En palabras del creador de Python: Mi motivaci\u00f3n original para crear Python fue la necesidad percibida de un lenguaje de alto nivel en el proyecto Amoeba [Sistemas Operativos]. Me di cuenta de que el desarrollo de las utilidades de administraci\u00f3n del sistema en C estaban tardando demasiado. Adem\u00e1s, hacer estas cosas en el shell Bourne no iba a funcionar por una variedad de razones. ... Entonces, era necesario un lenguaje que cerrara la brecha entre C y el shell. Guido van Rossum 1.1.4: D\u00f3nde est\u00e1 Python en mi Maquina? Aunque hay muchos entornos en los que puede ejecutar Python, Python normalmente se instala en su m\u00e1quina como un programa que se ejecuta desde la terminal o el shell de comandos. Desde la terminal, deber\u00eda poder escribir python as\u00ed: $ python Python 3.8.1 (default, Feb 20 2020, 09:29:22) [Clang 10.0.0 (clang-1000.10.44.4)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> print(\"hello world\") hello world >>> Si no ha utilizado el shell o una terminal, probablemente deber\u00eda terminar un breve tutorial sobre eso primero y luego regresar. Aunque hay muchos entornos en donde puede programar en Python, ser\u00e1 un programador m\u00e1s s\u00f3lido de Python si puede ejecutar, depurar e interactuar con Python en la terminal. Este es el entorno nativo de Python. Si puede usar Python aqu\u00ed, podr\u00e1 usarlo en cualquier otro lugar. 1.1.5: Ejercicios Ejercicio 1.1: Utilizando Python como Calculadora En su m\u00e1quina, inicie Python y util\u00edcelo como calculador para resolver el siguiente problema. El suertudo de Juan compr\u00f3 75 acciones de Google a un precio de $235.14 USD por acci\u00f3n. Hoy, las acciones de Google tienen un precio de $711.25 USD. Usando el modo interactivo de Python como una calculadora, averig\u00fce cu\u00e1ntas ganancias obtendr\u00eda Juan si vendiera todas sus acciones. >>> (711.25 - 235.14) * 75 35708.25 >>> Consejo profesional: use la variable de subrayado (_) para usar el resultado del \u00faltimo c\u00e1lculo. Por ejemplo, \u00bfcu\u00e1ntas ganancias obtiene Juan despu\u00e9s de que su malvado corredor se lleva su parte del 20%? >>> _ * 0.80 28566.600000000002 >>> Ejercicio 1.2: Consiguiendo ayuda Utilice el comando help() para obtener ayuda sobre la funci\u00f3n abs (). Luego use help() para obtener ayuda sobre la funci\u00f3n round (). Escriba help() solo sin valor para ingresar al visor de ayuda interactiva. Una advertencia con help() es que no funciona para declaraciones b\u00e1sicas de Python como for, if, while, etc. (es decir, si escribe help (for) obtendr\u00e1 un error de sintaxis). En su lugar, puede intentar poner el tema de la ayuda entre comillas, como ayuda (\"para\"). Si eso no funciona, tendr\u00e1 que recurrir a una b\u00fasqueda en Internet. Seguimiento: vaya a http://docs.python.org y busque la documentaci\u00f3n de la funci\u00f3n abs() (pista: se encuentra en la referencia de la biblioteca relacionada con las funciones integradas). Ejercicio 1.3: Copiar y pegar Este curso est\u00e1 estructurado como una serie de p\u00e1ginas en las que se le anima a probar ejemplos interactivos de c\u00f3digo Python escribi\u00e9ndolos a mano. Si est\u00e1 aprendiendo Python por primera vez, se recomienda este \"enfoque lento\". Obtendr\u00e1 una mejor idea del idioma al reducir la velocidad, escribir cosas y pensar en lo que est\u00e1 haciendo. Si debe \"cortar y pegar\" ejemplos de c\u00f3digo, seleccione el c\u00f3digo comenzando despu\u00e9s del indicador >>> y subiendo hasta, pero no m\u00e1s all\u00e1 de la primera l\u00ednea en blanco o el siguiente mensaje >>> (lo que aparezca primero). Seleccione \"copiar\" en el navegador, vaya a la ventana de Python y seleccione \"pegar\" para copiarlo en el shell de Python. Para que el c\u00f3digo se ejecute, es posible que deba presionar \"Retorno\" una vez despu\u00e9s de haberlo pegado. Corte y pegue las siguientes declaraciones de Python: >>> 12 + 20 32 >>> (3 + 4 + 5 + 6) 18 >>> for i in range(5): print(i) 0 1 2 3 4 >>> Advertencia: No es posible pegar m\u00e1s de un comando de Python (declaraciones que aparecen despu\u00e9s de >>> ) en el shell b\u00e1sico de Python a la vez. Tienes que pegar cada comando de uno en uno. Ahora que ha hecho esto, recuerde que sacar\u00e1 m\u00e1s provecho de la clase escribiendo el c\u00f3digo lentamente y pensando en ello, no cortando y pegando. Ejercicio 1.4: Donde esta mi bus? Pruebe algo m\u00e1s avanzado y escriba estas declaraciones para averiguar cu\u00e1nto tiempo tendr\u00e1n que esperar las personas que esperan en la esquina de la calle Clark y Balmoral en Chicago al pr\u00f3ximo autob\u00fas CTA n. \u00b0 22 en direcci\u00f3n norte: >>> import urllib.request >>> u = urllib.request.urlopen('http://ctabustracker.com/bustime/map/getStopPredictions.jsp?stop=14791&route=22') >>> from xml.etree.ElementTree import parse >>> doc = parse(u) >>> for pt in doc.findall('.//pt'): print(pt.text) 6 MIN 18 MIN 28 MIN >>> S\u00ed, acaba de descargar una p\u00e1gina web, analizar un documento XML y extraer informaci\u00f3n \u00fatil en aproximadamente 6 l\u00edneas de c\u00f3digo. Los datos a los que accedi\u00f3 en realidad alimentan el sitio web http://ctabustracker.com/bustime/home.jsp. Int\u00e9ntelo nuevamente y observe c\u00f3mo cambian las predicciones. Si falla la primera declaraci\u00f3n de importaci\u00f3n import urllib.request , probablemente est\u00e9 usando Python 2. Para este curso, debe asegurarse de que est\u00e1 usando Python 3.6 o m\u00e1s reciente. Vaya a https://www.python.org para descargarlo si lo necesita. Si su entorno de trabajo requiere el uso de un servidor proxy HTTP, es posible que deba configurar la variable de entorno HTTP_PROXY para que esta parte del ejercicio funcione. Por ejemplo: >>> import os >>> os.environ['HTTP_PROXY'] = 'http://suproxy.server.com' >>> Si no puede hacer que esto funcione, no se preocupe. El resto de este curso no tiene nada que ver con analizar XML. 1.2 Un primer programa 1.2.1: Ejecutando Python Python programs always run inside an interpreter. The interpreter is a \"console-based\" application that normally runs from a command shell. python3 Python 3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04) [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Los programadores expertos generalmente no tienen problemas para usar el int\u00e9rprete de esta manera, pero no es tan f\u00e1cil de usar para los principiantes. Es posible que est\u00e9 utilizando un entorno que proporciona una interfaz diferente a Python. Eso est\u00e1 bien, pero aprender a ejecutar la terminal de Python sigue siendo una habilidad \u00fatil. 1.2.2: Modo interactivo Cuando inicias Python, obtienes un modo interactivo donde puedes experimentar. Si comienza a escribir declaraciones, se ejecutar\u00e1n de inmediato. No hay ciclo de edici\u00f3n / compilaci\u00f3n / ejecuci\u00f3n / depuraci\u00f3n. >>> print('hello world') hello world >>> 37*42 1554 >>> for i in range(5): ... print(i) ... 0 1 2 3 4 >>> Este llamado ciclo de lectura-evaluaci\u00f3n-impresi\u00f3n (o REPL, por sus siglas en ingl\u00e9s) es muy \u00fatil para depurar y explorar. DETENTE : si no puedes descubrir c\u00f3mo interactuar con Python, detengase y descubra c\u00f3mo hacerlo. Si est\u00e1 utilizando un IDE, es posible que est\u00e9 oculto detr\u00e1s de una opci\u00f3n de men\u00fa u otra ventana. Muchas partes de este curso asumen que puede interactuar con el int\u00e9rprete. Let's take a closer look at the elements of the REPL: >>> es el indicador del int\u00e9rprete para iniciar una nueva declaraci\u00f3n. ... es la indicaci\u00f3n del int\u00e9rprete para continuar una declaraci\u00f3n. Ingrese una l\u00ednea en blanco para terminar de escribir y ejecutar lo que ingres\u00f3. El mensaje ... puede aparecer o no seg\u00fan el entorno. Para este curso, se muestra como espacios en blanco para que sea m\u00e1s f\u00e1cil cortar / pegar muestras de c\u00f3digo. El gui\u00f3n bajo _ contiene el \u00faltimo resultado. >>> 37 * 42 1554 >>> _ * 2 3108 >>> _ + 50 3158 >>> Esto solo es cierto en el modo interactivo. Nunca uses _ en un programa. 1.2.3: Creando programas Los programas se colocan en archivos .py. # hola.py print('hola mundo') Puede crear estos archivos con su editor de texto favorito. 1.2.4: Ejecutando programas Para ejecutar un programa, ejec\u00fatelo en la terminal con el comando python. Por ejemplo, en la l\u00ednea de comandos Unix: $ python hola.py hola mundo $ O desde el shell de Windows: C:\\AlgunDirectorio>hola.py hello world C:\\AlgunDirectorio>c:\\python36\\python hola.py hello world Nota: en Windows, es posible que deba especificar una ruta completa al int\u00e9rprete de Python, como c:\\python36\\python . Sin embargo, si Python se instala de la forma habitual, es posible que pueda simplemente escribir el nombre del programa, como hola.py. 1.2.5: Un ejemplo Resolvamos el siguiente problema: Una ma\u00f1ana, sales y colocas un billete de un d\u00f3lar en la acera de la torre Sears en Chicago. Cada d\u00eda a partir de entonces, sale el doble de facturas. \u00bfCu\u00e1nto tiempo tarda la pila de billetes en superar la altura de la torre? He aqu\u00ed una soluci\u00f3n: # sears.py billete_grosor = 0.11 * 0.001 # Metros (0.11 mm) sears_altura = 442 # Altura (metros) num_billetes = 1 dia = 1 while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 print('N\u00famero de d\u00edas', dia) print('N\u00famero de facturas', num_billetes) print('Altura final', num_billetes * billete_grosor) Cuando lo ejecuta, obtiene el siguiente resultado: $ python3 sears.py 1 1 0.00011 2 2 0.00022 3 4 0.00044 4 8 0.00088 5 16 0.00176 6 32 0.00352 7 64 0.00704 8 128 0.01408 9 256 0.02816 10 512 0.05632 11 1024 0.11264 12 2048 0.22528 13 4096 0.45056 14 8192 0.90112 15 16384 1.80224 16 32768 3.60448 17 65536 7.20896 18 131072 14.41792 19 262144 28.83584 20 524288 57.67168 21 1048576 115.34336 22 2097152 230.68672 N\u00famero de d\u00edas 23 N\u00famero de facturas 4194304 Altura final 461.37344 Usando este programa como gu\u00eda, puede aprender una serie de conceptos b\u00e1sicos importantes sobre Python. 1.2.6: Declaraciones Un programa de Python es una secuencia de declaraciones: a = 3 + 4 b = a * 2 print(b) Cada declaraci\u00f3n termina con una nueva l\u00ednea. Las sentencias se ejecutan una tras otra hasta que el control llega al final del archivo. 1.2.7: Comentarios Los comentarios son texto que no se ejecutar\u00e1. a = 3 + 4 # Esto es un comentario b = a * 2 print(b) Los comentarios se indican con # y se extienden hasta el final de la l\u00ednea. 1.2.8: Variables Una variable es el nombre de un valor. Puede utilizar letras (min\u00fasculas y may\u00fasculas) de la a a la z, adem\u00e1s del car\u00e1cter subrayado _ . Los n\u00fameros tambi\u00e9n pueden formar parte del nombre de una variable, excepto como primer car\u00e1cter. altura = 442 # v\u00e1lido _height = 442 # v\u00e1lido altura2 = 442 # v\u00e1lido 2height = 442 # inv\u00e1lido 1.2.9: Tipos Las variables no necesitan declararse con el tipo de valor. El tipo est\u00e1 asociado con el valor del lado derecho, no con el nombre de la variable. altura = 442 # Un n\u00famero entero altura = 442.0 # Punto flotante height = 'Muy alto' # Una cadena Python se escribe din\u00e1micamente. El \"tipo\" percibido de una variable puede cambiar a medida que se ejecuta un programa en funci\u00f3n del valor actual que se le asigna. 1.2.10: Casos Sensitivos Python distingue entre may\u00fasculas y min\u00fasculas. Las letras may\u00fasculas y min\u00fasculas se consideran letras diferentes. Todas estas son variables diferentes: nombre = 'Jake' Nombre = 'Elwood' NOMBRE = 'Guido' Las declaraciones de idioma son siempre en min\u00fasculas. while x < 0: # OK WHILE x < 0: # ERROR 1.2.11: Ciclar La instrucci\u00f3n while ejecuta un ciclo. while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 print('Numero de dias', dia) Las declaraciones con sangr\u00eda debajo del while se ejecutar\u00e1n siempre que la expresi\u00f3n posterior al while sea verdadera / cierta. 1.2.12: Sangr\u00edas (las de texto, no las de vino) La sangr\u00eda se usa para denotar grupos de declaraciones que van juntas. Considere el ejemplo anterior: while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 print('Numero de dias', dia) La sangr\u00eda agrupa las siguientes declaraciones juntas como las operaciones que se repiten: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 Debido a que la instrucci\u00f3n print() al final no tiene sangr\u00eda, no pertenece al ciclo. La l\u00ednea vac\u00eda es solo para facilitar la lectura. No afecta la ejecuci\u00f3n. Sangr\u00edas - Mejores pr\u00e1cticas Utilice espacios en lugar de tabulaciones. Utilice 4 espacios por nivel. Utilice un editor compatible con Python. El \u00fanico requisito de Python es que la sangr\u00eda dentro del mismo bloque sea consistente. Por ejemplo, esto es un error: while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 # error num_billetes = num_billetes * 2 1.2.13: Condicionales La instrucci\u00f3n if se usa para ejecutar un condicional: if a > b: print('Computadora dice no') else: print('Computadora dice si') Puede verificar m\u00faltiples condiciones agregando verificaciones adicionales usando elif. if a > b: print('Computadora dice no') elif a == b: print('Computadora dice si') else: print('Computadora dice quizas') 1.2.14: Imprimiendo La funci\u00f3n de impresi\u00f3n produce una sola l\u00ednea de texto con los valores pasados. print('\u00a1Hola mundo!') # Imprime el texto '\u00a1Hola mundo!' Puede utilizar variables. El texto impreso ser\u00e1 el valor de la variable, no el nombre. x = 100 print(x) # Imprime el texto '100' Si pasa m\u00e1s de un valor para imprimir, est\u00e1n separados por espacios. nombre = 'Jake' print('Mi nombre es', nombre) # Imprime el texto 'Mi nombre es Jake' print () siempre pone una nueva l\u00ednea al final. print('Hola') print('Mi nombre es', 'Jake') Esto imprime: sh Hola Mi nombre es Jake La nueva l\u00ednea adicional se puede suprimir: print('Hola', end = '') print('Mi nombre es', 'Jake') Este c\u00f3digo ahora se imprimir\u00e1: Hola mi nombre es Jake 1.2.15: Input (dato de entrada) de usuario Para leer una l\u00ednea de entrada de usuario escrita, use la funci\u00f3n input() : nombre = input('Ingrese su nombre:') print('Tu nombre es', nombre) input imprime un mensaje al usuario y devuelve su respuesta. Esto es \u00fatil para programas peque\u00f1os, ejercicios de aprendizaje o depuraci\u00f3n simple. No se usa mucho para programas reales. 1.2.16: La declaraci\u00f3n \"pass\" Sometimes you need to specify an empty code block. The keyword pass is used for it. if a > b: pass else: print('Computer says false') This is also called a \"no-op\" statement. It does nothing. It serves as a placeholder for statements, possibly to be added later. 1.2.17: Ejercicios Este es el primer conjunto de ejercicios en los que necesita crear archivos Python y ejecutarlos. A partir de este punto, se asume que est\u00e1 editando archivos en el directorio practico-python/Work/ . Para ayudarle a localizar el lugar adecuado, se han creado varios archivos de inicio vac\u00edos con los nombres de archivo adecuados. Busque el archivo Work/bounce.py que se utiliz\u00f3 en el primer ejercicio. Ejercicio 1.5: El rebote Una pelota de goma se deja caer desde una altura de 100 metros y cada vez que golpea el suelo, rebota hasta 3/5 de la altura a la que cay\u00f3. Escriba un programa bounce.py que imprima una tabla que muestre la altura de los primeros 10 rebotes. Su programa deber\u00eda crear una tabla que se parezca a esto: 1 60,0 2 36,0 3 21.599999999999998 4 12.959999999999999 5 7.775999999999999 6 4.6655999999999995 7 2.7993599999999996 8 1,6796159999999998 9 1,0077695999999998 10 0.6046617599999998 Nota: Puede limpiar un poco la salida si usa la funci\u00f3n round() . Intente usarlo para redondear la salida a 4 d\u00edgitos. 1 60,0 2 36,0 3 21,6 4 12,96 5 7.776 6 4.6656 7 2.7994 8 1,6796 9 1.0078 10 0.6047 Ejercicio 1.6: Depuraci\u00f3n El siguiente fragmento de c\u00f3digo contiene c\u00f3digo del problema de la torre Sears. Tambi\u00e9n tiene un error. billete_grosor = 0.11 * 0.001 # Metros (0.11 mm) sears_altura = 442 # Altura (metros) num_billetes = 1 dia = 1 while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dias + 1 num_billetes = num_billetes * 2 print ('N\u00famero de d\u00edas', dia) print ('N\u00famero de facturas', num_billetes) print ('Altura final', num_billetes * billete_grosor) Copie y pegue el c\u00f3digo que aparece arriba en un nuevo programa llamado sears.py . Cuando ejecute el c\u00f3digo, obtendr\u00e1 un mensaje de error que hace que el programa se bloquee de esta manera: Traceback (most recent call last): File \"sears.py\", line 10, in <module> day = dias + 1 NameError: name 'dias' is not defined Leer los mensajes de error es una parte importante del c\u00f3digo Python. Si su programa falla, la \u00faltima l\u00ednea del mensaje de rastreo es la raz\u00f3n real por la cual el programa falla. Por encima de eso, deber\u00eda ver un fragmento de c\u00f3digo fuente y luego un nombre de archivo de identificaci\u00f3n y un n\u00famero de l\u00ednea. \u00bfQu\u00e9 l\u00ednea es el error? Cual es el error? Arreglar el error Ejecute el programa con \u00e9xito 1.3 N\u00fameros Esta secci\u00f3n discute sobre c\u00e1lculos matem\u00e1ticos. 1.3.1: Tipos de numeros Python tiene 4 tipos de n\u00fameros: Booleanos Enteros Punto flotante Complejo (n\u00fameros imaginarios) 1.3.2: Booleanos (bool) Los booleanos tienen dos valores: True , False . a = True b = False Num\u00e9ricamente, se eval\u00faan como n\u00fameros enteros con valor \"1\", \"0\". c = 4 + True # 5 d = False if d == 0: print('d is False') Pero no escriba c\u00f3digo como ese. Ser\u00eda extra\u00f1o. * 1.3.3: Enteros (int) Valores firmados de tama\u00f1o y base arbitrarios: a = 37 b = -299392993727716627377128481812241231 c = 0x7fa8 # Hexadecimal d = 0o253 # Octal e = 0b10001111 # Binary Operaciones comunes: x + y Suma x - y Resta x * y Multiplicacion x / y Divisi\u00f3n (produce un flotante) x // y Divisi\u00f3n entera (produce un entero) x % y Modulo (devuelve el resto de la divisi\u00f3n) x ** y Potencia x << n Bit desplazamiento izquierda x >> n Bit desplazamiento derecha x & y Bit-wise AND x | y Bit-wise OR x ^ y Bit-wise XOR ~x Bit-wise NOT abs(x) Valor absoluto 1.3.4: Punto flotante (float) Utilice una notaci\u00f3n decimal o exponencial para especificar un valor de coma flotante: a = 37.45 b = 4e5 # 4 x 10**5 or 400,000 c = -1.345e-10 Los flotantes se representan con precisi\u00f3n doble utilizando la representaci\u00f3n de CPU nativa [IEEE 754] (https://en.wikipedia.org/wiki/IEEE_754). Es lo mismo que el tipo \"doble\" en el lenguaje de programaci\u00f3n C. 17 d\u00edgitos de precisi\u00f3n Exponente de -308 a 308 Tenga en cuenta que los n\u00fameros de punto flotante son inexactos cuando representan decimales. >>> a = 2.1 + 4.2 >>> a == 6.3 False >>> a 6.300000000000001 >>> Esto no es un problema de Python , sino el hardware de punto flotante subyacente en la CPU. Operaciones comunes: x + y Suma x - y Resta x * y Multiplicacion x / y Division x // y Division entera x % y Modulo x ** y Potencia abs(x) Valor absoluto Estos son los mismos operadores que los enteros, excepto los operadores bit a bit. Las funciones matem\u00e1ticas adicionales se encuentran en el m\u00f3dulo math . import math a = math.sqrt(x) b = math.sin(x) c = math.cos(x) d = math.tan(x) e = math.log(x) 1.3.5: Comparaciones Los siguientes operadores de comparaci\u00f3n / relacionales funcionan con n\u00fameros: x < y Menor x <= y Menor o igual x > y Mayor x >= y Mayor o igual x == y Igual x != y No es igual Puede formar expresiones booleanas m\u00e1s complejas usando and , or , not Aqu\u00ed est\u00e1n algunos ejemplos: if b >= a and b <= c: print('b est\u00e1 entre a y c') if not (b < a or b > c): print('b todav\u00eda est\u00e1 entre a y c') 1.3.6: Convirtiendo numeros El nombre del tipo se puede utilizar para convertir valores: a = int(x) # Convierte x a entero b = float(x) # Convierte x a coma flotante Try it out. >>> a = 3.14159 >>> int(a) 3 >>> b = '3.14159' # Tambi\u00e9n funciona con cadenas de numeros >>> float(b) 3.14159 >>> 1.3.7: Ejercicios Recordatorio: Estos ejercicios asumen que est\u00e1 trabajando en el directorio /Work . Busque el archivo mortgage.py . Ejercicio 1.7: La hipoteca de Dave Dave ha decidido sacar una hipoteca de tasa fija a 30 a\u00f1os de $ 500,000 con el comercio de hipotecas, inversiones en acciones y Bitcoin de Guido corporaci\u00f3n. La tasa de inter\u00e9s es del 5% y el pago mensual es $ 2684,11. Aqu\u00ed hay un programa que calcula la cantidad total que Dave tendr\u00e1 para pagar durante la vida de la hipoteca: # mortgage.py capital = 500000.0 tasa = 0.05 pago = 2684.11 total_pagado = 0.0 while capital > 0: capital = capital * (1 + tasa / 12) - pago total_pagado = total_pagado + pago print('Total pagado', total_pagado) Ingrese a este programa y ejec\u00fatelo. Deber\u00eda obtener una respuesta de \"966,279.6\". Ejercicio 1.8: Pagos adicionales Suponga que Dave paga $1000 adicionales al mes durante los primeros 12 meses de la hipoteca. Modifique el programa para incorporar este pago adicional y haga que imprima el monto total pagado junto con la cantidad de meses requeridos. Cuando ejecute el nuevo programa, deber\u00eda informar un pago total de \"929,965.62\" durante 342 meses. Ejercicio 1.9: Hacer una calculadora de pago adicional Modifique el programa para que la informaci\u00f3n de pago adicional pueda manejarse de manera m\u00e1s general. H\u00e1galo de modo que el usuario pueda configurar estas variables: extra_pago_inicio_mes = 61 extra_pago_fin_mes = 108 extra_pago = 1000 Haga que el programa mire estas variables y calcule el total pagado adecuadamente. \u00bfCu\u00e1nto pagar\u00e1 Dave si paga $1000 adicionales al mes durante 4 a\u00f1os a partir de la primera ya se han pagado cinco a\u00f1os? Ejercicio 1.10: Crear una tabla Modifique el programa para imprimir una tabla que muestre el mes, el total pagado hasta el momento y el capital restante. La salida deber\u00eda verse as\u00ed: 1 2684.11 499399.22 2 5368.22 498795.94 3 8052.33 498190.15 4 10736.44 497581.83 5 13420.55 496970.98 ... 308 874705.88 3478.83 309 877389,99 809,21 310 880074.1 -1871.53 Total pagado 880074,1 Meses 310 Ejercicio 1.11: Bono Mientras lo hace, corrija el programa para corregir el pago en exceso que se produjo en el \u00faltimo mes. Ejercicio 1.12: Un misterio int () y float () se pueden usar para convertir n\u00fameros. Por ejemplo: >>> int(\"123\") 123 >>> float(\"1.23\") 1.23 >>> Con eso en mente, \u00bfpuede explicar este comportamiento? >>> bool(\"False\") True >>> 1.4 Cadenas Esta secci\u00f3n presenta formas de trabajar con texto. 1.4.1: Representando texto literal Los literales de cadena se escriben en programas con comillas. # Comillas simples a = 'S\u00ed, pero no, pero s\u00ed, pero ...' # Comillas dobles b = \"la computadora dice que no\" # Comillas triples c = ''' M\u00edrame a los ojos, m\u00edrame a los ojos, los ojos, los ojos, los ojos, no alrededor de los ojos, no mires alrededor de los ojos, m\u00edrame a los ojos, est\u00e1s debajo. ''' Normalmente, las cadenas solo pueden abarcar una sola l\u00ednea. Las comillas triples capturan todo el texto incluido en varias l\u00edneas incluido todo el formato. No hay diferencia entre usar simple (') versus doble (\") citas. Sin embargo, se debe utilizar el mismo tipo de cita que se utiliza para iniciar una cadena como para terminarla . 1.4.2: C\u00f3digo de escape de cadenas Los c\u00f3digos de escape se utilizan para representar caracteres de control y caracteres que no se pueden escribir f\u00e1cilmente directamente en el teclado. A continuaci\u00f3n, se muestran algunos c\u00f3digos de escape comunes: '\\n' salto de l\u00ednea '\\r' Retorno de carro '\\t' Pesta\u00f1a '\\'' Literal comilla simple '\\' Literal comillas dobles '\\\\' Barra invertida literal 1.4.3: Representaci\u00f3n de cadenas Cada car\u00e1cter de una cadena se almacena internamente como un denominado \"punto de c\u00f3digo\" Unicode, que es un entero. Puede especificar un valor de punto de c\u00f3digo exacto mediante las siguientes secuencias de escape: a = '\\xf1' # a = '\u00f1' b = '\\u2200' # b = '\u2200' c = '\\U0001D122' # c = '\ud834\udd22' d = '\\N{FOR ALL}' # d = '\u2200' La [Base de datos de caracteres Unicode] (https://unicode.org/charts) es una referencia para todos los c\u00f3digos de caracteres disponibles. 1.4.4: Indexaci\u00f3n de cadenas Las cadenas funcionan como una matriz para acceder a caracteres individuales. Utiliza un \u00edndice entero, comenzando en 0. Los \u00edndices negativos especifican una posici\u00f3n relativa al final de la cadena. a = 'Hello world' b = a[0] # 'H' c = a[4] # 'o' d = a[-1] # 'd' (final de la cadena) Tambi\u00e9n puede dividir o seleccionar subcadenas especificando un rango de \u00edndices con : . d = a[:5] # 'Hello' e = a[6:] # 'world' f = a[3:8] # 'lo wo' g = a[-5:] # 'world' El car\u00e1cter del \u00edndice final no est\u00e1 incluido. Los \u00edndices que faltan asumen el principio o el final de la cadena. 1.4.5: Operaciones de cadena Concatenaci\u00f3n, tama\u00f1o, pertenencia y replicaci\u00f3n. # concatenaci\u00f3n (+) a = 'Hello' + 'World' # 'HelloWorld' b = 'Say ' + a # 'Say HelloWorld' # tama\u00f1o (len) s = 'Hello' len(s) # 5 # prueba de pertenencia (`in`, `not in`) t = 'e' in s # True f = 'x' in s # False g = 'hi' not in s # True # replicaci\u00f3n (s * n) rep = s * 5 # 'HelloHelloHelloHelloHello' 1.4.6: Metodos de cadena Las cadenas tienen m\u00e9todos que realizan varias operaciones con los datos de la cadena. Ejemplo: eliminar cualquier espacio en blanco inicial / final. s = ' Hello ' t = s.strip() # 'Hello' Ejemplo: conversi\u00f3n de casos. s = 'Hello' l = s.lower() # 'hello' u = s.upper() # 'HELLO' Ejemplo: Reemplazo de texto. s = 'Hello world' t = s.replace('Hello' , 'Hallo') # 'Hallo world' Otros metodos de cadena Las cadenas tienen una amplia variedad de otros m\u00e9todos para probar y manipular los datos de texto. Esta es una peque\u00f1a muestra de m\u00e9todos: s.endswith(sufijo) # Compruebe si la cadena termina con sufijo s.find(t) # Primera aparici\u00f3n de t en s s.index(t) # Primera aparici\u00f3n de t en s s.isalpha() # Comprueba si los caracteres son alfab\u00e9ticos s.isdigit() # Comprueba si los caracteres son num\u00e9ricos s.islower() # Comprueba si los caracteres son min\u00fasculas s.isupper() # Comprueba si los caracteres est\u00e1n en may\u00fasculas s.join(slist) # \u00danase a una lista de cadenas usando s como delimitador s.lower() # Convertir a min\u00fasculas s.replace(antiguo, nuevo) # Reemplazar texto s.rfind(t) # Busca t desde el final de la cadena s.rindex(t) # Busca t desde el final de la cadena s.split([delim]) # Dividir cadena en lista de subcadenas s.startswith(prefix) # Compruebe si la cadena comienza con prefijo s.strip() # Franja el espacio inicial / final s.upper() # Convertir a may\u00fasculas 1.4.7: Mutabilidad de cadenas Las cadenas son \"inmutables\" o de solo lectura. Una vez creado, el valor no se puede cambiar. >>> s = 'Hello World' >>> s[1] = 'a' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'str' object does not support item assignment >>> Todas las operaciones y m\u00e9todos que manipulan datos de cadenas, siempre crean cadenas nuevas. 1.4.8: Conversiones de cadena Utilice str () para convertir cualquier valor en una cadena. El resultado es una cadena que sostiene el mismo texto que habr\u00eda sido producido por la declaraci\u00f3n print () . >>> x = 42 >>> str(x) '42' >>> 1.4.9: Cadenas byte Una cadena de bytes de 8 bits, que se encuentra com\u00fanmente con I/O de bajo nivel, se escribe de la siguiente manera: data = b'Hello World\\r\\n' Al poner una b peque\u00f1a antes de la primera cita, especificas que es una cadena de bytes en lugar de una cadena de texto. La mayor\u00eda de las operaciones habituales con cadenas funcionan. len(data) # 13 data[0:5] # b'Hello' data.replace(b'Hello', b'Cruel') # b'Cruel World\\r\\n' La indexaci\u00f3n es un poco diferente porque devuelve valores de bytes como n\u00fameros enteros. data[0] # 72 (ASCII code for 'H') Conversion to/from text strings. text = data.decode('utf-8') # bytes -> texto data = text.encode('utf-8') # texto -> bytes El argumento 'utf-8' especifica una codificaci\u00f3n de caracteres. Otros comunes los valores incluyen 'ascii' y ' latin1' . 1.4.10: Cadenas crudas Las cadenas sin formato son literales de cadena con una barra invertida no interpretada. Se especifican anteponiendo la cita inicial con una \"r\" min\u00fascula. >>> rs = r'c:\\newdata\\test' # Sin formato (barra invertida no interpretada) >>> rs 'c:\\\\newdata\\\\test' La cadena es el texto literal incluido adentro, exactamente como se escribe. Esto es \u00fatil en situaciones en las que la barra invertida tiene significado. Ejemplo: nombre de archivo, expresiones regulares, etc. 1.4.11: Cadenas f Una cadena con sustituci\u00f3n de expresi\u00f3n formateada. >>> nombre = 'IBM' >>> acciones = 100 >>> precio = 91.1 >>> a = f'{nombre:>10s} {acciones:10d} {precio:10.2f}' >>> a ' IBM 100 91.10' >>> b = f'Costo = ${acciones * precio:0.2f}' >>> b 'Costo = $9110.00' >>> Nota: Esto requiere Python 3.6 o m\u00e1s reciente. El significado de los c\u00f3digos de formato se explica m\u00e1s adelante. 1.4.12: Ejercicios En estos ejercicios, experimentar\u00e1 con operaciones en Python tipo de cadena. Debe hacer esto en el indicador interactivo de Python donde puede ver f\u00e1cilmente los resultados. Nota IMPORTANTE: En los ejercicios en los que se supone que debe interactuar con el int\u00e9rprete, >>> es el indicador del int\u00e9rprete que obtienes cuando Python quiere que escriba una nueva declaraci\u00f3n. Algunas declaraciones en el per\u00edodo de ejercicios varias l\u00edneas: para que se ejecuten estas declaraciones, es posible que deba presionar 'volver' unas cuantas veces. Solo un recordatorio de que * NO * escribe el >>> al trabajar con estos ejemplos. Empiece por definir una cadena que contenga una serie de s\u00edmbolos de cotizaci\u00f3n burs\u00e1til como este: >>> symbols = 'AAPL,IBM,MSFT,YHOO,SCO' >>> Ejercicio 1.13: Extracci\u00f3n de caracteres individuales y subcadenas Las cadenas son matrices de caracteres. Intente extraer algunos caracteres: >>> symbols[0] ? >>> symbols[1] ? >>> symbols[2] ? >>> symbols[-1] # Last character ? >>> symbols[-2] # Negative indices are from end of string ? >>> En Python, las cadenas son de solo lectura. Verifique esto intentando cambiar el primer car\u00e1cter de symbols a una min\u00fascula 'a'. >>> symbols[0] = 'a' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'str' object does not support item assignment >>> Ejercicio 1.14: Concatenaci\u00f3n de caracteres Although string data is read-only, you can always reassign a variable to a newly created string. Try the following statement which concatenates a new symbol \"GOOG\" to the end of symbols : >>> symbols = symbols + 'GOOG' >>> symbols 'AAPL,IBM,MSFT,YHOO,SCOGOOG' >>> \u00a1Ups! Eso no es lo que quer\u00edas. Corr\u00edjelo para que la variable symbols contenga el valor 'AAPL, IBM, MSFT, YHOO, SCO, GOOG' . >>> symbols = ? >>> symbols 'AAPL,IBM,MSFT,YHOO,SCO,GOOG' >>> Agregue 'HPQ' al frente de la cuerda >>> symbols = ? >>> symbols 'HPQ,AAPL,IBM,MSFT,YHOO,SCO,GOOG' >>> En estos ejemplos, puede parecer que la cadena original est\u00e1 siendo modificado, en una aparente violaci\u00f3n de que las cadenas sean de solo lectura. No entonces. Las operaciones en cadenas crean una cadena completamente nueva cada una hora. Cuando se reasigna el nombre de la variable s\u00edmbolos , apunta al cadena reci\u00e9n creada. Posteriormente, la cuerda vieja se destruye ya que ya no se usa. Ejercicio 1.15: Pruebas de membres\u00eda Experimente con el operador \"in\" para buscar subcadenas. En el mensaje interactivo, pruebe estas operaciones: >>> 'IBM' in symbols ? >>> 'AA' in symbols True >>> 'CAT' in symbols ? >>> \u00bfPor qu\u00e9 la comprobaci\u00f3n de 'AA' devolvi\u00f3 True ? Ejercicio 1.16: M\u00e9todos de cadenas En el indicador interactivo de Python, intente experimentar con algunos de los m\u00e9todos de cadena. >>> symbols.lower() ? >>> symbols ? >>> Recuerde, las cadenas siempre son de solo lectura. Si desea guardar el resultado de una operaci\u00f3n, debe colocarlo en una variable: >>> lowersyms = symbols.lower() >>> Pruebe algunas operaciones m\u00e1s: >>> symbols.find('MSFT') ? >>> symbols[13:17] ? >>> symbols = symbols.replace('SCO','DOA') >>> symbols ? >>> name = ' IBM \\n' >>> name = name.strip() # Remove surrounding whitespace >>> name ? >>> Ejercicio 1.17: f-strings A veces desea crear una cadena e incrustar los valores de variables en \u00e9l. Para hacer eso, use una f-string. Por ejemplo: >>> nombre = 'IBM' >>> acciones = 100 >>> precio = 91.1 >>> f'{acciones} acciones de {nombre} a ${precio:0.2f}' '100 acciones de IBM a $91.10' >>> Modifique el programa de hipoteca Dave mortgage.py del Ejercicio 1.10 para crear su salida usando f-strings. Intente hacer que la salida est\u00e9 bien alineada. Ejercicio 1.18: Expresiones regulares Una limitaci\u00f3n de las operaciones b\u00e1sicas con cadenas es que no admite cualquier tipo de coincidencia de patrones avanzada. Por eso tu Necesito recurrir al m\u00f3dulo re y las expresiones regulares de Python. El manejo de expresiones regulares es un gran tema, pero aqu\u00ed hay un breve ejemplo: >>> text = 'Today is 3/27/2018. Tomorrow is 3/28/2018.' >>> # Find all occurrences of a date >>> import re >>> re.findall(r'\\d+/\\d+/\\d+', text) ['3/27/2018', '3/28/2018'] >>> # Replace all occurrences of a date with replacement text >>> re.sub(r'(\\d+)/(\\d+)/(\\d+)', r'\\3-\\1-\\2', text) 'Today is 2018-3-27. Tomorrow is 2018-3-28.' >>> Para obtener m\u00e1s informaci\u00f3n sobre el m\u00f3dulo re , consulte la documentaci\u00f3n oficial en https://docs.python.org/library/re.html . Algunos comentarios A medida que comienza a experimentar con el int\u00e9rprete, a menudo desea conocer m\u00e1s sobre las operaciones soportadas por diferentes objetos. Por ejemplo, \u00bfc\u00f3mo averigua qu\u00e9 operaciones est\u00e1n disponibles en un cadena? Dependiendo de su entorno de Python, es posible que pueda ver una lista de los m\u00e9todos disponibles mediante el completado con tabulaci\u00f3n. Por ejemplo, intente escribir esta: >>> s = 'hello world' >>> s.<tab key> >>> Si presionar tab no hace nada, puede volver al funci\u00f3n incorporada dir () . Por ejemplo: >>> s = 'hello' >>> dir(s) ['__add__', '__class__', '__contains__', ..., 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'] >>> dir () produce una lista de todas las operaciones que pueden aparecer despu\u00e9s de (.) . Utilice el comando help () para obtener m\u00e1s informaci\u00f3n sobre una operaci\u00f3n espec\u00edfica: >>> help(s.upper) Help on built-in function upper: upper(...) S.upper() -> string Return a copy of the string S converted to uppercase. >>> 1.5 Listas Esta secci\u00f3n presenta listas, el tipo principal de Python para contener una colecci\u00f3n ordenada de valores. 1.5.1: Creando una lista Utilice corchetes para definir un literal de lista: nombres = [ 'Elwood', 'Jake', 'Curtis' ] numeros = [39, 38, 42, 65, 111] En ocasiones las listas son creadas por otros metodos. Por ejemplo, una cadena puede ser dividida haciendo uso del m\u00e9todo split() . >>> linea = 'GOOG,100,490.10' >>> fila = line.split(',') >>> fila ['GOOG', '100', '490.10'] >>> 1.5.2: Operaciones de lista Las listas pueden contener elementos de cualquier tipo. Agregue un nuevo elemento usando append() : nombres.append('Murphy') # Agrega al final nombres.insert(2, 'Aretha') # Inserta en el medio Use + para concatenar listas: s = [1, 2, 3] t = ['a', 'b'] s + t # [1, 2, 3, 'a', 'b'] Las listas est\u00e1n indexadas por n\u00fameros enteros. A partir de 0. nombres = [ 'Elwood', 'Jake', 'Curtis' ] nombres[0] # 'Elwood' nombres[1] # 'Jake' nombres[2] # 'Curtis' Los \u00edndices negativos cuentan desde el final. nombres[-1] # 'Curtis' Puede cambiar cualquier elemento de una lista. nombres[1] = 'Joliet Jake' nombres # [ 'Elwood', 'Joliet Jake', 'Curtis' ] Length of the list. nombres = ['Elwood','Jake','Curtis'] len(nombres) # 3 Prueba de pertenencia ( in , not in ) 'Elwood' in nombres # True 'Britney' not in nombres # True Replicaci\u00f3n ( s * n ). s = [1, 2, 3] s * 3 # [1, 2, 3, 1, 2, 3, 1, 2, 3] 1.5.3: Iteracion de lista y b\u00fasqueda Utilice for para iterar sobre el contenido de la lista. for nombre in nombres: # use nombre # e.g. print(nombre) ... Esto es similar a una declaraci\u00f3n foreach de otros lenguajes de programaci\u00f3n. Para encontrar la posici\u00f3n de algo r\u00e1pidamente, use index() . nombres = ['Elwood','Jake','Curtis'] nombres.index('Curtis') # 2 Si el elemento est\u00e1 presente m\u00e1s de una vez, index() devolver\u00e1 el \u00edndice de la primera aparici\u00f3n. Si el elemento no se encuentra, generar\u00e1 una excepci\u00f3n \"ValueError\". 1.5.4: Remoci\u00f3n en lista Puede eliminar elementos por valor de elemento o por \u00edndice: # Using the value nombres.remove('Curtis') # Using the index del nombres[1] Eliminar un art\u00edculo no crea un agujero. Otros elementos se mover\u00e1n hacia abajo para llenar el espacio desocupado. Si hay m\u00e1s de una aparici\u00f3n del elemento, remove() eliminar\u00e1 solo la primera aparici\u00f3n. 1.5.5: Ordenar una lista Las listas se pueden ordenar \"in situ\". s = [10, 1, 7, 3] s.sort() # [1, 3, 7, 10] # Reverse order s = [10, 1, 7, 3] s.sort(reverse=True) # [10, 7, 3, 1] # It works with any ordered data s = ['foo', 'bar', 'spam'] s.sort() # ['bar', 'foo', 'spam'] Utilice sorted() si desea crear una nueva lista en su lugar: t = sorted(s) # s sin cambios, t tiene los valores ordenados 1.5.6: Listas y matem\u00e1ticas Caution: Lists were not designed for math operations. >>> nombres = [1, 2, 3, 4, 5] >>> nombres * 2 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5] >>> nombres + [10, 11, 12, 13, 14] [1, 2, 3, 4, 5, 10, 11, 12, 13, 14] Espec\u00edficamente, las listas no representan vectores/matrices como en MATLAB, Octave, R, etc. Sin embargo, existen algunos m\u00f3dulos/paquetes/librer\u00edas que le ayudan con eso (e.g. numpy ) 1.5.7: Ejercicios En este ejercicio, experimentaremos con listas. En la ultima secci\u00f3n trabajamos con cadenas conteniendo s\u00edmbolos de acciones de bolsa valores. >>> symbols = 'HPQ,AAPL,IBM,MSFT,YHOO,DOA,GOOG' Divida la cadena en una lista de nombres haciendo uso de la operacion split() de cadenas: >>> symlist = symbols.split(',') 1.19: Extracci\u00f3n y reasignaci\u00f3n de elementos Pruebe algunas busquedas: >>> symlist[0] 'HPQ' >>> symlist[1] 'AAPL' >>> symlist[-1] 'GOOG' >>> symlist[-2] 'DOA' >>> Intente reasignar un valor: \u200b```python >>> symlist[2] = 'AIG' >>> symlist ['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'DOA', 'GOOG'] >>> Agarre unos pedazos: \u200b```python >>> symlist[0:3] ['HPQ', 'AAPL', 'AIG'] >>> symlist[-2:] ['DOA', 'GOOG'] >>> Crea una lista vac\u00eda y agregue un elemento. \u200b```python >>> mysyms = [] >>> mysyms.append('GOOG') >>> mysyms ['GOOG'] Puede reasignar una porci\u00f3n de la lista a otra lista. Por ejemplo: >>> symlist[-2:] = mysyms >>> symlist ['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG'] >>> Cuando hace esto, la lista en el lado izquierdo ( symlist ) ser\u00e1 reajustada apropiadamente para que el lado derecho ( mysyms ) ocupe un puesto en ella. 1.20: Ciclando sobre una lista El ciclo/bucle for funciona ciclando sobre data en una secuencia la lista. Pruebe lo siguiente: >>> for s in symlist: ... print('s =', s) 1.21: Pruebas de pertenencia Utilice el operador in o not in para comprobar si 'AIG' , 'AA' y 'CAT' est\u00e1n en la lista de s\u00edmbolos. >>> # Est\u00e1 'AIG' en `symlist`? True >>> # Est\u00e1 'AA' en `symlist`? False >>> # 'CAT' no esta en `symlist`? True >>> 1.22: A\u00f1adiendo, insertando y borrando elementos Utilice el m\u00e9todo append() para agregar el s\u00edmbolo 'RHT' al final de symlist . >>> # agregue 'RHT' >>> symlist ['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG', 'RHT'] >>> Utilice el m\u00e9todo insert() para insertar el s\u00edmbolo 'AA' como el segundo elemento de la lista. >>> # Agregue 'AA' como segundo item en la lista >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG', 'RHT'] >>> Utilice el m\u00e9todo remove() para eliminar 'MSFT' de la lista. >>> # Remueva 'MSFT' >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'YHOO', 'GOOG', 'RHT'] >>> A\u00f1ada una entrada duplicada para ` YHOO' al final de la lista. Nota: est\u00e1 perfectamente bien si una lista tenga valores duplicados. >>> # Append 'YHOO' >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'YHOO', 'GOOG', 'RHT', 'YHOO'] >>> Utilice el m\u00e9todo index() para encontrar la primera posici\u00f3n de 'YHOO' en la lista. >>> # Encuentre el primer \u00edndice de 'YHOO' 4 >>> symlist[4] 'YHOO' >>> Cuente cu\u00e1ntas veces 'YHOO' est\u00e1 en la lista: >>> symlist.count('YHOO') 2 >>> Remueva la primera ocurrencia de 'YHOO' . >>> # Remueva primera ocurrencia de 'YHOO' >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'GOOG', 'RHT', 'YHOO'] >>> Para su informaci\u00f3n, no existe ning\u00fan m\u00e9todo para buscar o eliminar todas las apariciones de un elemento Sin embargo, veremos una forma elegante de hacer esto en la secci\u00f3n 2. 1.23: Ordernando \u00bfQuieres ordenar una lista? Utilice el m\u00e9todo sort() . Pru\u00e9balo: >>> symlist.sort() >>> symlist ['AA', 'AAPL', 'AIG', 'GOOG', 'HPQ', 'RHT', 'YHOO'] >>> \u00bfQuiere ordenar al rev\u00e9s? Prueba esto: >>> symlist.sort(reverse=True) >>> symlist ['YHOO', 'RHT', 'HPQ', 'GOOG', 'AIG', 'AAPL', 'AA'] >>> Note: Sorting a list modifies its contents 'in-place'. That is, the elements of the list are shuffled around, but no new list is created as a result. 1.24: Ajuntando todo nuevamente \u00bfQuiere tomar una lista de cadenas y unirlas en una sola cadena? Utilice el m\u00e9todo join () de cadenas como esta (nota: esto se ve gracioso al principio). >>> a = ','.join(symlist) >>> a 'YHOO,RHT,HPQ,GOOG,AIG,AAPL,AA' >>> b = ':'.join(symlist) >>> b 'YHOO:RHT:HPQ:GOOG:AIG:AAPL:AA' >>> c = ''.join(symlist) >>> c 'YHOORHTHPQGOOGAIGAAPLAA' >>> 1.25: Listas de cualquier cosa Las listas pueden contener cualquier tipo de objeto, incluidas otras listas (por ejemplo, listas anidadas). Probar esto: >>> nums = [101, 102, 103] >>> items = ['spam', symlist, nums] >>> items ['spam', ['YHOO', 'RHT', 'HPQ', 'GOOG', 'AIG', 'AAPL', 'AA'], [101, 102, 103]] Preste mucha atenci\u00f3n a la salida anterior. items es una lista con tres elementos. El primer elemento es una cadena, pero los otros dos elementos son listas. Puede acceder a los elementos de las listas anidadas mediante varias operaciones de indexaci\u00f3n. >>> items[0] 'spam' >>> items[0][0] 's' >>> items[1] ['YHOO', 'RHT', 'HPQ', 'GOOG', 'AIG', 'AAPL', 'AA'] >>> items[1][1] 'RHT' >>> items[1][1][2] 'T' >>> items[2] [101, 102, 103] >>> items[2][1] 102 >>> Aunque t\u00e9cnicamente es posible hacer estructuras muy complicadas compuestas por listas, como regla general, es preferible mantener las cosas simples. Por lo general, las listas contienen elementos que tienen el mismo tipo de valor. Por ejemplo, una lista que consta completamente de n\u00fameros o una lista de texto de cadena. Mezclar diferentes tipos de datos en la misma lista es a menudo un buen dolor de cabeza, por lo que es mejor evitarlo. 1.6 Archivos La mayor\u00eda de los programas necesitan leer la entrada de alg\u00fan lugar. Esta secci\u00f3n discute sobre el acceso a archivos. 1.6.1: I/O de un Archivo (entrada / salida) Abre un archivo. f = open('foo.txt', 'rt') # Open for reading (text) g = open('bar.txt', 'wt') # Open for writing (text) Lee toda la data. data = f.read() data = f.read([maxbytes]) # Read only up to 'maxbytes' bytes Escribe algo de texto. g.write('some text') Cierra cuando terminas. f.close() g.close() Files should be properly closed and it's an easy step to forget. Thus, the preferred approach is to use the with statement like this. with open(filename, 'rt') as file: # Haz uso del archivo \"file\" ... # No hay necesidad de cerrar expl\u00edcitamente ...statements Esto cierra autom\u00e1ticamente el archivo cuando el control abandona el bloque de c\u00f3digo con sangr\u00eda. 1.6.2: Patrones comunes de lectura de archivos Leer un archivo completo de una vez como una cadena. with open('foo.txt', 'rt') as file: data = file.read() # `data` is a string with all the text in `foo.txt` Leer un archivo l\u00ednea por l\u00ednea iterando. with open(filename, 'rt') as file: for line in file: # Process the line 1.6.3: Patrones comunes de escritura de archivos Escribe data en cadena. with open('outfile', 'wt') as out: out.write('Hello World\\n') ... Redireccionando la funci\u00f3n de impresi\u00f3n. with open('outfile', 'wt') as out: print('Hola Mundo', file=out) ... 1.6.4: Ejercicios Estos ejercicios dependen de un archivo Data/portfolio.csv . El archivo contiene una lista de l\u00edneas con informaci\u00f3n sobre una cartera de acciones. Se supone que est\u00e1 trabajando en el archivo practice-python/Work/ directorio. Si no est\u00e1 seguro, puede averiguar d\u00f3nde Python se est\u00e1 ejecutando haciendo esto: >>> import os >>> os.getcwd() '/Users/beazley/Desktop/practical-python/Work' # Su salida ser\u00e1 diferente >>> 1.26: Prerequisitos Primero, intente leer todo el archivo a la vez en una cadena grande: >>> with open('Data/portfolio.csv', 'rt') as f: data = f.read() >>> data 'name,shares,price\\n\"AA\",100,32.20\\n\"IBM\",50,91.10\\n\"CAT\",150,83.44\\n\"MSFT\",200,51.23\\n\"GE\",95,40.37\\n\"MSFT\",50,65.10\\n\"IBM\",100,70.44\\n' >>> print(data) name,shares,price \"AA\",100,32.20 \"IBM\",50,91.10 \"CAT\",150,83.44 \"MSFT\",200,51.23 \"GE\",95,40.37 \"MSFT\",50,65.10 \"IBM\",100,70.44 >>> En el ejemplo anterior, cabe se\u00f1alar que Python tiene dos modos de salida. En el primer modo, donde aparece \">>> data\" en el indicador, Python muestra la representaci\u00f3n de la cadena sin procesar, incluidas las comillas y c\u00f3digos de escape. Cuando escribe print(data) , obtiene el formato real de salida de la cadena. Para leer un archivo l\u00ednea por l\u00ednea, use un bucle for como \u00e9ste: >>> with open('Data/portfolio.csv', 'rt') as f: for line in f: print(line, end='') name,shares,price \"AA\",100,32.20 \"IBM\",50,91.10 ... >>> En determinadas ocasiones, es posible que desee leer u omitir manualmente una \u00fanica l\u00ednea de texto (por ejemplo, tal vez desee omitir la primera l\u00ednea de los encabezados de columna). >>> f = open('Data/portfolio.csv', 'rt') >>> headers = next(f) >>> headers 'name,shares,price\\n' >>> for line in f: print(line, end='') \"AA\",100,32.20 \"IBM\",50,91.10 ... >>> f.close() >>> next() devuelve la siguiente l\u00ednea de texto en el archivo. Si lo llamara repetidamente, obtendr\u00eda l\u00edneas sucesivas. Sin embargo, para que lo sepa, el ciclo for hace uso de next() para obtener sus datos. Por lo tanto, normalmente no lo llamar\u00eda directamente a menos que est\u00e9 tratando de omitir o leer expl\u00edcitamente una sola l\u00ednea como se muestra. Una vez que est\u00e9 leyendo las l\u00edneas de un archivo, puede comenzar a realizar m\u00e1s procesamiento, como dividir. Por ejemplo, intente esto: >>> f = open('Data/portfolio.csv', 'rt') >>> headers = next(f).split(',') >>> headers ['name', 'shares', 'price\\n'] >>> for line in f: row = line.split(',') print(row) ['\"AA\"', '100', '32.20\\n'] ['\"IBM\"', '50', '91.10\\n'] ... >>> f.close() Nota: En estos ejemplos, f.close() se llama expl\u00edcitamente porque no se utiliza la instrucci\u00f3n with . 1.27: Leyendo de un archivo Ahora que sabe c\u00f3mo leer un archivo, escribamos un programa para realizar un c\u00e1lculo. Las columnas de portfolio.csv corresponden al nombre de la acci\u00f3n, n\u00famero de acciones, y precio de compra de una sola participaci\u00f3n accionaria. Escribe un programa llamado pcost.py que abre este archivo, lee todas las l\u00edneas y calcula cu\u00e1nto cost\u00f3 comprar todas las acciones en la cartera (portfolio). Sugerencia: para convertir una cadena en un entero, use int(s) . Para convertir una cadena en punto flotante, use float(s) . Su programa deber\u00eda imprimir un resultado como el siguiente: Costo total 44671.15 1.28: Otro tipo de \"archivos\" \u00bfY si quisiera leer un archivo que no es de texto, como un archivo comprimido gzip? La funci\u00f3n integrada open() no le ayudar\u00e1 aqu\u00ed, pero Python tiene un m\u00f3dulo gzip que puede leer archivos comprimidos gzip. >>> import gzip >>> with gzip.open('Data/portfolio.csv.gz', 'rt') as f: for line in f: print(line, end='') ... mira la salida ... >>> Nota: Incluir el modo de archivo de 'rt' es fundamental aqu\u00ed. Si olvidas eso obtendr\u00e1 cadenas de bytes en lugar de cadenas de texto normales. Algunos comentarios Los cient\u00edficos de datos se apresuran a se\u00f1alar que librerias como Pandas ya tienen una funci\u00f3n para leer archivos CSV. Esto es cierto y funciona bastante bien. Sin embargo, este no es un curso sobre c\u00f3mo aprender pandas. Leer archivos es un problema m\u00e1s general que las espec\u00edficaciones de archivos CSV. La raz\u00f3n principal por la que trabajamos con un archivo CSV es porque es un formato conocido para la mayor\u00eda de los programadores y es relativamente f\u00e1cil trabajarlo directamente - ilustrando muchas caracter\u00edsticas de Python en el proceso. Entonces, por supuesto, use Pandas cuando regrese al trabajo. Para el resto de este curso, sin embargo, vamos a seguir con la funcionalidad est\u00e1ndar de Python. 1.7 Funciones A medida que sus programas comiencen a crecer, va a querer organizarse. Esta secci\u00f3n presenta brevemente las funciones y los m\u00f3dulos de la biblioteca est\u00e1ndar. Tambi\u00e9n se introduce el manejo de errores con excepciones. 1.7.1: Funciones personalizadas Utilice funciones para el c\u00f3digo que desea reutilizar. Aqu\u00ed hay una definici\u00f3n de funci\u00f3n: def sumcount(n): ''' Retorna la suma de los primeros n enteros ''' total = 0 while n > 0: total += n n -= 1 return total Para llamar una funci\u00f3n. a = sumcount(100) Una funci\u00f3n es una serie de declaraciones que realizan alguna tarea y devuelven un resultado. La palabra clave return es necesaria para especificar expl\u00edcitamente el valor de retorno de la funci\u00f3n. 1.7.2: Funciones de biblioteca Python viene con una gran biblioteca est\u00e1ndar. Se accede a los m\u00f3dulos de la biblioteca usando import . Por ejemplo: import math x = math.sqrt(10) import urllib.request u = urllib.request.urlopen('http://www.python.org/') data = u.read() Cubriremos bibliotecas y m\u00f3dulos con m\u00e1s detalle m\u00e1s adelante. 1.7.3: Errores y excepciones Las funciones informan sobre errores como las excepciones. Una excepci\u00f3n provoca la interrupci\u00f3n de una funci\u00f3n y puede hacer que todo el programa se detenga si no se maneja. Prueba esto en tu REPL (read/lee, evaluate/evalua, print/imprime, cicla/loop) de Python. >>> int('N/A') Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ValueError: invalid literal for int() with base 10: 'N/A' >>> Para fines de depuraci\u00f3n, el mensaje describe lo que sucedi\u00f3, d\u00f3nde ocurri\u00f3 el error, y un rastreo que muestra las otras llamadas a funciones que provocaron la falla. 1.7.4: Atrapando y gestionando excepciones Las excepciones de pueden atrapar y gestionar. Para atrapar, use la declaraci\u00f3n try - except . for linea in f: campos = linea.split() try: acciones = int(campos[1]) except ValueError: print(\"No se pudo analizar\", linea) ... El nombre \"ValueError\" debe coincidir con el tipo de error que est\u00e1 intentando detectar. A menudo es dif\u00edcil saber exactamente qu\u00e9 tipo de errores pueden ocurrir de antemano dependiendo de la operaci\u00f3n que se est\u00e9 realizando. Para mejor o para peor, el manejo de excepciones a menudo se agrega despu\u00e9s de que un programa fall\u00f3 inesperadamente (es decir, \"oh, nos olvidamos de detectar ese error, deber\u00eda gestionar eso! \"). 1.7.5: Generando excepciones Para generar una excepci\u00f3n, use la instrucci\u00f3n raise . raise RuntimeError('Que desorden') Esto har\u00e1 que el programa se anule con un rastreo de excepci\u00f3n. A menos que sea atrapado por un bloque \"try-except\". $ python3 foo.py Traceback (most recent call last): File \"foo.py\", line 21, in <module> raise RuntimeError(\"Que desorden\") RuntimeError: What a kerfuffle 1.7.6: Ejercicios 1.29: Definiendo una funci\u00f3n Intente definir una funci\u00f3n simple: >>> def saludo(nombre): 'Genera un saludo' print('Hola', nombre) >>> greeting('Guido') Hola Guido >>> greeting('Paula') Hola Paula >>> Si la primera declaraci\u00f3n de una funci\u00f3n es una cadena, sirve como documentaci\u00f3n. Intente escribir un comando como help(saludo) para que se muestre. 1.30: Convirtiendo una secuencia de comandos en una funci\u00f3n Tome el c\u00f3digo que escribi\u00f3 para el programa pcost.py en [Ejercicio 1.27] (06_Files.md) y convi\u00e9rtalo en una funci\u00f3n cartera_costo(nombre_de_archivo) . La funci\u00f3n toma un nombre de archivo como entrada, lee los datos de la cartera en ese archivo y devuelve el costo total de la cartera como flotante. Para usar su funci\u00f3n, cambie su programa para que se vea algo as\u00ed: def cartera_costo(nombre_de_archivo): ... # Su c\u00f3digo aqu\u00ed ... costo = cartera_costo('Data/portfolio.csv') print('Total cost:', costo) Cuando ejecute su programa, deber\u00eda ver el mismo resultado que antes. Despu\u00e9s de ejecutar su programa, tambi\u00e9n puede llamar a su funci\u00f3n interactivamente escribiendo esto: $ python3 -i pcost.py Esto le permitir\u00e1 llamar a su funci\u00f3n desde el modo interactivo. >>> cartera_costo('Data/portfolio.csv') 44671.15 >>> Being able to experiment with your code interactively is useful for testing and debugging. 1.31: Administraci\u00f3n de errores \u00bfQu\u00e9 sucede si prueba su funci\u00f3n en un archivo al que le faltan algunos campos? >>> cartera_costo('Data/missing.csv') Traceback (most recent call last): File \"<stdin>\", line 1, in <module> File \"pcost.py\", line 11, in cartera_costo nshares = int(fields[1]) ValueError: invalid literal for int() with base 10: '' >>> En este momento, tiene que tomar una decisi\u00f3n. Para que el programa funcione puede depurar el archivo de entrada eliminando las l\u00edneas o puede modificar su c\u00f3digo para manejar las l\u00edneas defectuosas de alguna forma. Modifique el programa pcost.py para detectar la excepci\u00f3n, imprima una advertencia mensaje y contin\u00fae procesando el resto del archivo. 1.32: Usando una funci\u00f3n de biblioteca local Python viene con una biblioteca est\u00e1ndar de funciones \u00fatiles. Una biblioteca que podr\u00eda ser \u00fatil aqu\u00ed es el m\u00f3dulo csv . Debe usarlo siempre que tenga que trabajar con archivos de datos CSV. A continuaci\u00f3n, se muestra un ejemplo de c\u00f3mo funciona: >>> import csv >>> f = open('Data/portfolio.csv') >>> rows = csv.reader(f) >>> headers = next(rows) >>> headers ['name', 'shares', 'price'] >>> for row in rows: print(row) ['AA', '100', '32.20'] ['IBM', '50', '91.10'] ['CAT', '150', '83.44'] ['MSFT', '200', '51.23'] ['GE', '95', '40.37'] ['MSFT', '50', '65.10'] ['IBM', '100', '70.44'] >>> f.close() >>> Una cosa buena sobre el m\u00f3dulo csv es que se ocupa de una variedad de detalles de bajo nivel como las comillas y la divisi\u00f3n adecuada por comas. En la salida anterior, notar\u00e1 que ha eliminado las comillas dobles lejos de los nombres en la primera columna. Modifique su programa pcost.py para que use el m\u00f3dulo csv para analizar e intentar ejecutar ejemplos anteriores. 1.33: Leyendo desde la l\u00ednea de comando En el programa pcost.py , el nombre del archivo de entrada se ha integrado en el c\u00f3digo: # pcost.py def cartera_costo(filename): ... # Su c\u00f3digo aqu\u00ed ... costo = cartera_costo('Data/portfolio.csv') print('Total costo:', costo) Est\u00e1 bien para aprender y probar, pero en un programa real probablemente no har\u00eda eso. En su lugar, pudiera pasar el nombre del archivo como argumento a un archivo con una secuencia de comandos. Intente cambiar la parte inferior del programa de la siguiente manera: # pcost.py import sys def cartera_costo(filename): ... # Su c\u00f3digo aqu\u00ed ... if len(sys.argv) == 2: filename = sys.argv[1] else: filename = 'Data/portfolio.csv' costo = cartera_costo(filename) print('Total costo:', costo) sys.argv es una lista que contiene argumentos pasados en la l\u00ednea de comando (si los hay). Para ejecutar su programa, deber\u00e1 ejecutar Python desde la terminal. Por ejemplo, desde bash en Unix: bash % python3 pcost.py Data/portfolio.csv Total cost: 44671.15 bash %","title":"1 Intro a Python"},{"location":"intro_python/#1-intro-a-python","text":"","title":"1. Intro a Python"},{"location":"intro_python/#11-introduciendo-python","text":"El objetivo de este cap\u00edtulo es introducir las bases de Python. Iniciaremos desde cero y aprenderemos a editar, ejecutar, y depurar programas. Adem\u00e1s, escribiremos una secuencia de comandos que lee data en un archivo CSV y ejecuta un c\u00e1lculo.","title":"1.1 Introduciendo Python"},{"location":"intro_python/#111-que-es-python","text":"Python es un lenguaje interpretado de programaci\u00f3n de alto nivel. A menudo se le clasifica como un lenguaje de secuencias de comandos y tambi\u00e9n se le considera similar a lenguajes como Perl, Tcl o Ruby. La sintaxis de Python est\u00e1 vagamente inspirada en elementos de la programaci\u00f3n C. Python fue creado por Guido van Rossum alrededor de 1990, quien lo nombr\u00f3 en honor a la comedia de origen brit\u00e1nico Monty Python .","title":"1.1.1: Qu\u00e9 es Python?"},{"location":"intro_python/#112-donde-consigo-python","text":"Puedes obtener una versi\u00f3n de Python en Python.org . Para los prop\u00f3sitos de este curso, solo necesitas una instalaci\u00f3n b\u00e1sica. Recomiendo instalar Python 3.6 o una versi\u00f3n m\u00e1s reciente. Python 3.6 es el que se usa en las notas y en las soluciones, sin embargo puedes utilizar cualquier versi\u00f3n.","title":"1.1.2: Donde consigo Python?"},{"location":"intro_python/#113-porque-fue-creado","text":"En palabras del creador de Python: Mi motivaci\u00f3n original para crear Python fue la necesidad percibida de un lenguaje de alto nivel en el proyecto Amoeba [Sistemas Operativos]. Me di cuenta de que el desarrollo de las utilidades de administraci\u00f3n del sistema en C estaban tardando demasiado. Adem\u00e1s, hacer estas cosas en el shell Bourne no iba a funcionar por una variedad de razones. ... Entonces, era necesario un lenguaje que cerrara la brecha entre C y el shell. Guido van Rossum","title":"1.1.3: Porqu\u00e9 fue creado?"},{"location":"intro_python/#114-donde-esta-python-en-mi-maquina","text":"Aunque hay muchos entornos en los que puede ejecutar Python, Python normalmente se instala en su m\u00e1quina como un programa que se ejecuta desde la terminal o el shell de comandos. Desde la terminal, deber\u00eda poder escribir python as\u00ed: $ python Python 3.8.1 (default, Feb 20 2020, 09:29:22) [Clang 10.0.0 (clang-1000.10.44.4)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> print(\"hello world\") hello world >>> Si no ha utilizado el shell o una terminal, probablemente deber\u00eda terminar un breve tutorial sobre eso primero y luego regresar. Aunque hay muchos entornos en donde puede programar en Python, ser\u00e1 un programador m\u00e1s s\u00f3lido de Python si puede ejecutar, depurar e interactuar con Python en la terminal. Este es el entorno nativo de Python. Si puede usar Python aqu\u00ed, podr\u00e1 usarlo en cualquier otro lugar.","title":"1.1.4: D\u00f3nde est\u00e1 Python en mi Maquina?"},{"location":"intro_python/#115-ejercicios","text":"","title":"1.1.5: Ejercicios"},{"location":"intro_python/#ejercicio-11-utilizando-python-como-calculadora","text":"En su m\u00e1quina, inicie Python y util\u00edcelo como calculador para resolver el siguiente problema. El suertudo de Juan compr\u00f3 75 acciones de Google a un precio de $235.14 USD por acci\u00f3n. Hoy, las acciones de Google tienen un precio de $711.25 USD. Usando el modo interactivo de Python como una calculadora, averig\u00fce cu\u00e1ntas ganancias obtendr\u00eda Juan si vendiera todas sus acciones. >>> (711.25 - 235.14) * 75 35708.25 >>> Consejo profesional: use la variable de subrayado (_) para usar el resultado del \u00faltimo c\u00e1lculo. Por ejemplo, \u00bfcu\u00e1ntas ganancias obtiene Juan despu\u00e9s de que su malvado corredor se lleva su parte del 20%? >>> _ * 0.80 28566.600000000002 >>>","title":"Ejercicio 1.1: Utilizando Python como Calculadora"},{"location":"intro_python/#ejercicio-12-consiguiendo-ayuda","text":"Utilice el comando help() para obtener ayuda sobre la funci\u00f3n abs (). Luego use help() para obtener ayuda sobre la funci\u00f3n round (). Escriba help() solo sin valor para ingresar al visor de ayuda interactiva. Una advertencia con help() es que no funciona para declaraciones b\u00e1sicas de Python como for, if, while, etc. (es decir, si escribe help (for) obtendr\u00e1 un error de sintaxis). En su lugar, puede intentar poner el tema de la ayuda entre comillas, como ayuda (\"para\"). Si eso no funciona, tendr\u00e1 que recurrir a una b\u00fasqueda en Internet. Seguimiento: vaya a http://docs.python.org y busque la documentaci\u00f3n de la funci\u00f3n abs() (pista: se encuentra en la referencia de la biblioteca relacionada con las funciones integradas).","title":"Ejercicio 1.2: Consiguiendo ayuda"},{"location":"intro_python/#ejercicio-13-copiar-y-pegar","text":"Este curso est\u00e1 estructurado como una serie de p\u00e1ginas en las que se le anima a probar ejemplos interactivos de c\u00f3digo Python escribi\u00e9ndolos a mano. Si est\u00e1 aprendiendo Python por primera vez, se recomienda este \"enfoque lento\". Obtendr\u00e1 una mejor idea del idioma al reducir la velocidad, escribir cosas y pensar en lo que est\u00e1 haciendo. Si debe \"cortar y pegar\" ejemplos de c\u00f3digo, seleccione el c\u00f3digo comenzando despu\u00e9s del indicador >>> y subiendo hasta, pero no m\u00e1s all\u00e1 de la primera l\u00ednea en blanco o el siguiente mensaje >>> (lo que aparezca primero). Seleccione \"copiar\" en el navegador, vaya a la ventana de Python y seleccione \"pegar\" para copiarlo en el shell de Python. Para que el c\u00f3digo se ejecute, es posible que deba presionar \"Retorno\" una vez despu\u00e9s de haberlo pegado. Corte y pegue las siguientes declaraciones de Python: >>> 12 + 20 32 >>> (3 + 4 + 5 + 6) 18 >>> for i in range(5): print(i) 0 1 2 3 4 >>> Advertencia: No es posible pegar m\u00e1s de un comando de Python (declaraciones que aparecen despu\u00e9s de >>> ) en el shell b\u00e1sico de Python a la vez. Tienes que pegar cada comando de uno en uno. Ahora que ha hecho esto, recuerde que sacar\u00e1 m\u00e1s provecho de la clase escribiendo el c\u00f3digo lentamente y pensando en ello, no cortando y pegando.","title":"Ejercicio 1.3: Copiar y pegar"},{"location":"intro_python/#ejercicio-14-donde-esta-mi-bus","text":"Pruebe algo m\u00e1s avanzado y escriba estas declaraciones para averiguar cu\u00e1nto tiempo tendr\u00e1n que esperar las personas que esperan en la esquina de la calle Clark y Balmoral en Chicago al pr\u00f3ximo autob\u00fas CTA n. \u00b0 22 en direcci\u00f3n norte: >>> import urllib.request >>> u = urllib.request.urlopen('http://ctabustracker.com/bustime/map/getStopPredictions.jsp?stop=14791&route=22') >>> from xml.etree.ElementTree import parse >>> doc = parse(u) >>> for pt in doc.findall('.//pt'): print(pt.text) 6 MIN 18 MIN 28 MIN >>> S\u00ed, acaba de descargar una p\u00e1gina web, analizar un documento XML y extraer informaci\u00f3n \u00fatil en aproximadamente 6 l\u00edneas de c\u00f3digo. Los datos a los que accedi\u00f3 en realidad alimentan el sitio web http://ctabustracker.com/bustime/home.jsp. Int\u00e9ntelo nuevamente y observe c\u00f3mo cambian las predicciones. Si falla la primera declaraci\u00f3n de importaci\u00f3n import urllib.request , probablemente est\u00e9 usando Python 2. Para este curso, debe asegurarse de que est\u00e1 usando Python 3.6 o m\u00e1s reciente. Vaya a https://www.python.org para descargarlo si lo necesita. Si su entorno de trabajo requiere el uso de un servidor proxy HTTP, es posible que deba configurar la variable de entorno HTTP_PROXY para que esta parte del ejercicio funcione. Por ejemplo: >>> import os >>> os.environ['HTTP_PROXY'] = 'http://suproxy.server.com' >>> Si no puede hacer que esto funcione, no se preocupe. El resto de este curso no tiene nada que ver con analizar XML.","title":"Ejercicio 1.4: Donde esta mi bus?"},{"location":"intro_python/#12-un-primer-programa","text":"","title":"1.2 Un primer programa"},{"location":"intro_python/#121-ejecutando-python","text":"Python programs always run inside an interpreter. The interpreter is a \"console-based\" application that normally runs from a command shell. python3 Python 3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04) [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Los programadores expertos generalmente no tienen problemas para usar el int\u00e9rprete de esta manera, pero no es tan f\u00e1cil de usar para los principiantes. Es posible que est\u00e9 utilizando un entorno que proporciona una interfaz diferente a Python. Eso est\u00e1 bien, pero aprender a ejecutar la terminal de Python sigue siendo una habilidad \u00fatil.","title":"1.2.1: Ejecutando Python"},{"location":"intro_python/#122-modo-interactivo","text":"Cuando inicias Python, obtienes un modo interactivo donde puedes experimentar. Si comienza a escribir declaraciones, se ejecutar\u00e1n de inmediato. No hay ciclo de edici\u00f3n / compilaci\u00f3n / ejecuci\u00f3n / depuraci\u00f3n. >>> print('hello world') hello world >>> 37*42 1554 >>> for i in range(5): ... print(i) ... 0 1 2 3 4 >>> Este llamado ciclo de lectura-evaluaci\u00f3n-impresi\u00f3n (o REPL, por sus siglas en ingl\u00e9s) es muy \u00fatil para depurar y explorar. DETENTE : si no puedes descubrir c\u00f3mo interactuar con Python, detengase y descubra c\u00f3mo hacerlo. Si est\u00e1 utilizando un IDE, es posible que est\u00e9 oculto detr\u00e1s de una opci\u00f3n de men\u00fa u otra ventana. Muchas partes de este curso asumen que puede interactuar con el int\u00e9rprete. Let's take a closer look at the elements of the REPL: >>> es el indicador del int\u00e9rprete para iniciar una nueva declaraci\u00f3n. ... es la indicaci\u00f3n del int\u00e9rprete para continuar una declaraci\u00f3n. Ingrese una l\u00ednea en blanco para terminar de escribir y ejecutar lo que ingres\u00f3. El mensaje ... puede aparecer o no seg\u00fan el entorno. Para este curso, se muestra como espacios en blanco para que sea m\u00e1s f\u00e1cil cortar / pegar muestras de c\u00f3digo. El gui\u00f3n bajo _ contiene el \u00faltimo resultado. >>> 37 * 42 1554 >>> _ * 2 3108 >>> _ + 50 3158 >>> Esto solo es cierto en el modo interactivo. Nunca uses _ en un programa.","title":"1.2.2: Modo interactivo"},{"location":"intro_python/#123-creando-programas","text":"Los programas se colocan en archivos .py. # hola.py print('hola mundo') Puede crear estos archivos con su editor de texto favorito.","title":"1.2.3: Creando programas"},{"location":"intro_python/#124-ejecutando-programas","text":"Para ejecutar un programa, ejec\u00fatelo en la terminal con el comando python. Por ejemplo, en la l\u00ednea de comandos Unix: $ python hola.py hola mundo $ O desde el shell de Windows: C:\\AlgunDirectorio>hola.py hello world C:\\AlgunDirectorio>c:\\python36\\python hola.py hello world Nota: en Windows, es posible que deba especificar una ruta completa al int\u00e9rprete de Python, como c:\\python36\\python . Sin embargo, si Python se instala de la forma habitual, es posible que pueda simplemente escribir el nombre del programa, como hola.py.","title":"1.2.4: Ejecutando programas"},{"location":"intro_python/#125-un-ejemplo","text":"Resolvamos el siguiente problema: Una ma\u00f1ana, sales y colocas un billete de un d\u00f3lar en la acera de la torre Sears en Chicago. Cada d\u00eda a partir de entonces, sale el doble de facturas. \u00bfCu\u00e1nto tiempo tarda la pila de billetes en superar la altura de la torre? He aqu\u00ed una soluci\u00f3n: # sears.py billete_grosor = 0.11 * 0.001 # Metros (0.11 mm) sears_altura = 442 # Altura (metros) num_billetes = 1 dia = 1 while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 print('N\u00famero de d\u00edas', dia) print('N\u00famero de facturas', num_billetes) print('Altura final', num_billetes * billete_grosor) Cuando lo ejecuta, obtiene el siguiente resultado: $ python3 sears.py 1 1 0.00011 2 2 0.00022 3 4 0.00044 4 8 0.00088 5 16 0.00176 6 32 0.00352 7 64 0.00704 8 128 0.01408 9 256 0.02816 10 512 0.05632 11 1024 0.11264 12 2048 0.22528 13 4096 0.45056 14 8192 0.90112 15 16384 1.80224 16 32768 3.60448 17 65536 7.20896 18 131072 14.41792 19 262144 28.83584 20 524288 57.67168 21 1048576 115.34336 22 2097152 230.68672 N\u00famero de d\u00edas 23 N\u00famero de facturas 4194304 Altura final 461.37344 Usando este programa como gu\u00eda, puede aprender una serie de conceptos b\u00e1sicos importantes sobre Python.","title":"1.2.5: Un ejemplo"},{"location":"intro_python/#126-declaraciones","text":"Un programa de Python es una secuencia de declaraciones: a = 3 + 4 b = a * 2 print(b) Cada declaraci\u00f3n termina con una nueva l\u00ednea. Las sentencias se ejecutan una tras otra hasta que el control llega al final del archivo.","title":"1.2.6: Declaraciones"},{"location":"intro_python/#127-comentarios","text":"Los comentarios son texto que no se ejecutar\u00e1. a = 3 + 4 # Esto es un comentario b = a * 2 print(b) Los comentarios se indican con # y se extienden hasta el final de la l\u00ednea.","title":"1.2.7: Comentarios"},{"location":"intro_python/#128-variables","text":"Una variable es el nombre de un valor. Puede utilizar letras (min\u00fasculas y may\u00fasculas) de la a a la z, adem\u00e1s del car\u00e1cter subrayado _ . Los n\u00fameros tambi\u00e9n pueden formar parte del nombre de una variable, excepto como primer car\u00e1cter. altura = 442 # v\u00e1lido _height = 442 # v\u00e1lido altura2 = 442 # v\u00e1lido 2height = 442 # inv\u00e1lido","title":"1.2.8: Variables"},{"location":"intro_python/#129-tipos","text":"Las variables no necesitan declararse con el tipo de valor. El tipo est\u00e1 asociado con el valor del lado derecho, no con el nombre de la variable. altura = 442 # Un n\u00famero entero altura = 442.0 # Punto flotante height = 'Muy alto' # Una cadena Python se escribe din\u00e1micamente. El \"tipo\" percibido de una variable puede cambiar a medida que se ejecuta un programa en funci\u00f3n del valor actual que se le asigna.","title":"1.2.9: Tipos"},{"location":"intro_python/#1210-casos-sensitivos","text":"Python distingue entre may\u00fasculas y min\u00fasculas. Las letras may\u00fasculas y min\u00fasculas se consideran letras diferentes. Todas estas son variables diferentes: nombre = 'Jake' Nombre = 'Elwood' NOMBRE = 'Guido' Las declaraciones de idioma son siempre en min\u00fasculas. while x < 0: # OK WHILE x < 0: # ERROR","title":"1.2.10: Casos Sensitivos"},{"location":"intro_python/#1211-ciclar","text":"La instrucci\u00f3n while ejecuta un ciclo. while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 print('Numero de dias', dia) Las declaraciones con sangr\u00eda debajo del while se ejecutar\u00e1n siempre que la expresi\u00f3n posterior al while sea verdadera / cierta.","title":"1.2.11: Ciclar"},{"location":"intro_python/#1212-sangrias-las-de-texto-no-las-de-vino","text":"La sangr\u00eda se usa para denotar grupos de declaraciones que van juntas. Considere el ejemplo anterior: while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 print('Numero de dias', dia) La sangr\u00eda agrupa las siguientes declaraciones juntas como las operaciones que se repiten: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 num_billetes = num_billetes * 2 Debido a que la instrucci\u00f3n print() al final no tiene sangr\u00eda, no pertenece al ciclo. La l\u00ednea vac\u00eda es solo para facilitar la lectura. No afecta la ejecuci\u00f3n.","title":"1.2.12: Sangr\u00edas (las de texto, no las de vino)"},{"location":"intro_python/#sangrias-mejores-practicas","text":"Utilice espacios en lugar de tabulaciones. Utilice 4 espacios por nivel. Utilice un editor compatible con Python. El \u00fanico requisito de Python es que la sangr\u00eda dentro del mismo bloque sea consistente. Por ejemplo, esto es un error: while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dia + 1 # error num_billetes = num_billetes * 2","title":"Sangr\u00edas - Mejores pr\u00e1cticas"},{"location":"intro_python/#1213-condicionales","text":"La instrucci\u00f3n if se usa para ejecutar un condicional: if a > b: print('Computadora dice no') else: print('Computadora dice si') Puede verificar m\u00faltiples condiciones agregando verificaciones adicionales usando elif. if a > b: print('Computadora dice no') elif a == b: print('Computadora dice si') else: print('Computadora dice quizas')","title":"1.2.13: Condicionales"},{"location":"intro_python/#1214-imprimiendo","text":"La funci\u00f3n de impresi\u00f3n produce una sola l\u00ednea de texto con los valores pasados. print('\u00a1Hola mundo!') # Imprime el texto '\u00a1Hola mundo!' Puede utilizar variables. El texto impreso ser\u00e1 el valor de la variable, no el nombre. x = 100 print(x) # Imprime el texto '100' Si pasa m\u00e1s de un valor para imprimir, est\u00e1n separados por espacios. nombre = 'Jake' print('Mi nombre es', nombre) # Imprime el texto 'Mi nombre es Jake' print () siempre pone una nueva l\u00ednea al final. print('Hola') print('Mi nombre es', 'Jake') Esto imprime: sh Hola Mi nombre es Jake La nueva l\u00ednea adicional se puede suprimir: print('Hola', end = '') print('Mi nombre es', 'Jake') Este c\u00f3digo ahora se imprimir\u00e1: Hola mi nombre es Jake","title":"1.2.14: Imprimiendo"},{"location":"intro_python/#1215-input-dato-de-entrada-de-usuario","text":"Para leer una l\u00ednea de entrada de usuario escrita, use la funci\u00f3n input() : nombre = input('Ingrese su nombre:') print('Tu nombre es', nombre) input imprime un mensaje al usuario y devuelve su respuesta. Esto es \u00fatil para programas peque\u00f1os, ejercicios de aprendizaje o depuraci\u00f3n simple. No se usa mucho para programas reales.","title":"1.2.15: Input (dato de entrada) de usuario"},{"location":"intro_python/#1216-la-declaracion-pass","text":"Sometimes you need to specify an empty code block. The keyword pass is used for it. if a > b: pass else: print('Computer says false') This is also called a \"no-op\" statement. It does nothing. It serves as a placeholder for statements, possibly to be added later.","title":"1.2.16: La declaraci\u00f3n \"pass\""},{"location":"intro_python/#1217-ejercicios","text":"Este es el primer conjunto de ejercicios en los que necesita crear archivos Python y ejecutarlos. A partir de este punto, se asume que est\u00e1 editando archivos en el directorio practico-python/Work/ . Para ayudarle a localizar el lugar adecuado, se han creado varios archivos de inicio vac\u00edos con los nombres de archivo adecuados. Busque el archivo Work/bounce.py que se utiliz\u00f3 en el primer ejercicio.","title":"1.2.17: Ejercicios"},{"location":"intro_python/#ejercicio-15-el-rebote","text":"Una pelota de goma se deja caer desde una altura de 100 metros y cada vez que golpea el suelo, rebota hasta 3/5 de la altura a la que cay\u00f3. Escriba un programa bounce.py que imprima una tabla que muestre la altura de los primeros 10 rebotes. Su programa deber\u00eda crear una tabla que se parezca a esto: 1 60,0 2 36,0 3 21.599999999999998 4 12.959999999999999 5 7.775999999999999 6 4.6655999999999995 7 2.7993599999999996 8 1,6796159999999998 9 1,0077695999999998 10 0.6046617599999998 Nota: Puede limpiar un poco la salida si usa la funci\u00f3n round() . Intente usarlo para redondear la salida a 4 d\u00edgitos. 1 60,0 2 36,0 3 21,6 4 12,96 5 7.776 6 4.6656 7 2.7994 8 1,6796 9 1.0078 10 0.6047","title":"Ejercicio 1.5: El rebote"},{"location":"intro_python/#ejercicio-16-depuracion","text":"El siguiente fragmento de c\u00f3digo contiene c\u00f3digo del problema de la torre Sears. Tambi\u00e9n tiene un error. billete_grosor = 0.11 * 0.001 # Metros (0.11 mm) sears_altura = 442 # Altura (metros) num_billetes = 1 dia = 1 while num_billetes * billete_grosor < sears_altura: print(dia, num_billetes, num_billetes * billete_grosor) dia = dias + 1 num_billetes = num_billetes * 2 print ('N\u00famero de d\u00edas', dia) print ('N\u00famero de facturas', num_billetes) print ('Altura final', num_billetes * billete_grosor) Copie y pegue el c\u00f3digo que aparece arriba en un nuevo programa llamado sears.py . Cuando ejecute el c\u00f3digo, obtendr\u00e1 un mensaje de error que hace que el programa se bloquee de esta manera: Traceback (most recent call last): File \"sears.py\", line 10, in <module> day = dias + 1 NameError: name 'dias' is not defined Leer los mensajes de error es una parte importante del c\u00f3digo Python. Si su programa falla, la \u00faltima l\u00ednea del mensaje de rastreo es la raz\u00f3n real por la cual el programa falla. Por encima de eso, deber\u00eda ver un fragmento de c\u00f3digo fuente y luego un nombre de archivo de identificaci\u00f3n y un n\u00famero de l\u00ednea. \u00bfQu\u00e9 l\u00ednea es el error? Cual es el error? Arreglar el error Ejecute el programa con \u00e9xito","title":"Ejercicio 1.6: Depuraci\u00f3n"},{"location":"intro_python/#13-numeros","text":"Esta secci\u00f3n discute sobre c\u00e1lculos matem\u00e1ticos.","title":"1.3 N\u00fameros"},{"location":"intro_python/#131-tipos-de-numeros","text":"Python tiene 4 tipos de n\u00fameros: Booleanos Enteros Punto flotante Complejo (n\u00fameros imaginarios)","title":"1.3.1: Tipos de numeros"},{"location":"intro_python/#132-booleanos-bool","text":"Los booleanos tienen dos valores: True , False . a = True b = False Num\u00e9ricamente, se eval\u00faan como n\u00fameros enteros con valor \"1\", \"0\". c = 4 + True # 5 d = False if d == 0: print('d is False') Pero no escriba c\u00f3digo como ese. Ser\u00eda extra\u00f1o. *","title":"1.3.2: Booleanos (bool)"},{"location":"intro_python/#133-enteros-int","text":"Valores firmados de tama\u00f1o y base arbitrarios: a = 37 b = -299392993727716627377128481812241231 c = 0x7fa8 # Hexadecimal d = 0o253 # Octal e = 0b10001111 # Binary Operaciones comunes: x + y Suma x - y Resta x * y Multiplicacion x / y Divisi\u00f3n (produce un flotante) x // y Divisi\u00f3n entera (produce un entero) x % y Modulo (devuelve el resto de la divisi\u00f3n) x ** y Potencia x << n Bit desplazamiento izquierda x >> n Bit desplazamiento derecha x & y Bit-wise AND x | y Bit-wise OR x ^ y Bit-wise XOR ~x Bit-wise NOT abs(x) Valor absoluto","title":"1.3.3: Enteros (int)"},{"location":"intro_python/#134-punto-flotante-float","text":"Utilice una notaci\u00f3n decimal o exponencial para especificar un valor de coma flotante: a = 37.45 b = 4e5 # 4 x 10**5 or 400,000 c = -1.345e-10 Los flotantes se representan con precisi\u00f3n doble utilizando la representaci\u00f3n de CPU nativa [IEEE 754] (https://en.wikipedia.org/wiki/IEEE_754). Es lo mismo que el tipo \"doble\" en el lenguaje de programaci\u00f3n C. 17 d\u00edgitos de precisi\u00f3n Exponente de -308 a 308 Tenga en cuenta que los n\u00fameros de punto flotante son inexactos cuando representan decimales. >>> a = 2.1 + 4.2 >>> a == 6.3 False >>> a 6.300000000000001 >>> Esto no es un problema de Python , sino el hardware de punto flotante subyacente en la CPU. Operaciones comunes: x + y Suma x - y Resta x * y Multiplicacion x / y Division x // y Division entera x % y Modulo x ** y Potencia abs(x) Valor absoluto Estos son los mismos operadores que los enteros, excepto los operadores bit a bit. Las funciones matem\u00e1ticas adicionales se encuentran en el m\u00f3dulo math . import math a = math.sqrt(x) b = math.sin(x) c = math.cos(x) d = math.tan(x) e = math.log(x)","title":"1.3.4: Punto flotante (float)"},{"location":"intro_python/#135-comparaciones","text":"Los siguientes operadores de comparaci\u00f3n / relacionales funcionan con n\u00fameros: x < y Menor x <= y Menor o igual x > y Mayor x >= y Mayor o igual x == y Igual x != y No es igual Puede formar expresiones booleanas m\u00e1s complejas usando and , or , not Aqu\u00ed est\u00e1n algunos ejemplos: if b >= a and b <= c: print('b est\u00e1 entre a y c') if not (b < a or b > c): print('b todav\u00eda est\u00e1 entre a y c')","title":"1.3.5: Comparaciones"},{"location":"intro_python/#136-convirtiendo-numeros","text":"El nombre del tipo se puede utilizar para convertir valores: a = int(x) # Convierte x a entero b = float(x) # Convierte x a coma flotante Try it out. >>> a = 3.14159 >>> int(a) 3 >>> b = '3.14159' # Tambi\u00e9n funciona con cadenas de numeros >>> float(b) 3.14159 >>>","title":"1.3.6: Convirtiendo numeros"},{"location":"intro_python/#137-ejercicios","text":"Recordatorio: Estos ejercicios asumen que est\u00e1 trabajando en el directorio /Work . Busque el archivo mortgage.py .","title":"1.3.7: Ejercicios"},{"location":"intro_python/#ejercicio-17-la-hipoteca-de-dave","text":"Dave ha decidido sacar una hipoteca de tasa fija a 30 a\u00f1os de $ 500,000 con el comercio de hipotecas, inversiones en acciones y Bitcoin de Guido corporaci\u00f3n. La tasa de inter\u00e9s es del 5% y el pago mensual es $ 2684,11. Aqu\u00ed hay un programa que calcula la cantidad total que Dave tendr\u00e1 para pagar durante la vida de la hipoteca: # mortgage.py capital = 500000.0 tasa = 0.05 pago = 2684.11 total_pagado = 0.0 while capital > 0: capital = capital * (1 + tasa / 12) - pago total_pagado = total_pagado + pago print('Total pagado', total_pagado) Ingrese a este programa y ejec\u00fatelo. Deber\u00eda obtener una respuesta de \"966,279.6\".","title":"Ejercicio 1.7: La hipoteca de Dave"},{"location":"intro_python/#ejercicio-18-pagos-adicionales","text":"Suponga que Dave paga $1000 adicionales al mes durante los primeros 12 meses de la hipoteca. Modifique el programa para incorporar este pago adicional y haga que imprima el monto total pagado junto con la cantidad de meses requeridos. Cuando ejecute el nuevo programa, deber\u00eda informar un pago total de \"929,965.62\" durante 342 meses.","title":"Ejercicio 1.8: Pagos adicionales"},{"location":"intro_python/#ejercicio-19-hacer-una-calculadora-de-pago-adicional","text":"Modifique el programa para que la informaci\u00f3n de pago adicional pueda manejarse de manera m\u00e1s general. H\u00e1galo de modo que el usuario pueda configurar estas variables: extra_pago_inicio_mes = 61 extra_pago_fin_mes = 108 extra_pago = 1000 Haga que el programa mire estas variables y calcule el total pagado adecuadamente. \u00bfCu\u00e1nto pagar\u00e1 Dave si paga $1000 adicionales al mes durante 4 a\u00f1os a partir de la primera ya se han pagado cinco a\u00f1os?","title":"Ejercicio 1.9: Hacer una calculadora de pago adicional"},{"location":"intro_python/#ejercicio-110-crear-una-tabla","text":"Modifique el programa para imprimir una tabla que muestre el mes, el total pagado hasta el momento y el capital restante. La salida deber\u00eda verse as\u00ed: 1 2684.11 499399.22 2 5368.22 498795.94 3 8052.33 498190.15 4 10736.44 497581.83 5 13420.55 496970.98 ... 308 874705.88 3478.83 309 877389,99 809,21 310 880074.1 -1871.53 Total pagado 880074,1 Meses 310","title":"Ejercicio 1.10: Crear una tabla"},{"location":"intro_python/#ejercicio-111-bono","text":"Mientras lo hace, corrija el programa para corregir el pago en exceso que se produjo en el \u00faltimo mes.","title":"Ejercicio 1.11: Bono"},{"location":"intro_python/#ejercicio-112-un-misterio","text":"int () y float () se pueden usar para convertir n\u00fameros. Por ejemplo: >>> int(\"123\") 123 >>> float(\"1.23\") 1.23 >>> Con eso en mente, \u00bfpuede explicar este comportamiento? >>> bool(\"False\") True >>>","title":"Ejercicio 1.12: Un misterio"},{"location":"intro_python/#14-cadenas","text":"Esta secci\u00f3n presenta formas de trabajar con texto.","title":"1.4 Cadenas"},{"location":"intro_python/#141-representando-texto-literal","text":"Los literales de cadena se escriben en programas con comillas. # Comillas simples a = 'S\u00ed, pero no, pero s\u00ed, pero ...' # Comillas dobles b = \"la computadora dice que no\" # Comillas triples c = ''' M\u00edrame a los ojos, m\u00edrame a los ojos, los ojos, los ojos, los ojos, no alrededor de los ojos, no mires alrededor de los ojos, m\u00edrame a los ojos, est\u00e1s debajo. ''' Normalmente, las cadenas solo pueden abarcar una sola l\u00ednea. Las comillas triples capturan todo el texto incluido en varias l\u00edneas incluido todo el formato. No hay diferencia entre usar simple (') versus doble (\") citas. Sin embargo, se debe utilizar el mismo tipo de cita que se utiliza para iniciar una cadena como para terminarla .","title":"1.4.1: Representando texto literal"},{"location":"intro_python/#142-codigo-de-escape-de-cadenas","text":"Los c\u00f3digos de escape se utilizan para representar caracteres de control y caracteres que no se pueden escribir f\u00e1cilmente directamente en el teclado. A continuaci\u00f3n, se muestran algunos c\u00f3digos de escape comunes: '\\n' salto de l\u00ednea '\\r' Retorno de carro '\\t' Pesta\u00f1a '\\'' Literal comilla simple '\\' Literal comillas dobles '\\\\' Barra invertida literal","title":"1.4.2: C\u00f3digo de escape de cadenas"},{"location":"intro_python/#143-representacion-de-cadenas","text":"Cada car\u00e1cter de una cadena se almacena internamente como un denominado \"punto de c\u00f3digo\" Unicode, que es un entero. Puede especificar un valor de punto de c\u00f3digo exacto mediante las siguientes secuencias de escape: a = '\\xf1' # a = '\u00f1' b = '\\u2200' # b = '\u2200' c = '\\U0001D122' # c = '\ud834\udd22' d = '\\N{FOR ALL}' # d = '\u2200' La [Base de datos de caracteres Unicode] (https://unicode.org/charts) es una referencia para todos los c\u00f3digos de caracteres disponibles.","title":"1.4.3: Representaci\u00f3n de cadenas"},{"location":"intro_python/#144-indexacion-de-cadenas","text":"Las cadenas funcionan como una matriz para acceder a caracteres individuales. Utiliza un \u00edndice entero, comenzando en 0. Los \u00edndices negativos especifican una posici\u00f3n relativa al final de la cadena. a = 'Hello world' b = a[0] # 'H' c = a[4] # 'o' d = a[-1] # 'd' (final de la cadena) Tambi\u00e9n puede dividir o seleccionar subcadenas especificando un rango de \u00edndices con : . d = a[:5] # 'Hello' e = a[6:] # 'world' f = a[3:8] # 'lo wo' g = a[-5:] # 'world' El car\u00e1cter del \u00edndice final no est\u00e1 incluido. Los \u00edndices que faltan asumen el principio o el final de la cadena.","title":"1.4.4: Indexaci\u00f3n de cadenas"},{"location":"intro_python/#145-operaciones-de-cadena","text":"Concatenaci\u00f3n, tama\u00f1o, pertenencia y replicaci\u00f3n. # concatenaci\u00f3n (+) a = 'Hello' + 'World' # 'HelloWorld' b = 'Say ' + a # 'Say HelloWorld' # tama\u00f1o (len) s = 'Hello' len(s) # 5 # prueba de pertenencia (`in`, `not in`) t = 'e' in s # True f = 'x' in s # False g = 'hi' not in s # True # replicaci\u00f3n (s * n) rep = s * 5 # 'HelloHelloHelloHelloHello'","title":"1.4.5: Operaciones de cadena"},{"location":"intro_python/#146-metodos-de-cadena","text":"Las cadenas tienen m\u00e9todos que realizan varias operaciones con los datos de la cadena. Ejemplo: eliminar cualquier espacio en blanco inicial / final. s = ' Hello ' t = s.strip() # 'Hello' Ejemplo: conversi\u00f3n de casos. s = 'Hello' l = s.lower() # 'hello' u = s.upper() # 'HELLO' Ejemplo: Reemplazo de texto. s = 'Hello world' t = s.replace('Hello' , 'Hallo') # 'Hallo world'","title":"1.4.6: Metodos de cadena"},{"location":"intro_python/#otros-metodos-de-cadena","text":"Las cadenas tienen una amplia variedad de otros m\u00e9todos para probar y manipular los datos de texto. Esta es una peque\u00f1a muestra de m\u00e9todos: s.endswith(sufijo) # Compruebe si la cadena termina con sufijo s.find(t) # Primera aparici\u00f3n de t en s s.index(t) # Primera aparici\u00f3n de t en s s.isalpha() # Comprueba si los caracteres son alfab\u00e9ticos s.isdigit() # Comprueba si los caracteres son num\u00e9ricos s.islower() # Comprueba si los caracteres son min\u00fasculas s.isupper() # Comprueba si los caracteres est\u00e1n en may\u00fasculas s.join(slist) # \u00danase a una lista de cadenas usando s como delimitador s.lower() # Convertir a min\u00fasculas s.replace(antiguo, nuevo) # Reemplazar texto s.rfind(t) # Busca t desde el final de la cadena s.rindex(t) # Busca t desde el final de la cadena s.split([delim]) # Dividir cadena en lista de subcadenas s.startswith(prefix) # Compruebe si la cadena comienza con prefijo s.strip() # Franja el espacio inicial / final s.upper() # Convertir a may\u00fasculas","title":"Otros metodos de cadena"},{"location":"intro_python/#147-mutabilidad-de-cadenas","text":"Las cadenas son \"inmutables\" o de solo lectura. Una vez creado, el valor no se puede cambiar. >>> s = 'Hello World' >>> s[1] = 'a' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'str' object does not support item assignment >>> Todas las operaciones y m\u00e9todos que manipulan datos de cadenas, siempre crean cadenas nuevas.","title":"1.4.7: Mutabilidad de cadenas"},{"location":"intro_python/#148-conversiones-de-cadena","text":"Utilice str () para convertir cualquier valor en una cadena. El resultado es una cadena que sostiene el mismo texto que habr\u00eda sido producido por la declaraci\u00f3n print () . >>> x = 42 >>> str(x) '42' >>>","title":"1.4.8: Conversiones de cadena"},{"location":"intro_python/#149-cadenas-byte","text":"Una cadena de bytes de 8 bits, que se encuentra com\u00fanmente con I/O de bajo nivel, se escribe de la siguiente manera: data = b'Hello World\\r\\n' Al poner una b peque\u00f1a antes de la primera cita, especificas que es una cadena de bytes en lugar de una cadena de texto. La mayor\u00eda de las operaciones habituales con cadenas funcionan. len(data) # 13 data[0:5] # b'Hello' data.replace(b'Hello', b'Cruel') # b'Cruel World\\r\\n' La indexaci\u00f3n es un poco diferente porque devuelve valores de bytes como n\u00fameros enteros. data[0] # 72 (ASCII code for 'H') Conversion to/from text strings. text = data.decode('utf-8') # bytes -> texto data = text.encode('utf-8') # texto -> bytes El argumento 'utf-8' especifica una codificaci\u00f3n de caracteres. Otros comunes los valores incluyen 'ascii' y ' latin1' .","title":"1.4.9: Cadenas byte"},{"location":"intro_python/#1410-cadenas-crudas","text":"Las cadenas sin formato son literales de cadena con una barra invertida no interpretada. Se especifican anteponiendo la cita inicial con una \"r\" min\u00fascula. >>> rs = r'c:\\newdata\\test' # Sin formato (barra invertida no interpretada) >>> rs 'c:\\\\newdata\\\\test' La cadena es el texto literal incluido adentro, exactamente como se escribe. Esto es \u00fatil en situaciones en las que la barra invertida tiene significado. Ejemplo: nombre de archivo, expresiones regulares, etc.","title":"1.4.10: Cadenas crudas"},{"location":"intro_python/#1411-cadenas-f","text":"Una cadena con sustituci\u00f3n de expresi\u00f3n formateada. >>> nombre = 'IBM' >>> acciones = 100 >>> precio = 91.1 >>> a = f'{nombre:>10s} {acciones:10d} {precio:10.2f}' >>> a ' IBM 100 91.10' >>> b = f'Costo = ${acciones * precio:0.2f}' >>> b 'Costo = $9110.00' >>> Nota: Esto requiere Python 3.6 o m\u00e1s reciente. El significado de los c\u00f3digos de formato se explica m\u00e1s adelante.","title":"1.4.11: Cadenas f"},{"location":"intro_python/#1412-ejercicios","text":"En estos ejercicios, experimentar\u00e1 con operaciones en Python tipo de cadena. Debe hacer esto en el indicador interactivo de Python donde puede ver f\u00e1cilmente los resultados. Nota IMPORTANTE: En los ejercicios en los que se supone que debe interactuar con el int\u00e9rprete, >>> es el indicador del int\u00e9rprete que obtienes cuando Python quiere que escriba una nueva declaraci\u00f3n. Algunas declaraciones en el per\u00edodo de ejercicios varias l\u00edneas: para que se ejecuten estas declaraciones, es posible que deba presionar 'volver' unas cuantas veces. Solo un recordatorio de que * NO * escribe el >>> al trabajar con estos ejemplos. Empiece por definir una cadena que contenga una serie de s\u00edmbolos de cotizaci\u00f3n burs\u00e1til como este: >>> symbols = 'AAPL,IBM,MSFT,YHOO,SCO' >>>","title":"1.4.12: Ejercicios"},{"location":"intro_python/#ejercicio-113-extraccion-de-caracteres-individuales-y-subcadenas","text":"Las cadenas son matrices de caracteres. Intente extraer algunos caracteres: >>> symbols[0] ? >>> symbols[1] ? >>> symbols[2] ? >>> symbols[-1] # Last character ? >>> symbols[-2] # Negative indices are from end of string ? >>> En Python, las cadenas son de solo lectura. Verifique esto intentando cambiar el primer car\u00e1cter de symbols a una min\u00fascula 'a'. >>> symbols[0] = 'a' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'str' object does not support item assignment >>>","title":"Ejercicio 1.13: Extracci\u00f3n de caracteres individuales y subcadenas"},{"location":"intro_python/#ejercicio-114-concatenacion-de-caracteres","text":"Although string data is read-only, you can always reassign a variable to a newly created string. Try the following statement which concatenates a new symbol \"GOOG\" to the end of symbols : >>> symbols = symbols + 'GOOG' >>> symbols 'AAPL,IBM,MSFT,YHOO,SCOGOOG' >>> \u00a1Ups! Eso no es lo que quer\u00edas. Corr\u00edjelo para que la variable symbols contenga el valor 'AAPL, IBM, MSFT, YHOO, SCO, GOOG' . >>> symbols = ? >>> symbols 'AAPL,IBM,MSFT,YHOO,SCO,GOOG' >>> Agregue 'HPQ' al frente de la cuerda >>> symbols = ? >>> symbols 'HPQ,AAPL,IBM,MSFT,YHOO,SCO,GOOG' >>> En estos ejemplos, puede parecer que la cadena original est\u00e1 siendo modificado, en una aparente violaci\u00f3n de que las cadenas sean de solo lectura. No entonces. Las operaciones en cadenas crean una cadena completamente nueva cada una hora. Cuando se reasigna el nombre de la variable s\u00edmbolos , apunta al cadena reci\u00e9n creada. Posteriormente, la cuerda vieja se destruye ya que ya no se usa.","title":"Ejercicio 1.14: Concatenaci\u00f3n de caracteres"},{"location":"intro_python/#ejercicio-115-pruebas-de-membresia","text":"Experimente con el operador \"in\" para buscar subcadenas. En el mensaje interactivo, pruebe estas operaciones: >>> 'IBM' in symbols ? >>> 'AA' in symbols True >>> 'CAT' in symbols ? >>> \u00bfPor qu\u00e9 la comprobaci\u00f3n de 'AA' devolvi\u00f3 True ?","title":"Ejercicio 1.15: Pruebas de membres\u00eda"},{"location":"intro_python/#ejercicio-116-metodos-de-cadenas","text":"En el indicador interactivo de Python, intente experimentar con algunos de los m\u00e9todos de cadena. >>> symbols.lower() ? >>> symbols ? >>> Recuerde, las cadenas siempre son de solo lectura. Si desea guardar el resultado de una operaci\u00f3n, debe colocarlo en una variable: >>> lowersyms = symbols.lower() >>> Pruebe algunas operaciones m\u00e1s: >>> symbols.find('MSFT') ? >>> symbols[13:17] ? >>> symbols = symbols.replace('SCO','DOA') >>> symbols ? >>> name = ' IBM \\n' >>> name = name.strip() # Remove surrounding whitespace >>> name ? >>>","title":"Ejercicio 1.16: M\u00e9todos de cadenas"},{"location":"intro_python/#ejercicio-117-f-strings","text":"A veces desea crear una cadena e incrustar los valores de variables en \u00e9l. Para hacer eso, use una f-string. Por ejemplo: >>> nombre = 'IBM' >>> acciones = 100 >>> precio = 91.1 >>> f'{acciones} acciones de {nombre} a ${precio:0.2f}' '100 acciones de IBM a $91.10' >>> Modifique el programa de hipoteca Dave mortgage.py del Ejercicio 1.10 para crear su salida usando f-strings. Intente hacer que la salida est\u00e9 bien alineada.","title":"Ejercicio 1.17: f-strings"},{"location":"intro_python/#ejercicio-118-expresiones-regulares","text":"Una limitaci\u00f3n de las operaciones b\u00e1sicas con cadenas es que no admite cualquier tipo de coincidencia de patrones avanzada. Por eso tu Necesito recurrir al m\u00f3dulo re y las expresiones regulares de Python. El manejo de expresiones regulares es un gran tema, pero aqu\u00ed hay un breve ejemplo: >>> text = 'Today is 3/27/2018. Tomorrow is 3/28/2018.' >>> # Find all occurrences of a date >>> import re >>> re.findall(r'\\d+/\\d+/\\d+', text) ['3/27/2018', '3/28/2018'] >>> # Replace all occurrences of a date with replacement text >>> re.sub(r'(\\d+)/(\\d+)/(\\d+)', r'\\3-\\1-\\2', text) 'Today is 2018-3-27. Tomorrow is 2018-3-28.' >>> Para obtener m\u00e1s informaci\u00f3n sobre el m\u00f3dulo re , consulte la documentaci\u00f3n oficial en https://docs.python.org/library/re.html .","title":"Ejercicio 1.18: Expresiones regulares"},{"location":"intro_python/#algunos-comentarios","text":"A medida que comienza a experimentar con el int\u00e9rprete, a menudo desea conocer m\u00e1s sobre las operaciones soportadas por diferentes objetos. Por ejemplo, \u00bfc\u00f3mo averigua qu\u00e9 operaciones est\u00e1n disponibles en un cadena? Dependiendo de su entorno de Python, es posible que pueda ver una lista de los m\u00e9todos disponibles mediante el completado con tabulaci\u00f3n. Por ejemplo, intente escribir esta: >>> s = 'hello world' >>> s.<tab key> >>> Si presionar tab no hace nada, puede volver al funci\u00f3n incorporada dir () . Por ejemplo: >>> s = 'hello' >>> dir(s) ['__add__', '__class__', '__contains__', ..., 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'] >>> dir () produce una lista de todas las operaciones que pueden aparecer despu\u00e9s de (.) . Utilice el comando help () para obtener m\u00e1s informaci\u00f3n sobre una operaci\u00f3n espec\u00edfica: >>> help(s.upper) Help on built-in function upper: upper(...) S.upper() -> string Return a copy of the string S converted to uppercase. >>>","title":"Algunos comentarios"},{"location":"intro_python/#15-listas","text":"Esta secci\u00f3n presenta listas, el tipo principal de Python para contener una colecci\u00f3n ordenada de valores.","title":"1.5 Listas"},{"location":"intro_python/#151-creando-una-lista","text":"Utilice corchetes para definir un literal de lista: nombres = [ 'Elwood', 'Jake', 'Curtis' ] numeros = [39, 38, 42, 65, 111] En ocasiones las listas son creadas por otros metodos. Por ejemplo, una cadena puede ser dividida haciendo uso del m\u00e9todo split() . >>> linea = 'GOOG,100,490.10' >>> fila = line.split(',') >>> fila ['GOOG', '100', '490.10'] >>>","title":"1.5.1: Creando una lista"},{"location":"intro_python/#152-operaciones-de-lista","text":"Las listas pueden contener elementos de cualquier tipo. Agregue un nuevo elemento usando append() : nombres.append('Murphy') # Agrega al final nombres.insert(2, 'Aretha') # Inserta en el medio Use + para concatenar listas: s = [1, 2, 3] t = ['a', 'b'] s + t # [1, 2, 3, 'a', 'b'] Las listas est\u00e1n indexadas por n\u00fameros enteros. A partir de 0. nombres = [ 'Elwood', 'Jake', 'Curtis' ] nombres[0] # 'Elwood' nombres[1] # 'Jake' nombres[2] # 'Curtis' Los \u00edndices negativos cuentan desde el final. nombres[-1] # 'Curtis' Puede cambiar cualquier elemento de una lista. nombres[1] = 'Joliet Jake' nombres # [ 'Elwood', 'Joliet Jake', 'Curtis' ] Length of the list. nombres = ['Elwood','Jake','Curtis'] len(nombres) # 3 Prueba de pertenencia ( in , not in ) 'Elwood' in nombres # True 'Britney' not in nombres # True Replicaci\u00f3n ( s * n ). s = [1, 2, 3] s * 3 # [1, 2, 3, 1, 2, 3, 1, 2, 3]","title":"1.5.2: Operaciones de lista"},{"location":"intro_python/#153-iteracion-de-lista-y-busqueda","text":"Utilice for para iterar sobre el contenido de la lista. for nombre in nombres: # use nombre # e.g. print(nombre) ... Esto es similar a una declaraci\u00f3n foreach de otros lenguajes de programaci\u00f3n. Para encontrar la posici\u00f3n de algo r\u00e1pidamente, use index() . nombres = ['Elwood','Jake','Curtis'] nombres.index('Curtis') # 2 Si el elemento est\u00e1 presente m\u00e1s de una vez, index() devolver\u00e1 el \u00edndice de la primera aparici\u00f3n. Si el elemento no se encuentra, generar\u00e1 una excepci\u00f3n \"ValueError\".","title":"1.5.3: Iteracion de lista y b\u00fasqueda"},{"location":"intro_python/#154-remocion-en-lista","text":"Puede eliminar elementos por valor de elemento o por \u00edndice: # Using the value nombres.remove('Curtis') # Using the index del nombres[1] Eliminar un art\u00edculo no crea un agujero. Otros elementos se mover\u00e1n hacia abajo para llenar el espacio desocupado. Si hay m\u00e1s de una aparici\u00f3n del elemento, remove() eliminar\u00e1 solo la primera aparici\u00f3n.","title":"1.5.4: Remoci\u00f3n en lista"},{"location":"intro_python/#155-ordenar-una-lista","text":"Las listas se pueden ordenar \"in situ\". s = [10, 1, 7, 3] s.sort() # [1, 3, 7, 10] # Reverse order s = [10, 1, 7, 3] s.sort(reverse=True) # [10, 7, 3, 1] # It works with any ordered data s = ['foo', 'bar', 'spam'] s.sort() # ['bar', 'foo', 'spam'] Utilice sorted() si desea crear una nueva lista en su lugar: t = sorted(s) # s sin cambios, t tiene los valores ordenados","title":"1.5.5: Ordenar una lista"},{"location":"intro_python/#156-listas-y-matematicas","text":"Caution: Lists were not designed for math operations. >>> nombres = [1, 2, 3, 4, 5] >>> nombres * 2 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5] >>> nombres + [10, 11, 12, 13, 14] [1, 2, 3, 4, 5, 10, 11, 12, 13, 14] Espec\u00edficamente, las listas no representan vectores/matrices como en MATLAB, Octave, R, etc. Sin embargo, existen algunos m\u00f3dulos/paquetes/librer\u00edas que le ayudan con eso (e.g. numpy )","title":"1.5.6: Listas y matem\u00e1ticas"},{"location":"intro_python/#157-ejercicios","text":"En este ejercicio, experimentaremos con listas. En la ultima secci\u00f3n trabajamos con cadenas conteniendo s\u00edmbolos de acciones de bolsa valores. >>> symbols = 'HPQ,AAPL,IBM,MSFT,YHOO,DOA,GOOG' Divida la cadena en una lista de nombres haciendo uso de la operacion split() de cadenas: >>> symlist = symbols.split(',')","title":"1.5.7: Ejercicios"},{"location":"intro_python/#119-extraccion-y-reasignacion-de-elementos","text":"Pruebe algunas busquedas: >>> symlist[0] 'HPQ' >>> symlist[1] 'AAPL' >>> symlist[-1] 'GOOG' >>> symlist[-2] 'DOA' >>> Intente reasignar un valor: \u200b```python >>> symlist[2] = 'AIG' >>> symlist ['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'DOA', 'GOOG'] >>> Agarre unos pedazos: \u200b```python >>> symlist[0:3] ['HPQ', 'AAPL', 'AIG'] >>> symlist[-2:] ['DOA', 'GOOG'] >>> Crea una lista vac\u00eda y agregue un elemento. \u200b```python >>> mysyms = [] >>> mysyms.append('GOOG') >>> mysyms ['GOOG'] Puede reasignar una porci\u00f3n de la lista a otra lista. Por ejemplo: >>> symlist[-2:] = mysyms >>> symlist ['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG'] >>> Cuando hace esto, la lista en el lado izquierdo ( symlist ) ser\u00e1 reajustada apropiadamente para que el lado derecho ( mysyms ) ocupe un puesto en ella.","title":"1.19: Extracci\u00f3n y reasignaci\u00f3n de elementos"},{"location":"intro_python/#120-ciclando-sobre-una-lista","text":"El ciclo/bucle for funciona ciclando sobre data en una secuencia la lista. Pruebe lo siguiente: >>> for s in symlist: ... print('s =', s)","title":"1.20: Ciclando sobre una lista"},{"location":"intro_python/#121-pruebas-de-pertenencia","text":"Utilice el operador in o not in para comprobar si 'AIG' , 'AA' y 'CAT' est\u00e1n en la lista de s\u00edmbolos. >>> # Est\u00e1 'AIG' en `symlist`? True >>> # Est\u00e1 'AA' en `symlist`? False >>> # 'CAT' no esta en `symlist`? True >>>","title":"1.21: Pruebas de pertenencia"},{"location":"intro_python/#122-anadiendo-insertando-y-borrando-elementos","text":"Utilice el m\u00e9todo append() para agregar el s\u00edmbolo 'RHT' al final de symlist . >>> # agregue 'RHT' >>> symlist ['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG', 'RHT'] >>> Utilice el m\u00e9todo insert() para insertar el s\u00edmbolo 'AA' como el segundo elemento de la lista. >>> # Agregue 'AA' como segundo item en la lista >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG', 'RHT'] >>> Utilice el m\u00e9todo remove() para eliminar 'MSFT' de la lista. >>> # Remueva 'MSFT' >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'YHOO', 'GOOG', 'RHT'] >>> A\u00f1ada una entrada duplicada para ` YHOO' al final de la lista. Nota: est\u00e1 perfectamente bien si una lista tenga valores duplicados. >>> # Append 'YHOO' >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'YHOO', 'GOOG', 'RHT', 'YHOO'] >>> Utilice el m\u00e9todo index() para encontrar la primera posici\u00f3n de 'YHOO' en la lista. >>> # Encuentre el primer \u00edndice de 'YHOO' 4 >>> symlist[4] 'YHOO' >>> Cuente cu\u00e1ntas veces 'YHOO' est\u00e1 en la lista: >>> symlist.count('YHOO') 2 >>> Remueva la primera ocurrencia de 'YHOO' . >>> # Remueva primera ocurrencia de 'YHOO' >>> symlist ['HPQ', 'AA', 'AAPL', 'AIG', 'GOOG', 'RHT', 'YHOO'] >>> Para su informaci\u00f3n, no existe ning\u00fan m\u00e9todo para buscar o eliminar todas las apariciones de un elemento Sin embargo, veremos una forma elegante de hacer esto en la secci\u00f3n 2.","title":"1.22: A\u00f1adiendo, insertando y borrando elementos"},{"location":"intro_python/#123-ordernando","text":"\u00bfQuieres ordenar una lista? Utilice el m\u00e9todo sort() . Pru\u00e9balo: >>> symlist.sort() >>> symlist ['AA', 'AAPL', 'AIG', 'GOOG', 'HPQ', 'RHT', 'YHOO'] >>> \u00bfQuiere ordenar al rev\u00e9s? Prueba esto: >>> symlist.sort(reverse=True) >>> symlist ['YHOO', 'RHT', 'HPQ', 'GOOG', 'AIG', 'AAPL', 'AA'] >>> Note: Sorting a list modifies its contents 'in-place'. That is, the elements of the list are shuffled around, but no new list is created as a result.","title":"1.23: Ordernando"},{"location":"intro_python/#124-ajuntando-todo-nuevamente","text":"\u00bfQuiere tomar una lista de cadenas y unirlas en una sola cadena? Utilice el m\u00e9todo join () de cadenas como esta (nota: esto se ve gracioso al principio). >>> a = ','.join(symlist) >>> a 'YHOO,RHT,HPQ,GOOG,AIG,AAPL,AA' >>> b = ':'.join(symlist) >>> b 'YHOO:RHT:HPQ:GOOG:AIG:AAPL:AA' >>> c = ''.join(symlist) >>> c 'YHOORHTHPQGOOGAIGAAPLAA' >>>","title":"1.24: Ajuntando todo nuevamente"},{"location":"intro_python/#125-listas-de-cualquier-cosa","text":"Las listas pueden contener cualquier tipo de objeto, incluidas otras listas (por ejemplo, listas anidadas). Probar esto: >>> nums = [101, 102, 103] >>> items = ['spam', symlist, nums] >>> items ['spam', ['YHOO', 'RHT', 'HPQ', 'GOOG', 'AIG', 'AAPL', 'AA'], [101, 102, 103]] Preste mucha atenci\u00f3n a la salida anterior. items es una lista con tres elementos. El primer elemento es una cadena, pero los otros dos elementos son listas. Puede acceder a los elementos de las listas anidadas mediante varias operaciones de indexaci\u00f3n. >>> items[0] 'spam' >>> items[0][0] 's' >>> items[1] ['YHOO', 'RHT', 'HPQ', 'GOOG', 'AIG', 'AAPL', 'AA'] >>> items[1][1] 'RHT' >>> items[1][1][2] 'T' >>> items[2] [101, 102, 103] >>> items[2][1] 102 >>> Aunque t\u00e9cnicamente es posible hacer estructuras muy complicadas compuestas por listas, como regla general, es preferible mantener las cosas simples. Por lo general, las listas contienen elementos que tienen el mismo tipo de valor. Por ejemplo, una lista que consta completamente de n\u00fameros o una lista de texto de cadena. Mezclar diferentes tipos de datos en la misma lista es a menudo un buen dolor de cabeza, por lo que es mejor evitarlo.","title":"1.25: Listas de cualquier cosa"},{"location":"intro_python/#16-archivos","text":"La mayor\u00eda de los programas necesitan leer la entrada de alg\u00fan lugar. Esta secci\u00f3n discute sobre el acceso a archivos.","title":"1.6 Archivos"},{"location":"intro_python/#161-io-de-un-archivo-entrada-salida","text":"Abre un archivo. f = open('foo.txt', 'rt') # Open for reading (text) g = open('bar.txt', 'wt') # Open for writing (text) Lee toda la data. data = f.read() data = f.read([maxbytes]) # Read only up to 'maxbytes' bytes Escribe algo de texto. g.write('some text') Cierra cuando terminas. f.close() g.close() Files should be properly closed and it's an easy step to forget. Thus, the preferred approach is to use the with statement like this. with open(filename, 'rt') as file: # Haz uso del archivo \"file\" ... # No hay necesidad de cerrar expl\u00edcitamente ...statements Esto cierra autom\u00e1ticamente el archivo cuando el control abandona el bloque de c\u00f3digo con sangr\u00eda.","title":"1.6.1: I/O de un Archivo (entrada / salida)"},{"location":"intro_python/#162-patrones-comunes-de-lectura-de-archivos","text":"Leer un archivo completo de una vez como una cadena. with open('foo.txt', 'rt') as file: data = file.read() # `data` is a string with all the text in `foo.txt` Leer un archivo l\u00ednea por l\u00ednea iterando. with open(filename, 'rt') as file: for line in file: # Process the line","title":"1.6.2: Patrones comunes de lectura de archivos"},{"location":"intro_python/#163-patrones-comunes-de-escritura-de-archivos","text":"Escribe data en cadena. with open('outfile', 'wt') as out: out.write('Hello World\\n') ... Redireccionando la funci\u00f3n de impresi\u00f3n. with open('outfile', 'wt') as out: print('Hola Mundo', file=out) ...","title":"1.6.3: Patrones comunes de escritura de archivos"},{"location":"intro_python/#164-ejercicios","text":"Estos ejercicios dependen de un archivo Data/portfolio.csv . El archivo contiene una lista de l\u00edneas con informaci\u00f3n sobre una cartera de acciones. Se supone que est\u00e1 trabajando en el archivo practice-python/Work/ directorio. Si no est\u00e1 seguro, puede averiguar d\u00f3nde Python se est\u00e1 ejecutando haciendo esto: >>> import os >>> os.getcwd() '/Users/beazley/Desktop/practical-python/Work' # Su salida ser\u00e1 diferente >>>","title":"1.6.4: Ejercicios"},{"location":"intro_python/#126-prerequisitos","text":"Primero, intente leer todo el archivo a la vez en una cadena grande: >>> with open('Data/portfolio.csv', 'rt') as f: data = f.read() >>> data 'name,shares,price\\n\"AA\",100,32.20\\n\"IBM\",50,91.10\\n\"CAT\",150,83.44\\n\"MSFT\",200,51.23\\n\"GE\",95,40.37\\n\"MSFT\",50,65.10\\n\"IBM\",100,70.44\\n' >>> print(data) name,shares,price \"AA\",100,32.20 \"IBM\",50,91.10 \"CAT\",150,83.44 \"MSFT\",200,51.23 \"GE\",95,40.37 \"MSFT\",50,65.10 \"IBM\",100,70.44 >>> En el ejemplo anterior, cabe se\u00f1alar que Python tiene dos modos de salida. En el primer modo, donde aparece \">>> data\" en el indicador, Python muestra la representaci\u00f3n de la cadena sin procesar, incluidas las comillas y c\u00f3digos de escape. Cuando escribe print(data) , obtiene el formato real de salida de la cadena. Para leer un archivo l\u00ednea por l\u00ednea, use un bucle for como \u00e9ste: >>> with open('Data/portfolio.csv', 'rt') as f: for line in f: print(line, end='') name,shares,price \"AA\",100,32.20 \"IBM\",50,91.10 ... >>> En determinadas ocasiones, es posible que desee leer u omitir manualmente una \u00fanica l\u00ednea de texto (por ejemplo, tal vez desee omitir la primera l\u00ednea de los encabezados de columna). >>> f = open('Data/portfolio.csv', 'rt') >>> headers = next(f) >>> headers 'name,shares,price\\n' >>> for line in f: print(line, end='') \"AA\",100,32.20 \"IBM\",50,91.10 ... >>> f.close() >>> next() devuelve la siguiente l\u00ednea de texto en el archivo. Si lo llamara repetidamente, obtendr\u00eda l\u00edneas sucesivas. Sin embargo, para que lo sepa, el ciclo for hace uso de next() para obtener sus datos. Por lo tanto, normalmente no lo llamar\u00eda directamente a menos que est\u00e9 tratando de omitir o leer expl\u00edcitamente una sola l\u00ednea como se muestra. Una vez que est\u00e9 leyendo las l\u00edneas de un archivo, puede comenzar a realizar m\u00e1s procesamiento, como dividir. Por ejemplo, intente esto: >>> f = open('Data/portfolio.csv', 'rt') >>> headers = next(f).split(',') >>> headers ['name', 'shares', 'price\\n'] >>> for line in f: row = line.split(',') print(row) ['\"AA\"', '100', '32.20\\n'] ['\"IBM\"', '50', '91.10\\n'] ... >>> f.close() Nota: En estos ejemplos, f.close() se llama expl\u00edcitamente porque no se utiliza la instrucci\u00f3n with .","title":"1.26: Prerequisitos"},{"location":"intro_python/#127-leyendo-de-un-archivo","text":"Ahora que sabe c\u00f3mo leer un archivo, escribamos un programa para realizar un c\u00e1lculo. Las columnas de portfolio.csv corresponden al nombre de la acci\u00f3n, n\u00famero de acciones, y precio de compra de una sola participaci\u00f3n accionaria. Escribe un programa llamado pcost.py que abre este archivo, lee todas las l\u00edneas y calcula cu\u00e1nto cost\u00f3 comprar todas las acciones en la cartera (portfolio). Sugerencia: para convertir una cadena en un entero, use int(s) . Para convertir una cadena en punto flotante, use float(s) . Su programa deber\u00eda imprimir un resultado como el siguiente: Costo total 44671.15","title":"1.27: Leyendo de un archivo"},{"location":"intro_python/#128-otro-tipo-de-archivos","text":"\u00bfY si quisiera leer un archivo que no es de texto, como un archivo comprimido gzip? La funci\u00f3n integrada open() no le ayudar\u00e1 aqu\u00ed, pero Python tiene un m\u00f3dulo gzip que puede leer archivos comprimidos gzip. >>> import gzip >>> with gzip.open('Data/portfolio.csv.gz', 'rt') as f: for line in f: print(line, end='') ... mira la salida ... >>> Nota: Incluir el modo de archivo de 'rt' es fundamental aqu\u00ed. Si olvidas eso obtendr\u00e1 cadenas de bytes en lugar de cadenas de texto normales.","title":"1.28: Otro tipo de \"archivos\""},{"location":"intro_python/#algunos-comentarios_1","text":"Los cient\u00edficos de datos se apresuran a se\u00f1alar que librerias como Pandas ya tienen una funci\u00f3n para leer archivos CSV. Esto es cierto y funciona bastante bien. Sin embargo, este no es un curso sobre c\u00f3mo aprender pandas. Leer archivos es un problema m\u00e1s general que las espec\u00edficaciones de archivos CSV. La raz\u00f3n principal por la que trabajamos con un archivo CSV es porque es un formato conocido para la mayor\u00eda de los programadores y es relativamente f\u00e1cil trabajarlo directamente - ilustrando muchas caracter\u00edsticas de Python en el proceso. Entonces, por supuesto, use Pandas cuando regrese al trabajo. Para el resto de este curso, sin embargo, vamos a seguir con la funcionalidad est\u00e1ndar de Python.","title":"Algunos comentarios"},{"location":"intro_python/#17-funciones","text":"A medida que sus programas comiencen a crecer, va a querer organizarse. Esta secci\u00f3n presenta brevemente las funciones y los m\u00f3dulos de la biblioteca est\u00e1ndar. Tambi\u00e9n se introduce el manejo de errores con excepciones.","title":"1.7 Funciones"},{"location":"intro_python/#171-funciones-personalizadas","text":"Utilice funciones para el c\u00f3digo que desea reutilizar. Aqu\u00ed hay una definici\u00f3n de funci\u00f3n: def sumcount(n): ''' Retorna la suma de los primeros n enteros ''' total = 0 while n > 0: total += n n -= 1 return total Para llamar una funci\u00f3n. a = sumcount(100) Una funci\u00f3n es una serie de declaraciones que realizan alguna tarea y devuelven un resultado. La palabra clave return es necesaria para especificar expl\u00edcitamente el valor de retorno de la funci\u00f3n.","title":"1.7.1: Funciones personalizadas"},{"location":"intro_python/#172-funciones-de-biblioteca","text":"Python viene con una gran biblioteca est\u00e1ndar. Se accede a los m\u00f3dulos de la biblioteca usando import . Por ejemplo: import math x = math.sqrt(10) import urllib.request u = urllib.request.urlopen('http://www.python.org/') data = u.read() Cubriremos bibliotecas y m\u00f3dulos con m\u00e1s detalle m\u00e1s adelante.","title":"1.7.2: Funciones de biblioteca"},{"location":"intro_python/#173-errores-y-excepciones","text":"Las funciones informan sobre errores como las excepciones. Una excepci\u00f3n provoca la interrupci\u00f3n de una funci\u00f3n y puede hacer que todo el programa se detenga si no se maneja. Prueba esto en tu REPL (read/lee, evaluate/evalua, print/imprime, cicla/loop) de Python. >>> int('N/A') Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ValueError: invalid literal for int() with base 10: 'N/A' >>> Para fines de depuraci\u00f3n, el mensaje describe lo que sucedi\u00f3, d\u00f3nde ocurri\u00f3 el error, y un rastreo que muestra las otras llamadas a funciones que provocaron la falla.","title":"1.7.3: Errores y excepciones"},{"location":"intro_python/#174-atrapando-y-gestionando-excepciones","text":"Las excepciones de pueden atrapar y gestionar. Para atrapar, use la declaraci\u00f3n try - except . for linea in f: campos = linea.split() try: acciones = int(campos[1]) except ValueError: print(\"No se pudo analizar\", linea) ... El nombre \"ValueError\" debe coincidir con el tipo de error que est\u00e1 intentando detectar. A menudo es dif\u00edcil saber exactamente qu\u00e9 tipo de errores pueden ocurrir de antemano dependiendo de la operaci\u00f3n que se est\u00e9 realizando. Para mejor o para peor, el manejo de excepciones a menudo se agrega despu\u00e9s de que un programa fall\u00f3 inesperadamente (es decir, \"oh, nos olvidamos de detectar ese error, deber\u00eda gestionar eso! \").","title":"1.7.4: Atrapando y gestionando excepciones"},{"location":"intro_python/#175-generando-excepciones","text":"Para generar una excepci\u00f3n, use la instrucci\u00f3n raise . raise RuntimeError('Que desorden') Esto har\u00e1 que el programa se anule con un rastreo de excepci\u00f3n. A menos que sea atrapado por un bloque \"try-except\". $ python3 foo.py Traceback (most recent call last): File \"foo.py\", line 21, in <module> raise RuntimeError(\"Que desorden\") RuntimeError: What a kerfuffle","title":"1.7.5: Generando excepciones"},{"location":"intro_python/#176-ejercicios","text":"","title":"1.7.6: Ejercicios"},{"location":"intro_python/#129-definiendo-una-funcion","text":"Intente definir una funci\u00f3n simple: >>> def saludo(nombre): 'Genera un saludo' print('Hola', nombre) >>> greeting('Guido') Hola Guido >>> greeting('Paula') Hola Paula >>> Si la primera declaraci\u00f3n de una funci\u00f3n es una cadena, sirve como documentaci\u00f3n. Intente escribir un comando como help(saludo) para que se muestre.","title":"1.29: Definiendo una funci\u00f3n"},{"location":"intro_python/#130-convirtiendo-una-secuencia-de-comandos-en-una-funcion","text":"Tome el c\u00f3digo que escribi\u00f3 para el programa pcost.py en [Ejercicio 1.27] (06_Files.md) y convi\u00e9rtalo en una funci\u00f3n cartera_costo(nombre_de_archivo) . La funci\u00f3n toma un nombre de archivo como entrada, lee los datos de la cartera en ese archivo y devuelve el costo total de la cartera como flotante. Para usar su funci\u00f3n, cambie su programa para que se vea algo as\u00ed: def cartera_costo(nombre_de_archivo): ... # Su c\u00f3digo aqu\u00ed ... costo = cartera_costo('Data/portfolio.csv') print('Total cost:', costo) Cuando ejecute su programa, deber\u00eda ver el mismo resultado que antes. Despu\u00e9s de ejecutar su programa, tambi\u00e9n puede llamar a su funci\u00f3n interactivamente escribiendo esto: $ python3 -i pcost.py Esto le permitir\u00e1 llamar a su funci\u00f3n desde el modo interactivo. >>> cartera_costo('Data/portfolio.csv') 44671.15 >>> Being able to experiment with your code interactively is useful for testing and debugging.","title":"1.30: Convirtiendo una secuencia de comandos en una funci\u00f3n"},{"location":"intro_python/#131-administracion-de-errores","text":"\u00bfQu\u00e9 sucede si prueba su funci\u00f3n en un archivo al que le faltan algunos campos? >>> cartera_costo('Data/missing.csv') Traceback (most recent call last): File \"<stdin>\", line 1, in <module> File \"pcost.py\", line 11, in cartera_costo nshares = int(fields[1]) ValueError: invalid literal for int() with base 10: '' >>> En este momento, tiene que tomar una decisi\u00f3n. Para que el programa funcione puede depurar el archivo de entrada eliminando las l\u00edneas o puede modificar su c\u00f3digo para manejar las l\u00edneas defectuosas de alguna forma. Modifique el programa pcost.py para detectar la excepci\u00f3n, imprima una advertencia mensaje y contin\u00fae procesando el resto del archivo.","title":"1.31: Administraci\u00f3n de errores"},{"location":"intro_python/#132-usando-una-funcion-de-biblioteca-local","text":"Python viene con una biblioteca est\u00e1ndar de funciones \u00fatiles. Una biblioteca que podr\u00eda ser \u00fatil aqu\u00ed es el m\u00f3dulo csv . Debe usarlo siempre que tenga que trabajar con archivos de datos CSV. A continuaci\u00f3n, se muestra un ejemplo de c\u00f3mo funciona: >>> import csv >>> f = open('Data/portfolio.csv') >>> rows = csv.reader(f) >>> headers = next(rows) >>> headers ['name', 'shares', 'price'] >>> for row in rows: print(row) ['AA', '100', '32.20'] ['IBM', '50', '91.10'] ['CAT', '150', '83.44'] ['MSFT', '200', '51.23'] ['GE', '95', '40.37'] ['MSFT', '50', '65.10'] ['IBM', '100', '70.44'] >>> f.close() >>> Una cosa buena sobre el m\u00f3dulo csv es que se ocupa de una variedad de detalles de bajo nivel como las comillas y la divisi\u00f3n adecuada por comas. En la salida anterior, notar\u00e1 que ha eliminado las comillas dobles lejos de los nombres en la primera columna. Modifique su programa pcost.py para que use el m\u00f3dulo csv para analizar e intentar ejecutar ejemplos anteriores.","title":"1.32: Usando una funci\u00f3n de biblioteca local"},{"location":"intro_python/#133-leyendo-desde-la-linea-de-comando","text":"En el programa pcost.py , el nombre del archivo de entrada se ha integrado en el c\u00f3digo: # pcost.py def cartera_costo(filename): ... # Su c\u00f3digo aqu\u00ed ... costo = cartera_costo('Data/portfolio.csv') print('Total costo:', costo) Est\u00e1 bien para aprender y probar, pero en un programa real probablemente no har\u00eda eso. En su lugar, pudiera pasar el nombre del archivo como argumento a un archivo con una secuencia de comandos. Intente cambiar la parte inferior del programa de la siguiente manera: # pcost.py import sys def cartera_costo(filename): ... # Su c\u00f3digo aqu\u00ed ... if len(sys.argv) == 2: filename = sys.argv[1] else: filename = 'Data/portfolio.csv' costo = cartera_costo(filename) print('Total costo:', costo) sys.argv es una lista que contiene argumentos pasados en la l\u00ednea de comando (si los hay). Para ejecutar su programa, deber\u00e1 ejecutar Python desde la terminal. Por ejemplo, desde bash en Unix: bash % python3 pcost.py Data/portfolio.csv Total cost: 44671.15 bash %","title":"1.33: Leyendo desde la l\u00ednea de comando"},{"location":"org_programa/","text":"Organizaci\u00f3n de un Programa","title":"3 Organizaci\u00f3n de un Programa"},{"location":"org_programa/#organizacion-de-un-programa","text":"","title":"Organizaci\u00f3n de un Programa"},{"location":"paquetes/","text":"Paquetes","title":"9 Paquetes"},{"location":"paquetes/#paquetes","text":"","title":"Paquetes"},{"location":"prueba_y_depuracion/","text":"Prueba y Depuraci\u00f3n","title":"8 Prueba y Depuraci\u00f3n"},{"location":"prueba_y_depuracion/#prueba-y-depuracion","text":"","title":"Prueba y Depuraci\u00f3n"},{"location":"temario/","text":"Temario Introducci\u00f3n a Python El objetivo de este cap\u00edtulo es introducir las bases de Python. Iniciaremos desde cero y aprenderemos a editar, ejecutar, y depurar programas. Adem\u00e1s, escribiremos una secuencia de comandos que lee data en un archivo CSV y ejecuta un c\u00e1lculo. Trabajando con data Conoceremos las estructuras de datos de fundamental importancia en Python: tuples, lists, sets y dictionaries. Presentaremos algunos patrones comunes para el manejo de datos y discutiremos el modelo de objetos en Python. Organizaci\u00f3n de un programa En esta modulo nos empapamos de m\u00e1s detalles sobre la composici\u00f3n de funciones, el manejo de errores y la introducci\u00f3n de modulos. Al final seremos capaces de escribir programas que son subdivididos en funciones esparcidas en varios archivos. Veremos algunas plantillas de c\u00f3digo que les ser\u00e1 \u00fatil para la creaci\u00f3n de programas. Clases y Objetos Introduciremos el concepto de clases y objetos. Aprenderemos sobre la declaraci\u00f3n class que nos permite crear nuevos objetos. Tambi\u00e9n introcimos el concepto de inherencia, unaherramienta que es comunmente utilizada para construir programar extensibles. Finalmente, veremos otras caracter\u00edsticas de clases como los m\u00e9todos especiales, b\u00fasqueda dinamica de atributos, y la definici\u00f3n de nuevas excepciones. Las entra\u00f1as del objeto en Python En esta secci\u00f3n aprenderemos sobre el funcionamiento interno de los objetos en Python. Algunos programadores con experiencia en otros lenguajes de programaci\u00f3n a menudo encuentran que la noci\u00f3n de clases en Python carece de ciertas caracter\u00edsticas. Por ejemplo, no existe la noci\u00f3n de control de accesso (e.g. privado, protegido), el argumento self lo encuentran extra\u00f1o, y trabajar con objetos se siente como una actividad con mucho libertinaje. Conoceremos como todo funciona y algunos patrones comunes para la encapsulaci\u00f3n interna de objetos. Generadores La iteraci\u00f3n es uno de los m\u00e1s comunes patrones de programaci\u00f3n en Python. Los programas hacen mucha iteraci\u00f3n para procesar listas, leer archivos, consultar una base de datos, y m\u00e1s. Una de las caracter\u00edsticas mas poderosas de Python es la habilidad de costumizar y redefinir la iteraci\u00f3n en una funci\u00f3n generadora. Al final de la secci\u00f3n, escribiremos algunos programas que procesan datos en tiempo real en una manera interesante. Temas avanzados En esta secci\u00f3n, veremos una peque\u00f1a colecci\u00f3n de algunas caracter\u00edsticas avanzadas de Python que posiblemente encontremos en nuestra programaci\u00f3n cotidiana. Los temas en esta secci\u00f3n son s\u00f3lo una introducci\u00f3n a estas ideas. Prueba y Depuraci\u00f3n Esta secci\u00f3n introduce unos tem\u00e1s b\u00e1sicas en relaci\u00f3n a pruebas, reporter\u00eda y depuraci\u00f3n. Paquetes Concluiremos el curso con algunos detalles para la organizaci\u00f3n de c\u00f3digo en paquetes. Adem\u00e1s, discutiremos sobre la instalaci\u00f3n de paquetes de terceros y sobre la preparaci\u00f3n necesaria para entregarle nuestro c\u00f3digo a otros. El tema de empaquetamiento de c\u00f3digo essta en constante evoluci\u00f3n y es una parte compleja en el desarrollo de Python. Por tanto, esta secci\u00f3n esta enfocada en compartir algunos principios de organizaci\u00f3n general de c\u00f3digo.","title":"Temario"},{"location":"temario/#temario","text":"Introducci\u00f3n a Python El objetivo de este cap\u00edtulo es introducir las bases de Python. Iniciaremos desde cero y aprenderemos a editar, ejecutar, y depurar programas. Adem\u00e1s, escribiremos una secuencia de comandos que lee data en un archivo CSV y ejecuta un c\u00e1lculo. Trabajando con data Conoceremos las estructuras de datos de fundamental importancia en Python: tuples, lists, sets y dictionaries. Presentaremos algunos patrones comunes para el manejo de datos y discutiremos el modelo de objetos en Python. Organizaci\u00f3n de un programa En esta modulo nos empapamos de m\u00e1s detalles sobre la composici\u00f3n de funciones, el manejo de errores y la introducci\u00f3n de modulos. Al final seremos capaces de escribir programas que son subdivididos en funciones esparcidas en varios archivos. Veremos algunas plantillas de c\u00f3digo que les ser\u00e1 \u00fatil para la creaci\u00f3n de programas. Clases y Objetos Introduciremos el concepto de clases y objetos. Aprenderemos sobre la declaraci\u00f3n class que nos permite crear nuevos objetos. Tambi\u00e9n introcimos el concepto de inherencia, unaherramienta que es comunmente utilizada para construir programar extensibles. Finalmente, veremos otras caracter\u00edsticas de clases como los m\u00e9todos especiales, b\u00fasqueda dinamica de atributos, y la definici\u00f3n de nuevas excepciones. Las entra\u00f1as del objeto en Python En esta secci\u00f3n aprenderemos sobre el funcionamiento interno de los objetos en Python. Algunos programadores con experiencia en otros lenguajes de programaci\u00f3n a menudo encuentran que la noci\u00f3n de clases en Python carece de ciertas caracter\u00edsticas. Por ejemplo, no existe la noci\u00f3n de control de accesso (e.g. privado, protegido), el argumento self lo encuentran extra\u00f1o, y trabajar con objetos se siente como una actividad con mucho libertinaje. Conoceremos como todo funciona y algunos patrones comunes para la encapsulaci\u00f3n interna de objetos. Generadores La iteraci\u00f3n es uno de los m\u00e1s comunes patrones de programaci\u00f3n en Python. Los programas hacen mucha iteraci\u00f3n para procesar listas, leer archivos, consultar una base de datos, y m\u00e1s. Una de las caracter\u00edsticas mas poderosas de Python es la habilidad de costumizar y redefinir la iteraci\u00f3n en una funci\u00f3n generadora. Al final de la secci\u00f3n, escribiremos algunos programas que procesan datos en tiempo real en una manera interesante. Temas avanzados En esta secci\u00f3n, veremos una peque\u00f1a colecci\u00f3n de algunas caracter\u00edsticas avanzadas de Python que posiblemente encontremos en nuestra programaci\u00f3n cotidiana. Los temas en esta secci\u00f3n son s\u00f3lo una introducci\u00f3n a estas ideas. Prueba y Depuraci\u00f3n Esta secci\u00f3n introduce unos tem\u00e1s b\u00e1sicas en relaci\u00f3n a pruebas, reporter\u00eda y depuraci\u00f3n. Paquetes Concluiremos el curso con algunos detalles para la organizaci\u00f3n de c\u00f3digo en paquetes. Adem\u00e1s, discutiremos sobre la instalaci\u00f3n de paquetes de terceros y sobre la preparaci\u00f3n necesaria para entregarle nuestro c\u00f3digo a otros. El tema de empaquetamiento de c\u00f3digo essta en constante evoluci\u00f3n y es una parte compleja en el desarrollo de Python. Por tanto, esta secci\u00f3n esta enfocada en compartir algunos principios de organizaci\u00f3n general de c\u00f3digo.","title":"Temario"},{"location":"temas_avanzados/","text":"Temas Avanzados","title":"7 Temas avanzados"},{"location":"temas_avanzados/#temas-avanzados","text":"","title":"Temas Avanzados"},{"location":"trabajando_data/","text":"2. Trabajando con data Conoceremos las estructuras de datos de fundamental importancia en Python: tuples, lists, sets y dictionaries. Presentaremos algunos patrones comunes para el manejo de datos y discutiremos el modelo de objetos en Python. 2.1 Tipos y estructuras de datos 2.1.1 Tipos primitivos 2.1.2: Tipos primitivos 2.1.3: El tipo None 2.1.4: Estructuras de data 2.1.5: Tuplas 2.1.6: Desempaque de Tuplas 2.1.76 Tuplas vs Listas 2.1.8 Diccionarios 2.1.9 Operaciones comunes 2.1.10 \u00bfPorqu\u00e9 diccionarios? 2.1.11 Diccionarios 2.1.12 Ejercicios Ejercicio 2.1: Tuplas Ejercicio 2.2: Diccionarios como estructura de datos Ejercicio 2.3: Otras operaciones adicionales 2.2 Contenedores 2.2.1: Panorama 1.2.2: Listas como un Contenedor 1.2.3: Construcci\u00f3n de una lista 1.2.4: Diccionarios como contenedores 1.2.5: Construcci\u00f3n de un diccionario 1.2.6: B\u00fasquedas de diccionario 1.2.7: Claves compuestas 1.2.8: Variables 1.2.9: Conjuntos (Sets) 1.2.10: Ejercicios Ejercicio 2.4: Una lista de tuplas Ejercicio 2.5: Lista de diccionarios Ejercicio 2.6: Diccionarios como contenedor Ejercicio 2.8: Descubre si te puedes jubilar 2.3 Salida formateada 2.3.1: Formateo de cadena 2.3.2: C\u00f3digos de formato 2.3.3: Formateo de diccionarios 2.3.4: El m\u00e9todo format() 2.3.5: Formateo al estilo C 2.3.6: Ejercicios Ejercicio 2.8: Como formatear numeros Ejercicio 2.9: Coleccionando data Ejercicio 2.10: Imprimiendo una tabla formateada Ejercicio 2.11: Agregando algunos encabezados Ejercicio 2.12: Un reto 2.4 Secuencias 2.4.1: Tipos de secuencias 2.4.2: Rebanar 2.4.3: Rebanar y reasignar 2.4.4: Secuencia de reducciones 2.4.5: Iteracion sobre una secuencia 2.4.6: La declaraci\u00f3n break 2.4.7: La declaraci\u00f3n continue 2.4.8: Ciclando sobre enteros 2.4.9: La funci\u00f3n enumerate() 2.4.10: For y tuplas 2.4.11: La funci\u00f3n zip() 2.4.12: Ejercicios Ejercicio 2.13: Contar Ejercicio 2.14: Mas operaciones sobre secuencias Ejercicio 2.15: Un ejemplo pr\u00e1ctico de enumerate() Ejercicio 2.16: Usando la funci\u00f3n zip() Ejercicio 2.17: Invirtiendo un diccionario 2.5 El modulo collections 2.5.1: Ejemplo: contando cosas 2.5.2: Contadores 2.5.3: Ejemplo: asignaciones uno-muchos 2.5.4: Ejemplo: guardando un historial 2.5.5: Ejercicios 2.19: Tabulaci\u00f3n con contadores Comentario: el modulo collections 2.6 List comprehensions 2.6.1: Creando nuevas listas 2.6.2: Filtrar 2.6.3: Casos de uso 2.6.4: Sintaxis general 2.6.5: Digresi\u00f3n hist\u00f3rica 2.6.6: Ejercicios 2.19: List comprehensions 2.20: Reducciones de secuencia 2.21: Consulta de datos 2.22: Extracci\u00f3n de datos 2.23: Extracci\u00f3n de datos desde archivos CSV Comentario 2.7 El modelo Objeto 2.7.1: Asignacion 2.7.2: Ejemplo de asignacion 2.7.3: Reasignacion de valores 2.7.4: Algunos peligros 2.7.5: Identidad y referencias 2.7.6: Copias superficiales 2.29: Copias profundas 2.30: Nombres, valores, tipos 2.31: Verificaci\u00f3n de tipo 2.32: Todo es un objeto 2.33: Ejercicios Ejercicio 2.24: Data de primera-clase Ejercicio 2.25: Creando diccionarios Ejercicio 2.26: El horizonte","title":"2 Trabajando con Data"},{"location":"trabajando_data/#2-trabajando-con-data","text":"Conoceremos las estructuras de datos de fundamental importancia en Python: tuples, lists, sets y dictionaries. Presentaremos algunos patrones comunes para el manejo de datos y discutiremos el modelo de objetos en Python.","title":"2. Trabajando con data"},{"location":"trabajando_data/#21-tipos-y-estructuras-de-datos","text":"","title":"2.1 Tipos y estructuras de datos"},{"location":"trabajando_data/#211-tipos-primitivos","text":"","title":"2.1.1 Tipos primitivos"},{"location":"trabajando_data/#212-tipos-primitivos","text":"","title":"2.1.2: Tipos primitivos"},{"location":"trabajando_data/#213-el-tipo-none","text":"","title":"2.1.3: El tipo None"},{"location":"trabajando_data/#214-estructuras-de-data","text":"","title":"2.1.4: Estructuras de data"},{"location":"trabajando_data/#215-tuplas","text":"","title":"2.1.5: Tuplas"},{"location":"trabajando_data/#216-desempaque-de-tuplas","text":"","title":"2.1.6: Desempaque de Tuplas"},{"location":"trabajando_data/#2176-tuplas-vs-listas","text":"","title":"2.1.76 Tuplas vs Listas"},{"location":"trabajando_data/#218-diccionarios","text":"","title":"2.1.8 Diccionarios"},{"location":"trabajando_data/#219-operaciones-comunes","text":"","title":"2.1.9 Operaciones comunes"},{"location":"trabajando_data/#2110-porque-diccionarios","text":"","title":"2.1.10 \u00bfPorqu\u00e9 diccionarios?"},{"location":"trabajando_data/#2111-diccionarios","text":"","title":"2.1.11 Diccionarios"},{"location":"trabajando_data/#2112-ejercicios","text":"","title":"2.1.12 Ejercicios"},{"location":"trabajando_data/#ejercicio-21-tuplas","text":"","title":"Ejercicio 2.1: Tuplas"},{"location":"trabajando_data/#ejercicio-22-diccionarios-como-estructura-de-datos","text":"","title":"Ejercicio 2.2: Diccionarios como estructura de datos"},{"location":"trabajando_data/#ejercicio-23-otras-operaciones-adicionales","text":"","title":"Ejercicio 2.3: Otras operaciones adicionales"},{"location":"trabajando_data/#22-contenedores","text":"","title":"2.2 Contenedores"},{"location":"trabajando_data/#221-panorama","text":"","title":"2.2.1: Panorama"},{"location":"trabajando_data/#122-listas-como-un-contenedor","text":"","title":"1.2.2: Listas como un Contenedor"},{"location":"trabajando_data/#123-construccion-de-una-lista","text":"","title":"1.2.3: Construcci\u00f3n de una lista"},{"location":"trabajando_data/#124-diccionarios-como-contenedores","text":"","title":"1.2.4: Diccionarios como contenedores"},{"location":"trabajando_data/#125-construccion-de-un-diccionario","text":"","title":"1.2.5: Construcci\u00f3n de un diccionario"},{"location":"trabajando_data/#126-busquedas-de-diccionario","text":"","title":"1.2.6: B\u00fasquedas de diccionario"},{"location":"trabajando_data/#127-claves-compuestas","text":"","title":"1.2.7: Claves compuestas"},{"location":"trabajando_data/#128-variables","text":"","title":"1.2.8: Variables"},{"location":"trabajando_data/#129-conjuntos-sets","text":"","title":"1.2.9: Conjuntos (Sets)"},{"location":"trabajando_data/#1210-ejercicios","text":"","title":"1.2.10: Ejercicios"},{"location":"trabajando_data/#ejercicio-24-una-lista-de-tuplas","text":"","title":"Ejercicio 2.4: Una lista de tuplas"},{"location":"trabajando_data/#ejercicio-25-lista-de-diccionarios","text":"","title":"Ejercicio 2.5: Lista de diccionarios"},{"location":"trabajando_data/#ejercicio-26-diccionarios-como-contenedor","text":"","title":"Ejercicio 2.6: Diccionarios como contenedor"},{"location":"trabajando_data/#ejercicio-28-descubre-si-te-puedes-jubilar","text":"","title":"Ejercicio 2.8: Descubre si te puedes jubilar"},{"location":"trabajando_data/#23-salida-formateada","text":"","title":"2.3 Salida formateada"},{"location":"trabajando_data/#231-formateo-de-cadena","text":"","title":"2.3.1: Formateo de cadena"},{"location":"trabajando_data/#232-codigos-de-formato","text":"","title":"2.3.2: C\u00f3digos de formato"},{"location":"trabajando_data/#233-formateo-de-diccionarios","text":"","title":"2.3.3: Formateo de diccionarios"},{"location":"trabajando_data/#234-el-metodo-format","text":"","title":"2.3.4: El m\u00e9todo format()"},{"location":"trabajando_data/#235-formateo-al-estilo-c","text":"","title":"2.3.5: Formateo al estilo C"},{"location":"trabajando_data/#236-ejercicios","text":"","title":"2.3.6: Ejercicios"},{"location":"trabajando_data/#ejercicio-28-como-formatear-numeros","text":"","title":"Ejercicio 2.8: Como formatear numeros"},{"location":"trabajando_data/#ejercicio-29-coleccionando-data","text":"","title":"Ejercicio 2.9: Coleccionando data"},{"location":"trabajando_data/#ejercicio-210-imprimiendo-una-tabla-formateada","text":"","title":"Ejercicio 2.10: Imprimiendo una tabla formateada"},{"location":"trabajando_data/#ejercicio-211-agregando-algunos-encabezados","text":"","title":"Ejercicio 2.11: Agregando algunos encabezados"},{"location":"trabajando_data/#ejercicio-212-un-reto","text":"","title":"Ejercicio 2.12: Un reto"},{"location":"trabajando_data/#24-secuencias","text":"","title":"2.4 Secuencias"},{"location":"trabajando_data/#241-tipos-de-secuencias","text":"","title":"2.4.1: Tipos de secuencias"},{"location":"trabajando_data/#242-rebanar","text":"","title":"2.4.2: Rebanar"},{"location":"trabajando_data/#243-rebanar-y-reasignar","text":"","title":"2.4.3: Rebanar y reasignar"},{"location":"trabajando_data/#244-secuencia-de-reducciones","text":"","title":"2.4.4: Secuencia de reducciones"},{"location":"trabajando_data/#245-iteracion-sobre-una-secuencia","text":"","title":"2.4.5: Iteracion sobre una secuencia"},{"location":"trabajando_data/#246-la-declaracion-break","text":"","title":"2.4.6: La declaraci\u00f3n break"},{"location":"trabajando_data/#247-la-declaracion-continue","text":"","title":"2.4.7: La declaraci\u00f3n continue"},{"location":"trabajando_data/#248-ciclando-sobre-enteros","text":"","title":"2.4.8: Ciclando sobre enteros"},{"location":"trabajando_data/#249-la-funcion-enumerate","text":"","title":"2.4.9: La funci\u00f3n enumerate()"},{"location":"trabajando_data/#2410-for-y-tuplas","text":"","title":"2.4.10: For y tuplas"},{"location":"trabajando_data/#2411-la-funcion-zip","text":"","title":"2.4.11: La funci\u00f3n zip()"},{"location":"trabajando_data/#2412-ejercicios","text":"","title":"2.4.12: Ejercicios"},{"location":"trabajando_data/#ejercicio-213-contar","text":"","title":"Ejercicio 2.13: Contar"},{"location":"trabajando_data/#ejercicio-214-mas-operaciones-sobre-secuencias","text":"","title":"Ejercicio 2.14: Mas operaciones sobre secuencias"},{"location":"trabajando_data/#ejercicio-215-un-ejemplo-practico-de-enumerate","text":"","title":"Ejercicio 2.15: Un ejemplo pr\u00e1ctico de enumerate()"},{"location":"trabajando_data/#ejercicio-216-usando-la-funcion-zip","text":"","title":"Ejercicio 2.16: Usando la funci\u00f3n zip()"},{"location":"trabajando_data/#ejercicio-217-invirtiendo-un-diccionario","text":"","title":"Ejercicio 2.17: Invirtiendo un diccionario"},{"location":"trabajando_data/#25-el-modulo-collections","text":"","title":"2.5 El modulo collections"},{"location":"trabajando_data/#251-ejemplo-contando-cosas","text":"","title":"2.5.1: Ejemplo: contando cosas"},{"location":"trabajando_data/#252-contadores","text":"","title":"2.5.2: Contadores"},{"location":"trabajando_data/#253-ejemplo-asignaciones-uno-muchos","text":"","title":"2.5.3: Ejemplo: asignaciones uno-muchos"},{"location":"trabajando_data/#254-ejemplo-guardando-un-historial","text":"","title":"2.5.4: Ejemplo: guardando un historial"},{"location":"trabajando_data/#255-ejercicios","text":"","title":"2.5.5: Ejercicios"},{"location":"trabajando_data/#219-tabulacion-con-contadores","text":"","title":"2.19: Tabulaci\u00f3n con contadores"},{"location":"trabajando_data/#comentario-el-modulo-collections","text":"","title":"Comentario: el modulo collections"},{"location":"trabajando_data/#26-list-comprehensions","text":"","title":"2.6 List comprehensions"},{"location":"trabajando_data/#261-creando-nuevas-listas","text":"","title":"2.6.1: Creando nuevas listas"},{"location":"trabajando_data/#262-filtrar","text":"","title":"2.6.2: Filtrar"},{"location":"trabajando_data/#263-casos-de-uso","text":"","title":"2.6.3: Casos de uso"},{"location":"trabajando_data/#264-sintaxis-general","text":"","title":"2.6.4: Sintaxis general"},{"location":"trabajando_data/#265-digresion-historica","text":"","title":"2.6.5: Digresi\u00f3n hist\u00f3rica"},{"location":"trabajando_data/#266-ejercicios","text":"","title":"2.6.6: Ejercicios"},{"location":"trabajando_data/#219-list-comprehensions","text":"","title":"2.19: List comprehensions"},{"location":"trabajando_data/#220-reducciones-de-secuencia","text":"","title":"2.20: Reducciones de secuencia"},{"location":"trabajando_data/#221-consulta-de-datos","text":"","title":"2.21: Consulta de datos"},{"location":"trabajando_data/#222-extraccion-de-datos","text":"","title":"2.22: Extracci\u00f3n de datos"},{"location":"trabajando_data/#223-extraccion-de-datos-desde-archivos-csv","text":"","title":"2.23: Extracci\u00f3n de datos desde archivos CSV"},{"location":"trabajando_data/#comentario","text":"","title":"Comentario"},{"location":"trabajando_data/#27-el-modelo-objeto","text":"","title":"2.7 El modelo Objeto"},{"location":"trabajando_data/#271-asignacion","text":"","title":"2.7.1: Asignacion"},{"location":"trabajando_data/#272-ejemplo-de-asignacion","text":"","title":"2.7.2: Ejemplo de asignacion"},{"location":"trabajando_data/#273-reasignacion-de-valores","text":"","title":"2.7.3: Reasignacion de valores"},{"location":"trabajando_data/#274-algunos-peligros","text":"","title":"2.7.4: Algunos peligros"},{"location":"trabajando_data/#275-identidad-y-referencias","text":"","title":"2.7.5: Identidad y referencias"},{"location":"trabajando_data/#276-copias-superficiales","text":"","title":"2.7.6: Copias superficiales"},{"location":"trabajando_data/#229-copias-profundas","text":"","title":"2.29: Copias profundas"},{"location":"trabajando_data/#230-nombres-valores-tipos","text":"","title":"2.30: Nombres, valores, tipos"},{"location":"trabajando_data/#231-verificacion-de-tipo","text":"","title":"2.31: Verificaci\u00f3n de tipo"},{"location":"trabajando_data/#232-todo-es-un-objeto","text":"","title":"2.32: Todo es un objeto"},{"location":"trabajando_data/#233-ejercicios","text":"","title":"2.33: Ejercicios"},{"location":"trabajando_data/#ejercicio-224-data-de-primera-clase","text":"","title":"Ejercicio 2.24: Data de primera-clase"},{"location":"trabajando_data/#ejercicio-225-creando-diccionarios","text":"","title":"Ejercicio 2.25: Creando diccionarios"},{"location":"trabajando_data/#ejercicio-226-el-horizonte","text":"","title":"Ejercicio 2.26: El horizonte"}]}